{
  "openapi": "3.0.3",
  "info": {
    "version": "0.1.76",
    "title": "Blockfrost.io ~ API Documentation",
    "x-logo": {
      "url": "https://staging.blockfrost.io/images/logo.svg",
      "altText": "Blockfrost"
    },
    "contact": {
      "name": "Blockfrost Team",
      "url": "https://blockfrost.io",
      "email": "contact@blockfrost.io"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "termsOfService": "https://blockfrost.io/terms",
    "description": "Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.\n\n## Tokens\n\nAfter signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project.\nHTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.\n\n## Available networks\n\nAt the moment, you can use the following networks. Please, note that each network has its own `project_id`.\n\n<table>\n  <tbody>\n    <tr>\n      <td>\n          <b>Network</b>\n      </td>\n      <td>\n          <b>Endpoint</b>\n      </td>\n    </tr>\n    <tr>\n        <td>Cardano mainnet</td>\n        <td>\n            <code>https://cardano-mainnet.blockfrost.io/api/v0</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Cardano preprod</td>\n        <td>\n            <code>https://cardano-preprod.blockfrost.io/api/v0</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Cardano preview</td>\n        <td>\n            <code>https://cardano-preview.blockfrost.io/api/v0</code>\n        </td>\n    </tr>\n    <tr>\n        <td>InterPlanetary File System</td>\n        <td>\n            <code>https://ipfs.blockfrost.io/api/v0</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Milkomeda mainnet</td>\n        <td>\n            <code>https://milkomeda-mainnet.blockfrost.io/api/v0</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Milkomeda testnet</td>\n        <td>\n            <code>https://milkomeda-testnet.blockfrost.io/api/v0</code>\n        </td>\n    </tr>\n  </tbody>\n</table>\n\n## Milkomeda\n\n<p>\n  <span>\n    For more information about how to use Milkomeda as well as the list of available endpoints, see the <a href=\"https://blockfrost.dev/start-building/milkomeda\" target=\"_blank\">Milkomeda section</a>.\n  </span>\n</p>\n\n\n## Concepts\n\n* All endpoints return either a JSON object or an array.\n* Data is returned in *ascending* (oldest first, newest last) order, if not stated otherwise.\n  * You might use the `?order=desc` query parameter to reverse this order.\n* By default, we return 100 results at a time. You have to use `?page=2` to list through the results.\n* All time and timestamp related fields (except `server_time`) are in seconds of UNIX time.\n* All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces.\n* Addresses, accounts and pool IDs are in Bech32 format.\n* All values are case sensitive.\n* All hex encoded values are lower case.\n* Examples are not based on real data. Any resemblance to actual events is purely coincidental.\n* We allow to upload files up to 100MB of size to IPFS. This might increase in the future.\n* Only pinned IPFS files are counted towards the IPFS quota.\n* Non-pinned IPFS files are subject to regular garbage collection and will be removed unless pinned.\n* We allow maximum of 100 queued pins per IPFS user.\n\n## Errors\n\n### HTTP Status codes\n\nThe following are HTTP status code your application might receive when reaching Blockfrost endpoints and\nit should handle all of these cases.\n\n* HTTP `400` return code is used when the request is not valid.\n* HTTP `402` return code is used when the projects exceed their daily request limit.\n* HTTP `403` return code is used when the request is not authenticated.\n* HTTP `404` return code is used when the resource doesn't exist.\n* HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`.\n* HTTP `425` return code is used in Cardano networks, when the user has submitted a transaction when the mempool is already full, not accepting new txs straight away.\n* HTTP `425` return code is used in IPFS network, when the user has submitted a pin when the pin queue is already full, not accepting new pins straight away.\n* HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited.\n* HTTP `500` return code is used when our endpoints are having a problem.\n\n### Error codes\n\nAn internal error code number is used for better indication of the error in question. It is passed using the following payload.\n\n```json\n{\n  \"status_code\": 403,\n  \"error\": \"Forbidden\",\n  \"message\": \"Invalid project token.\"\n}\n```\n## Limits\n\nThere are two types of limits we are enforcing:\n\nThe first depends on your plan and is the number of request we allow per day. We defined the day from midnight to midnight of UTC time.\n\nThe second is rate limiting. We limit an end user, distinguished by IP address, to 10 requests per second. On top of that, we allow\neach user to send burst of 500 requests, which cools off at rate of 10 requests per second. In essence, a user is allowed to make another\nwhole burst after (currently) 500/10 = 50 seconds. E.g. if a user attempts to make a call 3 seconds after whole burst, 30 requests will be processed.\nWe believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and\nwe will make sure to take it into account as much as we can.\n\n## SDKs\n\nWe support a number of SDKs that will help you in developing your application on top of Blockfrost.\n\n<table>\n  <tbody>\n    <tr>\n        <td><b>Programming language</b></td>\n        <td><b>SDK</b></td>\n    </tr>\n    <tr>\n        <td>JavaScript</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-js\">blockfrost-js</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Haskell</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-haskell\">blockfrost-haskell</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Python</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-python\">blockfrost-python</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Rust</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-rust\">blockfrost-rust</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Golang</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-go\">blockfrost-go</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Ruby</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-ruby\">blockfrost-ruby</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Java</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-java\">blockfrost-java</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Scala</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-scala\">blockfrost-scala</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Swift</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-swift\">blockfrost-swift</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Kotlin</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-kotlin\">blockfrost-kotlin</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Elixir</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-elixir\">blockfrost-elixir</a>\n        </td>\n    </tr>\n    <tr>\n        <td>.NET</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-dotnet\">blockfrost-dotnet</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Arduino</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-arduino\">blockfrost-arduino</a>\n        </td>\n    </tr>\n    <tr>\n        <td>PHP</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-php\">blockfrost-php</a>\n        </td>\n    </tr>\n    <tr>\n        <td>Crystal</td>\n        <td>\n            <a href=\"https://github.com/blockfrost/blockfrost-crystal\">blockfrost-crystal</a>\n        </td>\n    </tr>\n  </tbody>\n</table>\n"
  },
  "servers": [
    {
      "url": "https://cardano-mainnet.blockfrost.io/api/v0",
      "description": "Cardano Mainnet network"
    },
    {
      "url": "https://cardano-preprod.blockfrost.io/api/v0",
      "description": "Cardano Preprod network"
    },
    {
      "url": "https://cardano-preview.blockfrost.io/api/v0",
      "description": "Cardano Preview network"
    },
    {
      "url": "https://localhost:3000",
      "description": "local"
    }
  ],
  "security": [
    {
      "project_id": []
    }
  ],
  "tags": [
    {
      "name": "Health"
    },
    {
      "name": "Metrics"
    },
    {
      "name": "Cardano » Accounts"
    },
    {
      "name": "Cardano » Addresses"
    },
    {
      "name": "Cardano » Assets"
    },
    {
      "name": "Cardano » Blocks"
    },
    {
      "name": "Cardano » Epochs"
    },
    {
      "name": "Cardano » Governance"
    },
    {
      "name": "Cardano » Ledger"
    },
    {
      "name": "Cardano » Mempool"
    },
    {
      "name": "Cardano » Metadata"
    },
    {
      "name": "Cardano » Network"
    },
    {
      "name": "Cardano » Pools"
    },
    {
      "name": "Cardano » Scripts"
    },
    {
      "name": "Cardano » Transactions"
    },
    {
      "name": "Cardano » Utilities"
    },
    {
      "name": "IPFS » Add"
    },
    {
      "name": "IPFS » Gateway"
    },
    {
      "name": "IPFS » Pins"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Root endpoint",
        "description": "Root endpoint has no other function than to point end users to documentation.\n",
        "responses": {
          "200": {
            "description": "Information pointing to the documentation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "example": "https://blockfrost.io/"
                    },
                    "version": {
                      "type": "string",
                      "example": "0.1.0"
                    }
                  },
                  "required": [
                    "url",
                    "version"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Backend health status",
        "security": [],
        "description": "Return backend status as a boolean. Your application should handle situations when backend for the given chain is unavailable.\n",
        "responses": {
          "200": {
            "description": "Return the boolean indicating the health of the backend.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_healthy": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "required": [
                    "is_healthy"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/health/clock": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Current backend time",
        "description": "This endpoint provides the current UNIX time. Your application might\nuse this to verify if the client clock is not out of sync.\n",
        "responses": {
          "200": {
            "description": "Return the current UNIX time in milliseconds.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "server_time": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1603400958947
                    }
                  },
                  "required": [
                    "server_time"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/latest": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Latest block",
        "description": "Return the latest block available to the backends, also known as the\ntip of the blockchain.\n",
        "responses": {
          "200": {
            "description": "Return the contents of the block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/latest/txs": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Latest block transactions",
        "description": "Return the transactions within the latest block.",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Ordered by tx index in the block.\nThe ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content_txs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/latest/txs/cbor": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Latest block transactions with CBOR data",
        "description": "Return the transactions within the latest block, including CBOR representations.",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Ordered by tx index in the block.\nThe ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block with CBOR data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content_txs_cbor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/{hash_or_number}": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Specific block",
        "description": "Return the content of a requested block.\n",
        "parameters": [
          {
            "in": "path",
            "name": "hash_or_number",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string or block number."
            },
            "description": "Hash or number of the requested block.",
            "example": "4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/{hash_or_number}/next": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Listing of next blocks",
        "description": "Return the list of blocks following a specific block.\n",
        "parameters": [
          {
            "in": "path",
            "name": "hash_or_number",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string or block number."
            },
            "description": "Hash of the requested block.",
            "example": "5ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content_array"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/{hash_or_number}/previous": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Listing of previous blocks",
        "description": "Return the list of blocks preceding a specific block.\n",
        "parameters": [
          {
            "in": "path",
            "name": "hash_or_number",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string or block number."
            },
            "description": "Hash of the requested block",
            "example": "4873401"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content_array"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/slot/{slot_number}": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Specific block in a slot",
        "description": "Return the content of a requested block for a specific slot.\n",
        "parameters": [
          {
            "in": "path",
            "name": "slot_number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "slot number"
            },
            "description": "Slot position for requested block.",
            "example": 30895909
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/epoch/{epoch_number}/slot/{slot_number}": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Specific block in a slot in an epoch",
        "description": "Return the content of a requested block for a specific slot in an epoch.\n",
        "parameters": [
          {
            "in": "path",
            "name": "epoch_number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "slot number"
            },
            "description": "Epoch for specific epoch slot.",
            "example": 219
          },
          {
            "in": "path",
            "name": "slot_number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "slot number"
            },
            "description": "Slot position for requested block.",
            "example": 30895909
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/{hash_or_number}/txs": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Block transactions",
        "description": "Return the transactions within the block.",
        "parameters": [
          {
            "in": "path",
            "name": "hash_or_number",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string or block number."
            },
            "description": "Hash of the requested block.",
            "example": "4873401"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Ordered by tx index in the block.\nThe ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content_txs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/{hash_or_number}/txs/cbor": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Block transactions with CBOR data",
        "description": "Return the transactions within the block, including CBOR representations.",
        "parameters": [
          {
            "in": "path",
            "name": "hash_or_number",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string or block number."
            },
            "description": "Hash of the requested block.",
            "example": "4873401"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Ordered by tx index in the block.\nThe ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block with CBOR data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content_txs_cbor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/blocks/{hash_or_number}/addresses": {
      "get": {
        "tags": [
          "Cardano » Blocks"
        ],
        "summary": "Addresses affected in a specific block",
        "description": "Return list of addresses affected in the specified block with additional information, sorted by the bech32 address, ascending.",
        "parameters": [
          {
            "in": "path",
            "name": "hash_or_number",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string or block number."
            },
            "description": "Hash of the requested block.",
            "example": "4873401"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_content_addresses"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/genesis": {
      "get": {
        "tags": [
          "Cardano » Ledger"
        ],
        "summary": "Blockchain genesis",
        "description": "Return the information about blockchain genesis.",
        "responses": {
          "200": {
            "description": "Return the genesis parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/genesis_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/dreps": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "Delegate Representatives (DReps)",
        "description": "Return the information about Delegate Representatives (DReps)",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\nOrdering in this case is based on the time of the first mint transaction.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated array with the Delegate Representatives (DReps) data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dreps"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/dreps/{drep_id}": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "Specific DRep",
        "description": "DRep information.",
        "parameters": [
          {
            "in": "path",
            "name": "drep_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal DRep ID.",
            "example": "drep15cfxz9exyn5rx0807zvxfrvslrjqfchrd4d47kv9e0f46uedqtc"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the DRep information content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/drep"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/dreps/{drep_id}/delegators": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "DRep delegators",
        "description": "List of Drep delegators.",
        "parameters": [
          {
            "in": "path",
            "name": "drep_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal drep ID.",
            "example": "drep1mvdu8slennngja7w4un6knwezufra70887zuxpprd64jxfveahn"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the DRep delegations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/drep_delegators"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/dreps/{drep_id}/metadata": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "DRep metadata",
        "description": "DRep metadata information.",
        "parameters": [
          {
            "in": "path",
            "name": "drep_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal DRep ID.",
            "example": "drep15cfxz9exyn5rx0807zvxfrvslrjqfchrd4d47kv9e0f46uedqtc"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the DRep metadata content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/drep_metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/dreps/{drep_id}/updates": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "DRep updates",
        "description": "List of certificate updates to the DRep.",
        "parameters": [
          {
            "in": "path",
            "name": "drep_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal DRep ID.",
            "example": "drep15cfxz9exyn5rx0807zvxfrvslrjqfchrd4d47kv9e0f46uedqtc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the Drep updates history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/drep_updates"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/dreps/{drep_id}/votes": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "DRep votes",
        "description": "History of Drep votes.",
        "parameters": [
          {
            "in": "path",
            "name": "drep_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal drep ID.",
            "example": "drep1mvdu8slennngja7w4un6knwezufra70887zuxpprd64jxfveahn"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the DRep votes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/drep_votes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/proposals": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "Proposals",
        "description": "Return the information about Proposals",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\nOrdering in this case is based on the time of the first mint transaction.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated array with the proposal data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proposals"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/proposals/{tx_hash}/{cert_index}": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "Specific proposal",
        "description": "Proposal information.",
        "parameters": [
          {
            "in": "path",
            "name": "tx_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction hash.",
            "example": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531"
          },
          {
            "in": "path",
            "name": "cert_index",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Index of the certificate within the proposal transaction.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Return the proposal information content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proposal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/proposals/{tx_hash}/{cert_index}/parameters": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "Specific parameters proposal",
        "description": "Parameters proposal details.",
        "parameters": [
          {
            "in": "path",
            "name": "tx_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction hash.",
            "example": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531"
          },
          {
            "in": "path",
            "name": "cert_index",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Index of the certificate within the proposal transaction.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Return the proposal parameters content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proposal_parameters"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/proposals/{tx_hash}/{cert_index}/withdrawals": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "Specific withdrawals proposal",
        "description": "Parameters withdrawals details.",
        "parameters": [
          {
            "in": "path",
            "name": "tx_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction hash.",
            "example": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531"
          },
          {
            "in": "path",
            "name": "cert_index",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Index of the certificate within the proposal transaction.",
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Return the proposal withdrawals content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proposal_withdrawals"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/proposals/{tx_hash}/{cert_index}/votes": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "Proposal votes",
        "description": "History of Proposal votes.",
        "parameters": [
          {
            "in": "path",
            "name": "tx_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction hash.",
            "example": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531"
          },
          {
            "in": "path",
            "name": "cert_index",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Index of the certificate within the proposal transaction.",
            "example": 1
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the Proposal votes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proposal_votes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/governance/proposals/{tx_hash}/{cert_index}/metadata": {
      "get": {
        "tags": [
          "Cardano » Governance"
        ],
        "summary": "Specific proposal metadata",
        "description": "Proposal metadata information.",
        "parameters": [
          {
            "in": "path",
            "name": "tx_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Transaction hash of the proposal.",
            "example": "2403339d2f344202fb3583353e11a693a82860e59e65939dcb0e2ac72336d631"
          },
          {
            "in": "path",
            "name": "cert_index",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Index of the certificate within the proposal transaction.",
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Return the proposal information content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proposal_metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/latest": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Latest epoch",
        "description": "Return the information about the latest, therefore current, epoch.",
        "responses": {
          "200": {
            "description": "Return the data about the epoch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/latest/parameters": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Latest epoch protocol parameters",
        "description": "Return the protocol parameters for the latest epoch.",
        "responses": {
          "200": {
            "description": "Return the data about the epoch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_param_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/{number}": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Specific epoch",
        "description": "Return the content of the requested epoch.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of the epoch",
            "example": 225
          }
        ],
        "responses": {
          "200": {
            "description": "Return the epoch data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/{number}/next": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Listing of next epochs",
        "description": "Return the list of epochs following a specific epoch.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of the requested epoch.",
            "example": 225
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          }
        ],
        "responses": {
          "200": {
            "description": "Return the data about the epoch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_content_array"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/{number}/previous": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Listing of previous epochs",
        "description": "Return the list of epochs preceding a specific epoch.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of the epoch",
            "example": 225
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the epoch data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_content_array"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/{number}/stakes": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Stake distribution",
        "description": "Return the active stake distribution for the specified epoch.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of the epoch",
            "example": 225
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          }
        ],
        "responses": {
          "200": {
            "description": "Return the data about the epoch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_stake_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/{number}/stakes/{pool_id}": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Stake distribution by pool",
        "description": "Return the active stake distribution for the epoch specified by stake pool.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of the epoch",
            "example": 225
          },
          {
            "in": "path",
            "required": true,
            "name": "pool_id",
            "schema": {
              "type": "string"
            },
            "description": "Stake pool ID to filter",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          }
        ],
        "responses": {
          "200": {
            "description": "Return the data about the epoch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_stake_pool_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/{number}/blocks": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Block distribution",
        "description": "Return the blocks minted for the epoch specified.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of the epoch",
            "example": 225
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the data about the epoch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_block_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/{number}/blocks/{pool_id}": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Block distribution by pool",
        "description": "Return the block minted for the epoch specified by stake pool.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of the epoch",
            "example": 225
          },
          {
            "in": "path",
            "required": true,
            "name": "pool_id",
            "schema": {
              "type": "string"
            },
            "description": "Stake pool ID to filter",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the data about the epoch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_block_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/epochs/{number}/parameters": {
      "get": {
        "tags": [
          "Cardano » Epochs"
        ],
        "summary": "Protocol parameters",
        "description": "Return the protocol parameters for the epoch specified.",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of the epoch",
            "example": 225
          }
        ],
        "responses": {
          "200": {
            "description": "Return the data about the epoch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/epoch_param_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Specific transaction",
        "description": "Return content of the requested transaction.",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Hash of the requested transaction",
            "example": "6e5f825c42c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/utxos": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction UTXOs",
        "description": "Return the inputs and UTXOs of the specific transaction.",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string"
            },
            "description": "Hash of the requested transaction",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_utxo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/stakes": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction stake addresses certificates",
        "description": "Obtain information about (de)registration of stake addresses within a transaction.\n",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Hash of the requested transaction.",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain information about (de)registration of stake addresses within a transaction.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_stake_addr"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/delegations": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction delegation certificates",
        "description": "Obtain information about delegation certificates of a specific transaction.\n",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string"
            },
            "description": "Hash of the requested transaction.",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain information about delegation certificates of a specific transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_delegations"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/withdrawals": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction withdrawal",
        "description": "Obtain information about withdrawals of a specific transaction.",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string"
            },
            "description": "Hash of the requested transaction.",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain information about withdrawals of a specific transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_withdrawals"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/mirs": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction MIRs",
        "description": "Obtain information about Move Instantaneous Rewards (MIRs) of a specific transaction.",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string"
            },
            "description": "Hash of the requested transaction.",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain information about Move Instantaneous Rewards (MIRs) of a specific transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_mirs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/pool_updates": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction stake pool registration and update certificates",
        "description": "Obtain information about stake pool registration and update certificates of a specific transaction.\n",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string"
            },
            "description": "Hash of the requested transaction",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain information about stake pool certificates of a specific transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_pool_certs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/pool_retires": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction stake pool retirement certificates",
        "description": "Obtain information about stake pool retirements within a specific transaction.\n",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Hash of the requested transaction",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain information about stake pool retirements within a specific transaction.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_pool_retires"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/metadata": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction metadata",
        "description": "Obtain the transaction metadata.",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Hash of the requested transaction",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain metadata information associated with a specific transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_metadata"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/metadata/cbor": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction metadata in CBOR",
        "description": "Obtain the transaction metadata in CBOR.",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Hash of the requested transaction",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain metadata information associated with a specific transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_metadata_cbor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/redeemers": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction redeemers",
        "description": "Obtain the transaction redeemers.",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Hash of the requested transaction",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Obtain information about redeemers within a specific transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_redeemers"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/required_signers": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction required signers",
        "description": "Obtain the extra transaction witnesses.",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Hash of the transaction",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Query required signers (extra transaction witnesses)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_required_signers"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/txs/{hash}/cbor": {
      "get": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Transaction CBOR",
        "description": "Obtain the CBOR serialized transaction",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Hash of the transaction",
            "example": "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Query transaction CBOR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_content_cbor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tx/submit": {
      "post": {
        "tags": [
          "Cardano » Transactions"
        ],
        "summary": "Submit a transaction",
        "description": "Submit an already serialized transaction to the network.\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "# Assuming `data` is a serialized transaction on the file-system.\ncurl \"https://cardano-mainnet.blockfrost.io/api/v0/tx/submit\" \\\n  -X POST \\\n  -H \"Content-Type: application/cbor\" \\\n  -H \"project_id: $PROJECT_ID\" \\\n  --data-binary @./data\n"
          },
          {
            "lang": "Shell",
            "label": "cardano-cli",
            "source": "# Assuming `tx.signed` is signed transaction constructed by cardano-cli\nxxd -r -p <<< $(jq .cborHex tx.signed) > tx.submit-api.raw\ncurl \"https://cardano-mainnet.blockfrost.io/api/v0/tx/submit\" \\\n  -X POST \\\n  -H \"Content-Type: application/cbor\" \\\n  -H \"project_id: $PROJECT_ID\" \\\n  --data-binary @./tx.submit-api.raw\n"
          }
        ],
        "requestBody": {
          "description": "The transaction to submit, serialized in CBOR.\n",
          "required": true,
          "content": {
            "application/cbor": {
              "schema": {
                "type": "string",
                "description": "The transaction to submit, serialized in CBOR.\n"
              },
              "example": "83a400818258208911f640d452c3be4ff3d89db63b41ce048c056951286e2e28bbf8a51588ab44000181825839009493315cd92eb5d8c4304e67b7e16ae36d61d34502694657811a2c8e32c728d3861e164cab28cb8f006448139c8f1740ffb8e7aa9e5232dc1a10b2531f021a00029519075820cb798b0bce50604eaf2e0dc89367896b18f0a6ef6b32b57e3c9f83f8ee71e608a1008182582073fea80d424276ad0978d4fe5310e8bc2d485f5f6bb3bf87612989f112ad5a7d5840c40425229749a9434763cf01b492057fd56d7091a6372eaa777a1c9b1ca508c914e6a4ee9c0d40fc10952ed668e9ad65378a28b149de6bd4204bd9f095b0a902a11907b0a1667469636b657281a266736f757263656b736f757263655f6e616d656576616c7565736675676961742076656e69616d206d696e7573\n"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the ID of the submitted transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "hex",
                  "minLength": 64,
                  "maxLength": 64,
                  "example": "d1662b24fa9fe985fc2dce47455df399cb2e31e1e1819339e885801cc3578908"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "425": {
            "$ref": "#/components/responses/425"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Specific account address",
        "description": "Obtain information about a specific stake account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/rewards": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Account reward history",
        "description": "Obtain information about the reward history of a specific account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_reward_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/history": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Account history",
        "description": "Obtain information about the history of a specific account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_history_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/delegations": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Account delegation history",
        "description": "Obtain information about the delegation of a specific account.",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account delegations content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_delegation_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/registrations": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Account registration history",
        "description": "Obtain information about the registrations and deregistrations of a specific account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account registration content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_registration_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/withdrawals": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Account withdrawal history",
        "description": "Obtain information about the withdrawals of a specific account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account withdrawal content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_withdrawal_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/mirs": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Account MIR history",
        "description": "Obtain information about the MIRs of a specific account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account MIR content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_mir_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/addresses": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Account associated addresses",
        "description": "Obtain information about the addresses of a specific account.\n<b>Be careful</b>, as an account could be part of a mangled address and does not necessarily mean the addresses are owned by user as the account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account addresses content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_addresses_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/addresses/assets": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Assets associated with the account addresses",
        "description": "Obtain information about assets associated with addresses of a specific account.\n<b>Be careful</b>, as an account could be part of a mangled address and does not necessarily mean the addresses are owned by user as the account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account addresses content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_addresses_assets"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/addresses/total": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Detailed information about account associated addresses",
        "description": "Obtain summed details about all addresses associated with a given account.\n<b>Be careful</b>, as an account could be part of a mangled address and does not necessarily mean the addresses are owned by user as the account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 address.",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the Address details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_addresses_total"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{stake_address}/utxos": {
      "get": {
        "tags": [
          "Cardano » Accounts"
        ],
        "summary": "Account UTXOs",
        "description": "UTXOs associated with the account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "stake_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 stake address.",
            "example": "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account UTXOs content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account_utxo_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mempool": {
      "get": {
        "tags": [
          "Cardano » Mempool"
        ],
        "summary": "Mempool",
        "description": "Return transactions that are currently stored in Blockfrost mempool,\nwaiting to be included in a newly minted block.\nShows only transactions submitted via Blockfrost.io.\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Ordered by the time of transaction submission.\nBy default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the mempool",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mempool_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mempool/{hash}": {
      "get": {
        "tags": [
          "Cardano » Mempool"
        ],
        "summary": "Specific transaction in the mempool",
        "description": "Return content of the requested transaction.\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "parameters": [
          {
            "in": "path",
            "name": "hash",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Hash of the requested transaction",
            "example": "6e5f825c42c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mempool_tx_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/mempool/addresses/{address}": {
      "get": {
        "tags": [
          "Cardano » Mempool"
        ],
        "summary": "Mempool by address",
        "description": "List of mempool transactions where at least one of the transaction inputs or outputs belongs to the address.\nShows only transactions submitted via Blockfrost.io.\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string",
              "format": "64-character case-sensitive hexadecimal string."
            },
            "description": "Bech32 address.",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "Ordered by the time of transaction submission.\nBy default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the contents of the mempool",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mempool_addresses_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/metadata/txs/labels": {
      "get": {
        "tags": [
          "Cardano » Metadata"
        ],
        "summary": "Transaction metadata labels",
        "description": "List of all used transaction metadata labels.\n",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account metadata content in CBOR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_metadata_labels"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/metadata/txs/labels/{label}": {
      "get": {
        "tags": [
          "Cardano » Metadata"
        ],
        "summary": "Transaction metadata content in JSON",
        "description": "Transaction metadata per label.",
        "parameters": [
          {
            "in": "path",
            "name": "label",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Metadata label",
            "example": "1990"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account metadata content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_metadata_label_json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/metadata/txs/labels/{label}/cbor": {
      "get": {
        "tags": [
          "Cardano » Metadata"
        ],
        "summary": "Transaction metadata content in CBOR",
        "description": "Transaction metadata per label.",
        "parameters": [
          {
            "in": "path",
            "name": "label",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Metadata label",
            "example": "1990"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the account metadata content in CBOR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tx_metadata_label_cbor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/addresses/{address}": {
      "get": {
        "tags": [
          "Cardano » Addresses"
        ],
        "summary": "Specific address",
        "description": "Obtain information about a specific address.",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 address.",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the address content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/addresses/{address}/extended": {
      "get": {
        "tags": [
          "Cardano » Addresses"
        ],
        "summary": "Extended information of a specific address",
        "description": "Obtain extended information about a specific address.\n",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 address.",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the address content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_content_extended"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/addresses/{address}/total": {
      "get": {
        "tags": [
          "Cardano » Addresses"
        ],
        "summary": "Address details",
        "description": "Obtain details about an address.",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 address.",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the Address details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_content_total"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/addresses/{address}/utxos": {
      "get": {
        "tags": [
          "Cardano » Addresses"
        ],
        "summary": "Address UTXOs",
        "description": "UTXOs of the address.",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 address.",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the address content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_utxo_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/addresses/{address}/utxos/{asset}": {
      "get": {
        "tags": [
          "Cardano » Addresses"
        ],
        "summary": "Address UTXOs of a given asset",
        "description": "UTXOs of the address.",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 address.",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          },
          {
            "in": "path",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Concatenation of the policy_id and hex-encoded asset_name",
            "example": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the address content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_utxo_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/addresses/{address}/txs": {
      "get": {
        "deprecated": true,
        "tags": [
          "Cardano » Addresses"
        ],
        "summary": "Address txs",
        "description": "Transactions on the address.",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 address.",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of transactions per page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the address content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_txs_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/addresses/{address}/transactions": {
      "get": {
        "tags": [
          "Cardano » Addresses"
        ],
        "summary": "Address transactions",
        "description": "Transactions on the address.",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 address.",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of addresses per page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          },
          {
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The block number and optionally also index from which (inclusive) to start search for results, concatenated using colon.\nHas to be lower than or equal to `to` parameter.\n",
            "example": "8929261"
          },
          {
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The block number and optionally also index where (inclusive) to end the search for results, concatenated using colon.\nHas to be higher than or equal to `from` parameter.\n",
            "example": "9999269:10"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the address content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address_transactions_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "List of stake pools",
        "description": "List of registered stake pools.",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of pools per page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the list of pools.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_list"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/extended": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "List of stake pools with additional information",
        "description": "List of registered stake pools with additional information.",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of pools per page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the list of pools.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_list_extended"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/retired": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "List of retired stake pools",
        "description": "List of already retired pools.",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of pools per page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool information content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_list_retire"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/retiring": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "List of retiring stake pools",
        "description": "List of stake pools retiring in the upcoming epochs",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool information content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_list_retire"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/{pool_id}": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "Specific stake pool",
        "description": "Pool information.",
        "parameters": [
          {
            "in": "path",
            "name": "pool_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal pool ID.",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool information content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/{pool_id}/history": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "Stake pool history",
        "description": "History of stake pool parameters over epochs.\n",
        "parameters": [
          {
            "in": "path",
            "name": "pool_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal pool ID.",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results"
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool information content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_history"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/{pool_id}/metadata": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "Stake pool metadata",
        "description": "Stake pool registration metadata.\n",
        "parameters": [
          {
            "in": "path",
            "name": "pool_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal pool ID.",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool metadata content.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/pool_metadata"
                    },
                    {
                      "$ref": "#/components/schemas/empty_object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/{pool_id}/relays": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "Stake pool relays",
        "description": "Relays of a stake pool.",
        "parameters": [
          {
            "in": "path",
            "name": "pool_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal pool ID.",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool relays information content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_relays"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/{pool_id}/delegators": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "Stake pool delegators",
        "description": "List of current stake pools delegators.",
        "parameters": [
          {
            "in": "path",
            "name": "pool_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal pool ID.",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool delegations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_delegators"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/{pool_id}/blocks": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "Stake pool blocks",
        "description": "List of stake pools blocks.",
        "parameters": [
          {
            "in": "path",
            "name": "pool_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal pool ID.",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool block list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_blocks"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/{pool_id}/updates": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "Stake pool updates",
        "description": "List of certificate updates to the stake pool.",
        "parameters": [
          {
            "in": "path",
            "name": "pool_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal pool ID.",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool updates history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_updates"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/pools/{pool_id}/votes": {
      "get": {
        "tags": [
          "Cardano » Pools"
        ],
        "summary": "Stake pool votes",
        "description": "History of stake pools votes.",
        "parameters": [
          {
            "in": "path",
            "name": "pool_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bech32 or hexadecimal pool ID.",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the pool votes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_votes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/assets": {
      "get": {
        "tags": [
          "Cardano » Assets"
        ],
        "summary": "Assets",
        "description": "List of assets. If an asset is completely burned,\nit will stay on the list with quantity 0 (order of assets is immutable).\n",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\nOrdering in this case is based on the time of the first mint transaction.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of assets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assets"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/assets/{asset}": {
      "get": {
        "tags": [
          "Cardano » Assets"
        ],
        "summary": "Specific asset",
        "description": "Information about a specific asset",
        "parameters": [
          {
            "in": "path",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Concatenation of the policy_id and hex-encoded asset_name",
            "example": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the information about a specific asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/assets/{asset}/history": {
      "get": {
        "tags": [
          "Cardano » Assets"
        ],
        "summary": "Asset history",
        "description": "History of a specific asset",
        "parameters": [
          {
            "in": "path",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Concatenation of the policy_id and hex-encoded asset_name",
            "example": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the information about the history of a specific asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset_history"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/assets/{asset}/txs": {
      "get": {
        "deprecated": true,
        "tags": [
          "Cardano » Assets"
        ],
        "summary": "Asset txs",
        "description": "List of a specific asset transactions",
        "parameters": [
          {
            "in": "path",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Concatenation of the policy_id and hex-encoded asset_name",
            "example": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the information about the history of a specific asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset_txs"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/assets/{asset}/transactions": {
      "get": {
        "tags": [
          "Cardano » Assets"
        ],
        "summary": "Asset transactions",
        "description": "List of a specific asset transactions",
        "parameters": [
          {
            "in": "path",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Concatenation of the policy_id and hex-encoded asset_name",
            "example": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the information about the history of a specific asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset_transactions"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/assets/{asset}/addresses": {
      "get": {
        "tags": [
          "Cardano » Assets"
        ],
        "summary": "Asset addresses",
        "description": "List of a addresses containing a specific asset",
        "parameters": [
          {
            "in": "path",
            "name": "asset",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Concatenation of the policy_id and hex-encoded asset_name",
            "example": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the information about the history of a specific asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset_addresses"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/assets/policy/{policy_id}": {
      "get": {
        "tags": [
          "Cardano » Assets"
        ],
        "summary": "Assets of a specific policy",
        "description": "List of asset minted under a specific policy",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Specific policy_id",
            "example": "476039a0949cf0b22f6a800f56780184c44533887ca6e821007840c3"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the information about a specific asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/asset_policy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/scripts": {
      "get": {
        "tags": [
          "Cardano » Scripts"
        ],
        "summary": "Scripts",
        "description": "List of scripts.",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of scripts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scripts"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/scripts/{script_hash}": {
      "get": {
        "tags": [
          "Cardano » Scripts"
        ],
        "summary": "Specific script",
        "description": "Information about a specific script",
        "parameters": [
          {
            "in": "path",
            "name": "script_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Hash of the script",
            "example": "e1457a0c47dfb7a2f6b8fbb059bdceab163c05d34f195b87b9f2b30e"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the information about a specific script",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/script"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/scripts/{script_hash}/json": {
      "get": {
        "tags": [
          "Cardano » Scripts"
        ],
        "summary": "Script JSON",
        "description": "JSON representation of a `timelock` script",
        "parameters": [
          {
            "in": "path",
            "name": "script_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Hash of the script",
            "example": "e1457a0c47dfb7a2f6b8fbb059bdceab163c05d34f195b87b9f2b30e"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the JSON representation of a `timelock` script",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/script_json"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/scripts/{script_hash}/cbor": {
      "get": {
        "tags": [
          "Cardano » Scripts"
        ],
        "summary": "Script CBOR",
        "description": "CBOR representation of a `plutus` script",
        "parameters": [
          {
            "in": "path",
            "name": "script_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Hash of the script",
            "example": "e1457a0c47dfb7a2f6b8fbb059bdceab163c05d34f195b87b9f2b30e"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the CBOR representation of a `plutus` script",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/script_cbor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/scripts/{script_hash}/redeemers": {
      "get": {
        "tags": [
          "Cardano » Scripts"
        ],
        "summary": "Redeemers of a specific script",
        "description": "List of redeemers of a specific script",
        "parameters": [
          {
            "in": "path",
            "name": "script_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Hash of the script",
            "example": "e1457a0c47dfb7a2f6b8fbb059bdceab163c05d34f195b87b9f2b30e"
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the information about redeemers of a specific script",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/script_redeemers"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/scripts/datum/{datum_hash}": {
      "get": {
        "tags": [
          "Cardano » Scripts"
        ],
        "summary": "Datum value",
        "description": "Query JSON value of a datum by its hash",
        "parameters": [
          {
            "in": "path",
            "name": "datum_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Hash of the datum",
            "example": "db583ad85881a96c73fbb26ab9e24d1120bb38f45385664bb9c797a2ea8d9a2d"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the datum value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/script_datum"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/scripts/datum/{datum_hash}/cbor": {
      "get": {
        "tags": [
          "Cardano » Scripts"
        ],
        "summary": "Datum CBOR value",
        "description": "Query CBOR serialised datum by its hash",
        "parameters": [
          {
            "in": "path",
            "name": "datum_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Hash of the datum",
            "example": "db583ad85881a96c73fbb26ab9e24d1120bb38f45385664bb9c797a2ea8d9a2d"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the CBOR serialised datum value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/script_datum_cbor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/utils/addresses/xpub/{xpub}/{role}/{index}": {
      "get": {
        "tags": [
          "Cardano » Utilities"
        ],
        "summary": "Derive an address",
        "description": "Derive Shelley address from an xpub",
        "parameters": [
          {
            "in": "path",
            "name": "xpub",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Hex xpub",
            "example": "d507c8f866691bd96e131334c355188b1a1d0b2fa0ab11545075aab332d77d9eb19657ad13ee581b56b0f8d744d66ca356b93d42fe176b3de007d53e9c4c4e7a"
          },
          {
            "in": "path",
            "name": "role",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Account role",
            "example": 0
          },
          {
            "in": "path",
            "name": "index",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Address index",
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Return derivated Shelley address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/utils_addresses_xpub"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/utils/txs/evaluate": {
      "post": {
        "tags": [
          "Cardano » Utilities"
        ],
        "summary": "Submit a transaction for execution units evaluation",
        "description": "Submit an already serialized transaction to evaluate how much execution units it requires.\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "parameters": [
          {
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "application/cbor"
              ]
            }
          },
          {
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "type": "number",
              "default": 5
            },
            "description": "Optional parameter to specify the version of the Ogmios service to use. Default is `5`. Set to `6` to use Ogmios version 6.\n"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "# Assuming `tx.data` is a CBOR serialized transaction on the file-system.\n# (encoded using base16 or base64)\ncurl \"https://cardano-mainnet.blockfrost.io/api/v0/utils/txs/evaluate\" \\\n  -X POST \\\n  -H \"Content-Type: application/cbor\" \\\n  -H \"project_id: $PROJECT_ID\" \\\n  --data @./tx.data\n"
          }
        ],
        "requestBody": {
          "description": "The transaction to submit, serialized in CBOR.\n",
          "required": true,
          "content": {
            "application/cbor": {
              "schema": {
                "type": "string",
                "description": "The transaction to submit, serialized in CBOR.\n"
              },
              "example": "83a400818258208911f640d452c3be4ff3d89db63b41ce048c056951286e2e28bbf8a51588ab44000181825839009493315cd92eb5d8c4304e67b7e16ae36d61d34502694657811a2c8e32c728d3861e164cab28cb8f006448139c8f1740ffb8e7aa9e5232dc1a10b2531f021a00029519075820cb798b0bce50604eaf2e0dc89367896b18f0a6ef6b32b57e3c9f83f8ee71e608a1008182582073fea80d424276ad0978d4fe5310e8bc2d485f5f6bb3bf87612989f112ad5a7d5840c40425229749a9434763cf01b492057fd56d7091a6372eaa777a1c9b1ca508c914e6a4ee9c0d40fc10952ed668e9ad65378a28b149de6bd4204bd9f095b0a902a11907b0a1667469636b657281a266736f757263656b736f757263655f6e616d656576616c7565736675676961742076656e69616d206d696e7573\n"
            }
          }
        },
        "responses": {
          "200": {
            "description": "<p>\n  <div class=\"custom-paragraph\">\n    Returns result of EvaluateTx function from Ogmios see <a class=\"custom-link\" href=\"https://ogmios.dev/mini-protocols/local-tx-submission/#evaluatetx\">EvaluateTx</a>\n    and<a href=\"https://ogmios.dev/http-api/\"> API reference (EvaluateTxResponse)</a> for related errors.\n  </div>\n</p>\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "425": {
            "$ref": "#/components/responses/425"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/utils/txs/evaluate/utxos": {
      "post": {
        "tags": [
          "Cardano » Utilities"
        ],
        "summary": "Submit a transaction for execution units evaluation (additional UTXO set)",
        "description": "Submit a JSON payload with transaction CBOR and additional UTXO set to evaluate how much execution units it requires.\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "parameters": [
          {
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "application/json"
              ]
            }
          },
          {
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "type": "number",
              "default": 5
            },
            "description": "Optional parameter to specify the version of the Ogmios service to use. Default is `5`. Set to `6` to use Ogmios version 6.\n"
          }
        ],
        "requestBody": {
          "description": "JSON payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cbor": {
                    "type": "string",
                    "description": "Transaction CBOR (encoded using base64 or base16)."
                  },
                  "additionalUtxoSet": {
                    "type": "array",
                    "description": "Additional UTXO as an array of tuples [TxIn, TxOut]. See https://ogmios.dev/mini-protocols/local-tx-submission/#additional-utxo-set.",
                    "items": {
                      "type": "array",
                      "minItems": 2,
                      "maxItems": 2,
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "description": "TxIn",
                            "properties": {
                              "txId": {
                                "type": "string",
                                "description": "Transaction hash for the input"
                              },
                              "index": {
                                "type": "number",
                                "description": "Index of the output within the transaction"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "TxOut",
                            "properties": {
                              "address": {
                                "type": "string",
                                "description": "Output address"
                              },
                              "value": {
                                "type": "object",
                                "properties": {
                                  "coins": {
                                    "type": "number",
                                    "description": "Lovelace amount"
                                  },
                                  "assets": {
                                    "type": "object",
                                    "description": "Assets amount",
                                    "additionalProperties": {
                                      "type": "number"
                                    }
                                  }
                                },
                                "required": [
                                  "coins"
                                ]
                              },
                              "datum_hash": {
                                "type": "string"
                              },
                              "datum": {
                                "type": "object",
                                "additionalProperties": true
                              },
                              "script": {
                                "type": "object",
                                "additionalProperties": true
                              }
                            },
                            "required": [
                              "address",
                              "value"
                            ]
                          }
                        ]
                      }
                    }
                  }
                },
                "required": [
                  "cbor"
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "# Assuming TxCbor is a CBOR serialized transaction encoded using base16 or base64\n# For a structure of additional UTXO set see https://ogmios.dev/mini-protocols/local-tx-submission/#additional-utxo-set\ncurl \"https://cardano-mainnet.blockfrost.io/api/v0/utils/txs/evaluate/utxos\" \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"project_id: $PROJECT_ID\" \\\n  -d '{\"cbor\":\"<TxCbor>\",\"additionalUtxoSet\":[[<TxIn>, <TxOut>]]}'\n"
          }
        ],
        "responses": {
          "200": {
            "description": "<p>\n  <div class=\"custom-paragraph\">\n    Returns result of EvaluateTx function from Ogmios see <a class=\"custom-link\" href=\"https://ogmios.dev/mini-protocols/local-tx-submission/#evaluatetx\">EvaluateTx</a>\n    and<a href=\"https://ogmios.dev/api/\"> API reference (EvaluateTxResponse)</a> for related errors.\n  </div>\n</p>\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "425": {
            "$ref": "#/components/responses/425"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ipfs/add": {
      "servers": [
        {
          "url": "https://ipfs.blockfrost.io/api/v0"
        }
      ],
      "post": {
        "tags": [
          "IPFS » Add"
        ],
        "summary": "Add a file to IPFS",
        "operationId": "ipfs_add",
        "description": "You need to `/ipfs/pin/add` an object to avoid it being garbage collected. This usage\nis being counted in your user account quota.\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "curl \"https://ipfs.blockfrost.io/api/v0/ipfs/add\" \\\n  -X POST \\\n  -H \"project_id: $PROJECT_ID\" \\\n  -F \"file=@./README.md\"\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information about added IPFS object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "README.md",
                      "description": "Name of the file"
                    },
                    "ipfs_hash": {
                      "type": "string",
                      "example": "QmZbHqiCxKEVX7QfijzJTkZiSi3WEVTcvANgNAWzDYgZDr",
                      "description": "IPFS hash of the file"
                    },
                    "size": {
                      "type": "string",
                      "example": "125297",
                      "description": "IPFS node size in Bytes"
                    }
                  },
                  "required": [
                    "name",
                    "ipfs_hash",
                    "size"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ipfs/gateway/{IPFS_path}": {
      "servers": [
        {
          "url": "https://ipfs.blockfrost.io/api/v0"
        }
      ],
      "get": {
        "tags": [
          "IPFS » Gateway"
        ],
        "summary": "Relay to an IPFS gateway",
        "description": "Retrieve an object from the IPFS gateway (useful if you do not want to rely on a public gateway, such as `ipfs.blockfrost.dev`).\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "curl \"https://ipfs.blockfrost.io/api/v0/ipfs/gateway/{IPFS_path}\" \\\n  -H \"project_id: $PROJECT_ID\" \\\n"
          }
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "IPFS_path",
            "schema": {
              "type": "string",
              "description": "Path to the IPFS object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the object content",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ipfs/pin/add/{IPFS_path}": {
      "servers": [
        {
          "url": "https://ipfs.blockfrost.io/api/v0"
        }
      ],
      "post": {
        "tags": [
          "IPFS » Pins"
        ],
        "summary": "Pin an object",
        "description": "Pinning is necessary to avoid regular garbage collection (deletion) of IPFS objects. Non-pinned objects are regularly being removed without prior notice. Pinned objects are counted in your user storage quota.\n\n**Note:** If the object was pinned to Filecoin (using `filecoin=true`), it cannot be removed or unpinned due to Filecoin's immutable and persistent storage guarantees. Please ensure careful consideration when pinning objects to Filecoin, as the action is irreversible.\n",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "IPFS_path",
            "schema": {
              "type": "string",
              "description": "Path to the IPFS object"
            }
          },
          {
            "in": "query",
            "name": "filecoin",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "If set to true, the object will be pinned to Filecoin as well. If not specified, the object will only be pinned to IPFS. Objects pinned to Filecoin cannot be unpinned due to its long-term storage guarantees.\n"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "curl \"https://ipfs.blockfrost.io/api/v0/ipfs/pin/add/{IPFS_path}\" \\\n  -H \"project_id: $PROJECT_ID\" \\\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns pinned object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ipfs_hash": {
                      "type": "string",
                      "example": "QmPojRfAXYAXV92Dof7gtSgaVuxEk64xx9CKvprqu9VwA8",
                      "description": "IPFS hash of the pinned object"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "queued",
                        "pinned",
                        "unpinned",
                        "failed",
                        "gc"
                      ],
                      "example": "queued",
                      "description": "State of the pin action"
                    },
                    "filecoin": {
                      "type": "boolean",
                      "description": "Whether filecoin was used to pin the resource."
                    }
                  },
                  "required": [
                    "ipfs_hash",
                    "state",
                    "filecoin"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "425": {
            "$ref": "#/components/responses/425-2"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ipfs/pin/list": {
      "servers": [
        {
          "url": "https://ipfs.blockfrost.io/api/v0"
        }
      ],
      "get": {
        "tags": [
          "IPFS » Pins"
        ],
        "summary": "List pinned objects",
        "description": "List objects pinned to local storage\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "curl \"https://ipfs.blockfrost.io/api/v0/ipfs/pin/list/\" \\\n  -H \"project_id: $PROJECT_ID\" \\\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns pinned objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "time_created": {
                        "type": "integer",
                        "description": "Creation time of the IPFS object on our backends",
                        "example": 1615551024
                      },
                      "time_pinned": {
                        "type": "integer",
                        "description": "Pin time of the IPFS object on our backends",
                        "example": 1615551024
                      },
                      "ipfs_hash": {
                        "type": "string",
                        "description": "IPFS hash of the pinned object",
                        "example": "QmdVMnULrY95mth2XkwjxDtMHvzuzmvUPTotKE1tgqKbCx"
                      },
                      "size": {
                        "type": "string",
                        "description": "Size of the object in Bytes",
                        "example": "1615551024"
                      },
                      "state": {
                        "type": "string",
                        "enum": [
                          "queued",
                          "pinned",
                          "unpinned",
                          "failed",
                          "gc"
                        ],
                        "description": "State of the pinned object, which is `queued` when we are retriving object. If this\nis successful the state is changed to `pinned` or `failed` if not. The state `gc` means the\npinned item has been garbage collected due to account being over storage quota or after it has\nbeen moved to `unpinned` state by removing the object pin.\n",
                        "example": "pinned"
                      },
                      "filecoin": {
                        "type": "boolean",
                        "description": "Whether filecoin was used to pin the resource."
                      }
                    },
                    "required": [
                      "time_created",
                      "time_pinned",
                      "ipfs_hash",
                      "size",
                      "state",
                      "filecoin"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ipfs/pin/list/{IPFS_path}": {
      "servers": [
        {
          "url": "https://ipfs.blockfrost.io/api/v0"
        }
      ],
      "get": {
        "tags": [
          "IPFS » Pins"
        ],
        "summary": "Get details about pinned object",
        "description": "Get information about locally pinned IPFS object\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "IPFS_path",
            "schema": {
              "type": "string",
              "description": "The path to the IPFS object"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "curl \"https://ipfs.blockfrost.io/api/v0/ipfs/pin/list/{IPFS_PATH}\" \\\n  -H \"project_id: $PROJECT_ID\" \\\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the pins pinned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "time_created": {
                      "type": "integer",
                      "description": "Time of the creation of the IPFS object on our backends",
                      "example": 1615551024
                    },
                    "time_pinned": {
                      "type": "integer",
                      "description": "Time of the pin of the IPFS object on our backends",
                      "example": 1615551024
                    },
                    "ipfs_hash": {
                      "type": "string",
                      "description": "IPFS hash of the pinned object",
                      "example": "QmdVMnULrY95mth2XkwjxDtMHvzuzmvUPTotKE1tgqKbCx"
                    },
                    "size": {
                      "type": "string",
                      "description": "Size of the object in Bytes",
                      "example": "1615551024"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "queued",
                        "pinned",
                        "unpinned",
                        "failed",
                        "gc"
                      ],
                      "description": "State of the pinned object. We define 5 states: `queued`, `pinned`, `unpinned`, `failed`, `gc`.\nWhen the object is pending retrieval (i.e. after `/ipfs/pin/add/{IPFS_path}`), the state is `queued`.\nIf the object is already successfully retrieved, state is changed to `pinned` or `failed` otherwise.\nWhen object is unpinned (i.e. after `/ipfs/pin/remove/{IPFS_path}`) it is marked for garbage collection.\nState `gc` means that a previously `unpinned` item has been garbage collected due to account being over storage quota.\n",
                      "example": "pinned"
                    },
                    "filecoin": {
                      "type": "boolean",
                      "description": "Whether filecoin was used to pin the resource."
                    }
                  },
                  "required": [
                    "time_created",
                    "time_pinned",
                    "ipfs_hash",
                    "size",
                    "state",
                    "filecoin"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ipfs/pin/remove/{IPFS_path}": {
      "servers": [
        {
          "url": "https://ipfs.blockfrost.io/api/v0"
        }
      ],
      "post": {
        "tags": [
          "IPFS » Pins"
        ],
        "summary": "Remove a IPFS pin",
        "description": "Remove pinned objects from local storage\n\n<p>\n  <span class=\"hosted\">Hosted</span> Endpoint only available for hosted variant.\n</p>\n\n**Note:** If the object was pinned to Filecoin (using `filecoin=true`), it cannot be removed or unpinned due to Filecoin's immutable and persistent storage guarantees. Please ensure careful consideration when pinning objects to Filecoin, as the action is irreversible.\n",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "IPFS_path",
            "schema": {
              "type": "string",
              "description": "The path to the IPFS object"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "curl \"https://ipfs.blockfrost.io/api/v0/ipfs/pin/remove/{IPFS_PATH}\" \\\n  -X POST \\\n  -H \"project_id: $PROJECT_ID\" \\\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the pins removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ipfs_hash": {
                      "type": "string",
                      "example": "QmPojRfAXYAXV92Dof7gtSgaVuxEk64xx9CKvprqu9VwA8",
                      "description": "IPFS hash of the pinned object"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "queued",
                        "pinned",
                        "unpinned",
                        "failed",
                        "gc"
                      ],
                      "example": "unpinned",
                      "description": "State of the pin action"
                    }
                  },
                  "required": [
                    "ipfs_hash",
                    "state"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Blockfrost usage metrics",
        "description": "History of your Blockfrost usage metrics in the past 30 days.",
        "responses": {
          "200": {
            "description": "Return the last 30 days of metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metrics"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/metrics/endpoints": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Blockfrost endpoint usage metrics",
        "description": "History of your Blockfrost usage metrics per endpoint in the past 30 days.\n",
        "responses": {
          "200": {
            "description": "Return the last 30 days of metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metrics_endpoints"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/network": {
      "get": {
        "tags": [
          "Cardano » Network"
        ],
        "summary": "Network information",
        "description": "Return detailed network information.",
        "responses": {
          "200": {
            "description": "Return detailed network information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/network"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/network/eras": {
      "get": {
        "tags": [
          "Cardano » Network"
        ],
        "summary": "Query summary of blockchain eras",
        "description": "Returns start and end of each era along with\nparameters that can vary between hard forks.\n",
        "responses": {
          "200": {
            "description": "Returns era summaries content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/network-eras"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "425": {
            "$ref": "#/components/responses/425"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/nutlink/{address}": {
      "get": {
        "tags": [
          "Nut.link"
        ],
        "summary": "Specific nut.link address",
        "description": "List metadata about specific address",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Address of a metadata oracle"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the metadata about metadata oracle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nutlink_address"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/nutlink/{address}/tickers": {
      "get": {
        "tags": [
          "Nut.link"
        ],
        "summary": "List of tickers of an oracle",
        "description": "List of records of a specific oracle",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Address of a metadata oracle"
            }
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the tickers provided by the metadata oracle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nutlink_address_tickers"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/nutlink/{address}/tickers/{ticker}": {
      "get": {
        "tags": [
          "Nut.link"
        ],
        "summary": "Specific ticker for an address",
        "description": "List of records of a specific ticker",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Address of a metadata oracle"
            }
          },
          {
            "in": "path",
            "required": true,
            "name": "ticker",
            "schema": {
              "type": "string",
              "description": "Ticker for the pool record"
            }
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the tickers provided by the metadata oracle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nutlink_address_ticker"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/nutlink/tickers/{ticker}": {
      "get": {
        "tags": [
          "Nut.link"
        ],
        "summary": "Specific ticker",
        "description": "List of records of a specific ticker",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "ticker",
            "schema": {
              "type": "string",
              "description": "Ticker for the pool record"
            }
          },
          {
            "in": "query",
            "name": "count",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100
            },
            "description": "The number of results displayed on one page."
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 21474836,
              "default": 1
            },
            "description": "The page number for listing the results."
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "description": "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the tickers provided by the metadata oracle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nutlink_tickers_ticker"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "418": {
            "$ref": "#/components/responses/418"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "onchain_metadata_cip25": {
        "$ref": "#/components/schemas/asset_onchain_metadata_cip25"
      },
      "onchain_metadata_cip68_ft_333": {
        "$ref": "#/components/schemas/asset_onchain_metadata_cip68_ft_333"
      },
      "onchain_metadata_cip68_nft_222": {
        "$ref": "#/components/schemas/asset_onchain_metadata_cip68_nft_222"
      },
      "onchain_metadata_cip68_rft_444": {
        "$ref": "#/components/schemas/asset_onchain_metadata_cip68_rft_444"
      },
      "block_content": {
        "type": "object",
        "properties": {
          "time": {
            "type": "integer",
            "example": 1641338934,
            "description": "Block creation time in UNIX time"
          },
          "height": {
            "type": "integer",
            "nullable": true,
            "example": 15243593,
            "description": "Block number"
          },
          "hash": {
            "type": "string",
            "example": "4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a",
            "description": "Hash of the block"
          },
          "slot": {
            "type": "integer",
            "nullable": true,
            "example": 412162133,
            "description": "Slot number"
          },
          "epoch": {
            "type": "integer",
            "nullable": true,
            "example": 425,
            "description": "Epoch number"
          },
          "epoch_slot": {
            "type": "integer",
            "nullable": true,
            "example": 12,
            "description": "Slot within the epoch"
          },
          "slot_leader": {
            "type": "string",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2qnikdy",
            "description": "Bech32 ID of the slot leader or specific block description in case there is no slot leader"
          },
          "size": {
            "type": "integer",
            "example": 3,
            "description": "Block size in Bytes"
          },
          "tx_count": {
            "type": "integer",
            "example": 1,
            "description": "Number of transactions in the block"
          },
          "output": {
            "type": "string",
            "nullable": true,
            "example": "128314491794",
            "description": "Total output within the block in Lovelaces"
          },
          "fees": {
            "type": "string",
            "nullable": true,
            "example": "592661",
            "description": "Total fees within the block in Lovelaces"
          },
          "block_vrf": {
            "type": "string",
            "nullable": true,
            "example": "vrf_vk1wf2k6lhujezqcfe00l6zetxpnmh9n6mwhpmhm0dvfh3fxgmdnrfqkms8ty",
            "description": "VRF key of the block",
            "minLength": 65,
            "maxLength": 65
          },
          "op_cert": {
            "type": "string",
            "nullable": true,
            "example": "da905277534faf75dae41732650568af545134ee08a3c0392dbefc8096ae177c",
            "description": "The hash of the operational certificate of the block producer"
          },
          "op_cert_counter": {
            "type": "string",
            "nullable": true,
            "example": "18",
            "description": "The value of the counter used to produce the operational certificate"
          },
          "previous_block": {
            "type": "string",
            "nullable": true,
            "example": "43ebccb3ac72c7cebd0d9b755a4b08412c9f5dcb81b8a0ad1e3c197d29d47b05",
            "description": "Hash of the previous block"
          },
          "next_block": {
            "type": "string",
            "nullable": true,
            "example": "8367f026cf4b03e116ff8ee5daf149b55ba5a6ec6dec04803b8dc317721d15fa",
            "description": "Hash of the next block"
          },
          "confirmations": {
            "type": "integer",
            "example": 4698,
            "description": "Number of block confirmations"
          }
        },
        "required": [
          "time",
          "height",
          "hash",
          "slot",
          "epoch",
          "epoch_slot",
          "slot_leader",
          "size",
          "tx_count",
          "output",
          "fees",
          "block_vrf",
          "op_cert",
          "op_cert_counter",
          "previous_block",
          "next_block",
          "confirmations"
        ]
      },
      "block_content_txs": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Hash of the transaction"
        },
        "example": [
          "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
          "4eef6bb7755d8afbeac526b799f3e32a624691d166657e9d862aaeb66682c036",
          "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
          "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b"
        ]
      },
      "block_content_txs_cbor": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction"
            },
            "cbor": {
              "type": "string",
              "description": "CBOR representation of the transaction data"
            }
          },
          "required": [
            "tx_hash",
            "cbor"
          ]
        },
        "example": [
          {
            "tx_hash": "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
            "cbor": "a10081825820cccfe2be401c85342497f6e1e4a241629790b0fb7f2af5f18441779d11f25b1f5840c38a93d63faac9335ecc2f24ead7ca2d46a6637f354ee707bb06eb8192af2fa6a676fb72f8772cd1c42b491ec6dfc798c76b61c55dc4eecab362e71ffab26305"
          },
          {
            "tx_hash": "4eef6bb7755d8afbeac526b799f3e32a624691d166657e9d862aaeb66682c036",
            "cbor": "bb06eb8192af2fa6a676fb72f8772cd1c42b491ec6dfc798c76b61c55dc4eecab362e71ffab26305"
          }
        ]
      },
      "block_content_array": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/block_content"
        }
      },
      "block_content_addresses": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Address that was affected in the specified block"
            },
            "transactions": {
              "type": "array",
              "description": "List of transactions containing the address either in their inputs or outputs. Sorted by transaction index within a block, ascending.",
              "items": {
                "type": "object",
                "properties": {
                  "tx_hash": {
                    "type": "string"
                  }
                },
                "required": [
                  "tx_hash"
                ]
              }
            }
          },
          "required": [
            "address",
            "transactions"
          ]
        },
        "example": [
          {
            "address": "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv",
            "transactions": [
              {
                "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"
              }
            ]
          },
          {
            "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
            "transactions": [
              {
                "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157d0"
              }
            ]
          }
        ]
      },
      "genesis_content": {
        "type": "object",
        "properties": {
          "active_slots_coefficient": {
            "type": "number",
            "example": 0.05,
            "description": "The proportion of slots in which blocks should be issued"
          },
          "update_quorum": {
            "type": "integer",
            "example": 5,
            "description": "Determines the quorum needed for votes on the protocol parameter updates"
          },
          "max_lovelace_supply": {
            "type": "string",
            "example": "45000000000000000",
            "description": "The total number of lovelace in the system"
          },
          "network_magic": {
            "type": "integer",
            "example": 764824073,
            "description": "Network identifier"
          },
          "epoch_length": {
            "type": "integer",
            "example": 432000,
            "description": "Number of slots in an epoch"
          },
          "system_start": {
            "type": "integer",
            "example": 1506203091,
            "description": "Time of slot 0 in UNIX time"
          },
          "slots_per_kes_period": {
            "type": "integer",
            "example": 129600,
            "description": "Number of slots in an KES period"
          },
          "slot_length": {
            "type": "integer",
            "example": 1,
            "description": "Duration of one slot in seconds"
          },
          "max_kes_evolutions": {
            "type": "integer",
            "example": 62,
            "description": "The maximum number of time a KES key can be evolved before a pool operator must create a new operational certificate"
          },
          "security_param": {
            "type": "integer",
            "example": 2160,
            "description": "Security parameter k"
          }
        },
        "required": [
          "active_slots_coefficient",
          "update_quorum",
          "max_lovelace_supply",
          "network_magic",
          "epoch_length",
          "system_start",
          "slots_per_kes_period",
          "slot_length",
          "max_kes_evolutions",
          "security_param"
        ]
      },
      "dreps": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "drep_id": {
              "type": "string",
              "description": "The Bech32 encoded DRep address"
            },
            "hex": {
              "type": "string",
              "description": "The raw bytes of the DRep"
            }
          },
          "required": [
            "drep_id",
            "hex"
          ]
        },
        "example": [
          {
            "drep_id": "drep1mvdu8slennngja7w4un6knwezufra70887zuxpprd64jxfveahn",
            "hex": "db1bc3c3f99ce68977ceaf27ab4dd917123ef9e73f85c304236eab23"
          },
          {
            "drep_id": "drep1cxayn4fgy27yaucvhamsvqj3v6835mh3tjjx6x8hdnr4",
            "hex": "c1ba49d52822bc4ef30cbf77060251668f1a6ef15ca46d18f76cc758"
          }
        ]
      },
      "drep": {
        "type": "object",
        "properties": {
          "drep_id": {
            "type": "string",
            "description": "Bech32 encoded DRep address"
          },
          "hex": {
            "type": "string",
            "description": "The raw bytes of the DRep"
          },
          "amount": {
            "type": "string",
            "description": "The total amount of voting power this DRep is delegated."
          },
          "active": {
            "type": "boolean",
            "description": "Registration state of the DRep",
            "deprecated": true
          },
          "active_epoch": {
            "type": "integer",
            "nullable": true,
            "description": "Epoch of the most recent registration",
            "deprecated": true
          },
          "has_script": {
            "type": "boolean",
            "description": "Flag which shows if this DRep credentials are a script hash"
          },
          "retired": {
            "type": "boolean",
            "description": "Indicates the registration state of the DRep. Set to `true` if the DRep has been deregistered; otherwise, `false`."
          },
          "expired": {
            "type": "boolean",
            "description": "Indicates whether the DRep has been inactive for a consecutive number of epochs (determined by a epoch parameter `drep_activity`)"
          },
          "last_active_epoch": {
            "type": "integer",
            "nullable": true,
            "description": "Epoch of the most recent action - registration, update, deregistration or voting"
          }
        },
        "required": [
          "drep_id",
          "hex",
          "amount",
          "active",
          "active_epoch",
          "has_script",
          "retired",
          "expired",
          "last_active_epoch"
        ],
        "example": {
          "drep_id": "drep15cfxz9exyn5rx0807zvxfrvslrjqfchrd4d47kv9e0f46uedqtc",
          "hex": "a61261172624e8333ceff098648d90f8e404e2e36d5b5f5985cbd35d",
          "amount": "2000000",
          "active": true,
          "active_epoch": 420,
          "has_script": true,
          "last_active_epoch": 509,
          "retired": false,
          "expired": false
        }
      },
      "drep_delegators": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Bech32 encoded stake addresses"
            },
            "amount": {
              "type": "string",
              "description": "Currently delegated amount"
            }
          },
          "required": [
            "address",
            "amount"
          ]
        },
        "example": [
          {
            "address": "stake1ux4vspfvwuus9uwyp5p3f0ky7a30jq5j80jxse0fr7pa56sgn8kha",
            "amount": "1137959159981411"
          },
          {
            "address": "stake1uylayej7esmarzd4mk4aru37zh9yz0luj3g9fsvgpfaxulq564r5u",
            "amount": "16958865648"
          },
          {
            "address": "stake1u8lr2pnrgf8f7vrs9lt79hc3sxm8s2w4rwvgpncks3axx6q93d4ck",
            "amount": "18605647"
          }
        ]
      },
      "drep_metadata": {
        "type": "object",
        "properties": {
          "drep_id": {
            "type": "string",
            "description": "Bech32 encoded addresses"
          },
          "hex": {
            "type": "string",
            "description": "The raw bytes of the DRep"
          },
          "url": {
            "type": "string",
            "example": "https://stakenuts.com/drep.json",
            "description": "URL to the drep metadata"
          },
          "hash": {
            "type": "string",
            "example": "69c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c\"",
            "description": "Hash of the metadata file"
          },
          "json_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Content of the JSON metadata (validated CIP-119)"
          },
          "bytes": {
            "type": "string",
            "description": "Content of the metadata (raw)"
          }
        },
        "required": [
          "drep_id",
          "hex",
          "url",
          "hash",
          "json_metadata",
          "bytes"
        ],
        "example": {
          "drep_id": "drep15cfxz9exyn5rx0807zvxfrvslrjqfchrd4d47kv9e0f46uedqtc",
          "hex": "a61261172624e8333ceff098648d90f8e404e2e36d5b5f5985cbd35d",
          "url": "https://aaa.xyz/drep.json",
          "hash": "a14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de",
          "json_metadata": {
            "@context": {
              "CIP100": "https://github.com/cardano-foundation/CIPs/blob/master/CIP-0100/README.md#",
              "CIP119": "https://github.com/cardano-foundation/CIPs/blob/master/CIP-0119/README.md#",
              "hashAlgorithm": "CIP100:hashAlgorithm",
              "body": {
                "@id": "CIP119:body",
                "@context": {
                  "references": {
                    "@id": "CIP119:references",
                    "@container": "@set",
                    "@context": {
                      "GovernanceMetadata": "CIP100:GovernanceMetadataReference",
                      "Other": "CIP100:OtherReference",
                      "label": "CIP100:reference-label",
                      "uri": "CIP100:reference-uri"
                    }
                  },
                  "paymentAddress": "CIP119:paymentAddress",
                  "givenName": "CIP119:givenName",
                  "image": {
                    "@id": "CIP119:image",
                    "@context": {
                      "ImageObject": "https://schema.org/ImageObject"
                    }
                  },
                  "objectives": "CIP119:objectives",
                  "motivations": "CIP119:motivations",
                  "qualifications": "CIP119:qualifications"
                }
              }
            },
            "hashAlgorithm": "blake2b-256",
            "body": {
              "paymentAddress": "addr1q86dnpkva4mm859c8ur7tjxn57zgsu6vg8pdetkdve3fsacnq7twy06u2ev5759vutpjgzfryx0ud8hzedhzerava35qwh3x34",
              "givenName": "Ryan Williams",
              "image": {
                "@type": "ImageObject",
                "contentUrl": "https://avatars.githubusercontent.com/u/44342099?v=4",
                "sha256": "2a21e4f7b20c8c72f573707b068fb8fc6d8c64d5035c4e18ecae287947fe2b2e"
              },
              "objectives": "Buy myself an island.",
              "motivations": "I really would like to own an island.",
              "qualifications": "I have my 100m swimming badge, so I would be qualified to be able to swim around island.",
              "references": [
                {
                  "@type": "Other",
                  "label": "A cool island for Ryan",
                  "uri": "https://www.google.com/maps/place/World's+only+5th+order+recursive+island/@62.6511465,-97.7946829,15.75z/data=!4m14!1m7!3m6!1s0x5216a167810cee39:0x11431abdfe4c7421!2sWorld's+only+5th+order+recursive+island!8m2!3d62.651114!4d-97.7872244!16s%2Fg%2F11spwk2b6n!3m5!1s0x5216a167810cee39:0x11431abdfe4c7421!8m2!3d62.651114!4d-97.7872244!16s%2Fg%2F11spwk2b6n?authuser=0&entry=ttu"
                },
                {
                  "@type": "Link",
                  "label": "Ryan's Twitter",
                  "uri": "https://twitter.com/Ryun1_"
                }
              ]
            }
          },
          "bytes": "\\x7b0a20202240636f6e74657874223a207b0a2020202022406c616e6775616765223a2022656e2d7573222c0a2020202022434950313030223a202268747470733a2f2f6769746875622e636f6d2f63617264616e6f2d666f756e646174696f6e2f434950732f626c6f622f6d61737465722f4349502d303130302f524541444d452e6"
        }
      },
      "drep_updates": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Transaction ID"
            },
            "cert_index": {
              "type": "integer",
              "description": "Index of the certificate within the update transaction."
            },
            "action": {
              "type": "string",
              "enum": [
                "registered",
                "deregistered"
              ],
              "description": "Action in the certificate"
            }
          },
          "required": [
            "tx_hash",
            "cert_index",
            "action"
          ]
        },
        "example": [
          {
            "tx_hash": "f4097fbdb87ab7c7ab44b30d4e2b81713a058488975d1ab8b05c381dd946a393",
            "cert_index": 0,
            "action": "registered"
          },
          {
            "tx_hash": "dd3243af975be4b5bedce4e5f5b483b2386d5ad207d05e0289c1df0eb261447e",
            "cert_index": 0,
            "action": "deregistered"
          }
        ]
      },
      "drep_votes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the proposal transaction."
            },
            "cert_index": {
              "type": "integer",
              "description": "Index of the certificate within the proposal transaction."
            },
            "vote": {
              "type": "string",
              "enum": [
                "yes",
                "no",
                "abstain"
              ],
              "description": "The Vote. Can be one of yes, no, abstain."
            }
          },
          "required": [
            "tx_hash",
            "cert_index",
            "vote"
          ]
        },
        "example": [
          {
            "tx_hash": "b302de601defdf11a5261ed31a263804dac4a582a888c998ce24dec5",
            "cert_index": 2,
            "vote": "yes"
          },
          {
            "tx_hash": "b302de601defdf11a5261ed31a263804dac4a582a888c998ce24dec5",
            "cert_index": 3,
            "vote": "abstain"
          }
        ]
      },
      "proposals": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the proposal transaction."
            },
            "cert_index": {
              "type": "integer",
              "description": "Index of the certificate within the proposal transaction."
            },
            "governance_type": {
              "type": "string",
              "enum": [
                "hard_fork_initiation",
                "new_committee",
                "new_constitution",
                "info_action",
                "no_confidence",
                "parameter_change",
                "treasury_withdrawals"
              ],
              "description": "Type of proposal."
            }
          },
          "required": [
            "tx_hash",
            "cert_index",
            "governance_type"
          ]
        },
        "example": [
          {
            "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
            "cert_index": 1,
            "governance_type": "treasury_withdrawals"
          },
          {
            "tx_hash": "71317e951b20aa46e9fbf45a46a6e950d5723a481225519655bf6c60",
            "cert_index": 4,
            "governance_type": "no_confidence"
          }
        ]
      },
      "proposal": {
        "type": "object",
        "properties": {
          "tx_hash": {
            "type": "string",
            "description": "Hash of the proposal transaction."
          },
          "cert_index": {
            "type": "integer",
            "description": "Index of the certificate within the proposal transaction."
          },
          "governance_type": {
            "type": "string",
            "enum": [
              "hard_fork_initiation",
              "new_committee",
              "new_constitution",
              "info_action",
              "no_confidence",
              "parameter_change",
              "treasury_withdrawals"
            ],
            "description": "Type of proposal."
          },
          "governance_description": {
            "additionalProperties": true,
            "type": "object",
            "nullable": true,
            "description": "An object describing the content of this GovActionProposal in a readable way."
          },
          "deposit": {
            "type": "string",
            "description": "The deposit amount paid for this proposal."
          },
          "return_address": {
            "type": "string",
            "description": "Bech32 stake address of the reward address to receive the deposit when it is repaid."
          },
          "ratified_epoch": {
            "type": "integer",
            "nullable": true,
            "description": "The epoch at which the proposal was ratified. Null if the proposal has not been ratified."
          },
          "enacted_epoch": {
            "type": "integer",
            "nullable": true,
            "description": "The epoch at which the proposal was enacted. Null if the proposal has not been enacted."
          },
          "dropped_epoch": {
            "type": "integer",
            "nullable": true,
            "description": "The epoch at which the proposal was dropped. A proposal is dropped if it expires, is enacted, or if any of its dependencies expire."
          },
          "expired_epoch": {
            "type": "integer",
            "nullable": true,
            "description": "The epoch at which the proposal expired. Null if the proposal has not expired."
          },
          "expiration": {
            "type": "integer",
            "description": "The epoch at which this governance action will expire."
          }
        },
        "required": [
          "tx_hash",
          "cert_index",
          "governance_type",
          "deposit",
          "return_address",
          "governance_description",
          "ratified_epoch",
          "enacted_epoch",
          "dropped_epoch",
          "expired_epoch",
          "expiration"
        ],
        "example": {
          "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
          "cert_index": 1,
          "governance_type": "treasury_withdrawals",
          "deposit": 12000,
          "return_address": "stake_test1urd3hs7rlxwwdzthe6hj026dmyt3y0heuulctscyydh2kgck6nkmz",
          "governance_description": "TreasuryWithdrawals (fromList [(RewardAcnt {getRwdNetwork = Testnet, getRwdCred = KeyHashObj (KeyHash \"71317e951b20aa46e9fbf45a46a6e950d5723a481225519655bf6c60\")},Coin 20000000)])",
          "ratified_epoch": null,
          "enacted_epoch": 123,
          "dropped_epoch": null,
          "expired_epoch": null,
          "expiration": 120
        }
      },
      "proposal_parameters": {
        "type": "object",
        "properties": {
          "tx_hash": {
            "type": "string",
            "description": "Off-chain metadata of a proposal with a specific transaction hash"
          },
          "cert_index": {
            "type": "integer",
            "description": "Off-chain metadata of a proposal with a specific transaction cert_index"
          },
          "parameters": {
            "type": "object",
            "properties": {
              "epoch": {
                "type": "integer",
                "example": 225,
                "description": "Epoch number",
                "nullable": true
              },
              "min_fee_a": {
                "type": "integer",
                "example": 44,
                "description": "The linear factor for the minimum fee calculation for given epoch",
                "nullable": true
              },
              "min_fee_b": {
                "type": "integer",
                "example": 155381,
                "description": "The constant factor for the minimum fee calculation",
                "nullable": true
              },
              "max_block_size": {
                "type": "integer",
                "example": 65536,
                "description": "Maximum block body size in Bytes",
                "nullable": true
              },
              "max_tx_size": {
                "type": "integer",
                "example": 16384,
                "description": "Maximum transaction size",
                "nullable": true
              },
              "max_block_header_size": {
                "type": "integer",
                "example": 1100,
                "description": "Maximum block header size",
                "nullable": true
              },
              "key_deposit": {
                "type": "string",
                "example": "2000000",
                "description": "The amount of a key registration deposit in Lovelaces",
                "nullable": true
              },
              "pool_deposit": {
                "type": "string",
                "example": "500000000",
                "description": "The amount of a pool registration deposit in Lovelaces",
                "nullable": true
              },
              "e_max": {
                "type": "integer",
                "example": 18,
                "description": "Epoch bound on pool retirement",
                "nullable": true
              },
              "n_opt": {
                "type": "integer",
                "example": 150,
                "description": "Desired number of pools",
                "nullable": true
              },
              "a0": {
                "type": "number",
                "example": 0.3,
                "description": "Pool pledge influence",
                "nullable": true
              },
              "rho": {
                "type": "number",
                "example": 0.003,
                "description": "Monetary expansion",
                "nullable": true
              },
              "tau": {
                "type": "number",
                "example": 0.2,
                "description": "Treasury expansion",
                "nullable": true
              },
              "decentralisation_param": {
                "type": "number",
                "example": 0.5,
                "description": "Percentage of blocks produced by federated nodes",
                "nullable": true
              },
              "extra_entropy": {
                "type": "string",
                "nullable": true,
                "example": null,
                "description": "Seed for extra entropy"
              },
              "protocol_major_ver": {
                "type": "integer",
                "example": 2,
                "description": "Accepted protocol major version",
                "nullable": true
              },
              "protocol_minor_ver": {
                "type": "integer",
                "example": 0,
                "description": "Accepted protocol minor version",
                "nullable": true
              },
              "min_utxo": {
                "type": "string",
                "example": "1000000",
                "description": "Minimum UTXO value",
                "nullable": true
              },
              "min_pool_cost": {
                "type": "string",
                "example": "340000000",
                "description": "Minimum stake cost forced on the pool",
                "nullable": true
              },
              "cost_models": {
                "additionalProperties": true,
                "type": "object",
                "nullable": true,
                "example": {
                  "PlutusV1": [
                    197209,
                    0
                  ],
                  "PlutusV2": [
                    197209,
                    0
                  ]
                },
                "description": "Cost models parameters for Plutus Core scripts in raw list form"
              },
              "price_mem": {
                "type": "number",
                "nullable": true,
                "example": 0.0577,
                "description": "The per word cost of script memory usage"
              },
              "price_step": {
                "type": "number",
                "nullable": true,
                "example": 0.0000721,
                "description": "The cost of script execution step usage"
              },
              "max_tx_ex_mem": {
                "type": "string",
                "nullable": true,
                "example": "10000000",
                "description": "The maximum number of execution memory allowed to be used in a single transaction"
              },
              "max_tx_ex_steps": {
                "type": "string",
                "nullable": true,
                "example": "10000000000",
                "description": "The maximum number of execution steps allowed to be used in a single transaction"
              },
              "max_block_ex_mem": {
                "type": "string",
                "nullable": true,
                "example": "50000000",
                "description": "The maximum number of execution memory allowed to be used in a single block"
              },
              "max_block_ex_steps": {
                "type": "string",
                "nullable": true,
                "example": "40000000000",
                "description": "The maximum number of execution steps allowed to be used in a single block"
              },
              "max_val_size": {
                "type": "string",
                "nullable": true,
                "example": "5000",
                "description": "The maximum Val size"
              },
              "collateral_percent": {
                "type": "integer",
                "nullable": true,
                "example": 150,
                "description": "The percentage of the transactions fee which must be provided as collateral when including non-native scripts"
              },
              "max_collateral_inputs": {
                "type": "integer",
                "nullable": true,
                "example": 3,
                "description": "The maximum number of collateral inputs allowed in a transaction"
              },
              "coins_per_utxo_size": {
                "type": "string",
                "nullable": true,
                "example": "34482",
                "description": "Cost per UTxO word for Alonzo. Cost per UTxO byte for Babbage and later."
              },
              "coins_per_utxo_word": {
                "type": "string",
                "nullable": true,
                "example": "34482",
                "deprecated": true,
                "description": "Cost per UTxO word for Alonzo. Cost per UTxO byte for Babbage and later."
              },
              "pvt_motion_no_confidence": {
                "type": "number",
                "nullable": true,
                "description": "Pool Voting threshold for motion of no-confidence. New in 13.2-Conway."
              },
              "pvt_committee_normal": {
                "type": "number",
                "nullable": true,
                "description": "Pool Voting threshold for new committee/threshold (normal state). New in 13.2-Conway."
              },
              "pvt_committee_no_confidence": {
                "type": "number",
                "nullable": true,
                "description": "Pool Voting threshold for new committee/threshold (state of no-confidence). New in 13.2-Conway."
              },
              "pvt_hard_fork_initiation": {
                "type": "number",
                "nullable": true,
                "description": "Pool Voting threshold for hard-fork initiation. New in 13.2-Conway."
              },
              "dvt_motion_no_confidence": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for motion of no-confidence. New in 13.2-Conway."
              },
              "dvt_committee_normal": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for new committee/threshold (normal state). New in 13.2-Conway."
              },
              "dvt_committee_no_confidence": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for new committee/threshold (state of no-confidence). New in 13.2-Conway."
              },
              "dvt_update_to_constitution": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for update to the Constitution. New in 13.2-Conway."
              },
              "dvt_hard_fork_initiation": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for hard-fork initiation. New in 13.2-Conway."
              },
              "dvt_p_p_network_group": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for protocol parameter changes, network group. New in 13.2-Conway."
              },
              "dvt_p_p_economic_group": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for protocol parameter changes, economic group. New in 13.2-Conway."
              },
              "dvt_p_p_technical_group": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for protocol parameter changes, technical group. New in 13.2-Conway."
              },
              "dvt_p_p_gov_group": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for protocol parameter changes, governance group. New in 13.2-Conway."
              },
              "dvt_treasury_withdrawal": {
                "type": "number",
                "nullable": true,
                "description": "DRep Vote threshold for treasury withdrawal. New in 13.2-Conway."
              },
              "committee_min_size": {
                "type": "string",
                "nullable": true,
                "format": "word64type",
                "description": "Minimal constitutional committee size. New in 13.2-Conway."
              },
              "committee_max_term_length": {
                "type": "string",
                "nullable": true,
                "format": "word64type",
                "description": "Constitutional committee term limits. New in 13.2-Conway."
              },
              "gov_action_lifetime": {
                "type": "string",
                "nullable": true,
                "format": "word64type",
                "description": "Governance action expiration. New in 13.2-Conway."
              },
              "gov_action_deposit": {
                "type": "string",
                "nullable": true,
                "format": "word64type",
                "description": "Governance action deposit. New in 13.2-Conway."
              },
              "drep_deposit": {
                "type": "string",
                "nullable": true,
                "format": "word64type",
                "description": "DRep deposit amount. New in 13.2-Conway."
              },
              "drep_activity": {
                "type": "string",
                "nullable": true,
                "format": "word64type",
                "description": "DRep activity period. New in 13.2-Conway."
              },
              "pvtpp_security_group": {
                "type": "number",
                "nullable": true,
                "deprecated": true,
                "description": "Pool Voting threshold for security-relevant protocol parameters changes. Renamed to pvt_p_p_security_group."
              },
              "pvt_p_p_security_group": {
                "type": "number",
                "nullable": true,
                "description": "Pool Voting threshold for security-relevant protocol parameters changes."
              },
              "min_fee_ref_script_cost_per_byte": {
                "type": "number",
                "nullable": true
              }
            },
            "required": [
              "min_fee_a",
              "min_fee_b",
              "max_block_size",
              "max_tx_size",
              "max_block_header_size",
              "key_deposit",
              "pool_deposit",
              "e_max",
              "n_opt",
              "a0",
              "rho",
              "tau",
              "decentralisation_param",
              "extra_entropy",
              "protocol_major_ver",
              "protocol_minor_ver",
              "min_utxo",
              "min_pool_cost",
              "cost_models",
              "price_mem",
              "price_step",
              "max_tx_ex_mem",
              "max_tx_ex_steps",
              "max_block_ex_mem",
              "max_block_ex_steps",
              "max_val_size",
              "collateral_percent",
              "max_collateral_inputs",
              "coins_per_utxo_size",
              "coins_per_utxo_word",
              "pvt_motion_no_confidence",
              "pvt_committee_normal",
              "pvt_committee_no_confidence",
              "pvt_hard_fork_initiation",
              "dvt_motion_no_confidence",
              "dvt_committee_normal",
              "dvt_committee_no_confidence",
              "dvt_update_to_constitution",
              "dvt_hard_fork_initiation",
              "dvt_p_p_network_group",
              "dvt_p_p_economic_group",
              "dvt_p_p_technical_group",
              "dvt_p_p_gov_group",
              "dvt_treasury_withdrawal",
              "committee_min_size",
              "committee_max_term_length",
              "gov_action_lifetime",
              "gov_action_deposit",
              "drep_deposit",
              "drep_activity",
              "pvtpp_security_group",
              "pvt_p_p_security_group",
              "min_fee_ref_script_cost_per_byte"
            ]
          }
        },
        "required": [
          "tx_hash",
          "cert_index",
          "parameters"
        ]
      },
      "proposal_withdrawals": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "stake_address": {
              "type": "string",
              "example": "stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7",
              "description": "Bech32 stake address"
            },
            "amount": {
              "type": "string",
              "description": "Withdrawal amount in Lovelaces"
            }
          },
          "required": [
            "stake_address",
            "amount"
          ]
        },
        "example": [
          {
            "stake_address": "stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7",
            "amount": "454541212442"
          },
          {
            "stake_address": "stake1xx2g2c9dx2nhhehyrezyxpkstoppcqmu9hk63qgfkccw5rqttygt2",
            "amount": "97846969"
          }
        ]
      },
      "proposal_votes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the voting transaction."
            },
            "cert_index": {
              "type": "integer",
              "description": "Index of the certificate within the voting transaction."
            },
            "voter_role": {
              "type": "string",
              "enum": [
                "constitutional_committee",
                "drep",
                "spo"
              ],
              "description": "The role of the voter. Can be one of constitutional_committee, drep, spo."
            },
            "voter": {
              "type": "string",
              "description": "The actual voter."
            },
            "vote": {
              "type": "string",
              "enum": [
                "yes",
                "no",
                "abstain"
              ],
              "description": "The Vote. Can be one of yes, no, abstain."
            }
          },
          "required": [
            "tx_hash",
            "cert_index",
            "voter_role",
            "voter",
            "vote"
          ]
        },
        "example": [
          {
            "tx_hash": "b302de601defdf11a5261ed31a263804dac4a582a888c998ce24dec5",
            "cert_index": 2,
            "voter_role": "drep",
            "voter": "drep1mvdu8slennngja7w4un6knwezufra70887zuxpprd64jxfveahn",
            "vote": "yes"
          },
          {
            "tx_hash": "b302de601defdf11a5261ed31a263804dac4a582a888c998ce24dec5",
            "cert_index": 3,
            "voter_role": "constitutional_committee",
            "voter": "53a42debdc7ffd90085ab7fd9800b63e6d1c9ac481ba6eb7b6a844e4",
            "vote": "abstain"
          }
        ]
      },
      "proposal_metadata": {
        "type": "object",
        "properties": {
          "tx_hash": {
            "type": "string",
            "description": "Off-chain metadata of a proposal with a specific transaction hash"
          },
          "cert_index": {
            "type": "integer",
            "description": "Off-chain metadata of a proposal with a specific transaction cert_index"
          },
          "url": {
            "type": "string",
            "example": "https://abc.xyz/gov.json",
            "description": "URL to the proposal metadata"
          },
          "hash": {
            "type": "string",
            "example": "69c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c\"",
            "description": "Hash of the metadata file"
          },
          "json_metadata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Content of the JSON metadata (validated CIP-108)"
          },
          "bytes": {
            "type": "string",
            "description": "Content of the metadata (raw)"
          }
        },
        "required": [
          "tx_hash",
          "cert_index",
          "url",
          "hash",
          "json_metadata",
          "bytes"
        ],
        "example": {
          "tx_hash": "257d75c8ddb0434e9b63e29ebb6241add2b835a307aa33aedba2effe09ed4ec8",
          "cert_index": 2,
          "url": "https://raw.githubusercontent.com/carloslodelar/proposals/main/pv10.json",
          "hash": "ffa226f3863aca006172d559cf46bb8b883a47233962ae2fc94c158d7de6fa81",
          "json_metadata": {
            "body": {
              "title": "Hardfork to Protocol version 10",
              "abstract": "Let's have sanchoNet in full governance as soon as possible",
              "rationale": "Let's keep testing stuff",
              "motivation": "PV9 is not as fun as PV10",
              "references": [
                {
                  "uri": "",
                  "@type": "Other",
                  "label": "Hardfork to PV10"
                }
              ]
            },
            "authors": [
              {
                "name": "Carlos",
                "witness": {
                  "publicKey": "7ea09a34aebb13c9841c71397b1cabfec5ddf950405293dee496cac2f437480a",
                  "signature": "a476985b4cc0d457f247797611799a6f6a80fc8cb7ec9dcb5a8223888d0618e30de165f3d869c4a0d9107d8a5b612ad7c5e42441907f5b91796f0d7187d64a01",
                  "witnessAlgorithm": "ed25519"
                }
              }
            ],
            "@context": {
              "body": {
                "@id": "CIP108:body",
                "@context": {
                  "title": "CIP108:title",
                  "abstract": "CIP108:abstract",
                  "rationale": "CIP108:rationale",
                  "motivation": "CIP108:motivation",
                  "references": {
                    "@id": "CIP108:references",
                    "@context": {
                      "uri": "CIP100:reference-uri",
                      "Other": "CIP100:OtherReference",
                      "label": "CIP100:reference-label",
                      "referenceHash": {
                        "@id": "CIP108:referenceHash",
                        "@context": {
                          "hashDigest": "CIP108:hashDigest",
                          "hashAlgorithm": "CIP100:hashAlgorithm"
                        }
                      },
                      "GovernanceMetadata": "CIP100:GovernanceMetadataReference"
                    },
                    "@container": "@set"
                  }
                }
              },
              "CIP100": "https://github.com/cardano-foundation/CIPs/blob/master/CIP-0100/README.md#",
              "CIP108": "https://github.com/cardano-foundation/CIPs/blob/master/CIP-0108/README.md#",
              "authors": {
                "@id": "CIP100:authors",
                "@context": {
                  "name": "http://xmlns.com/foaf/0.1/name",
                  "witness": {
                    "@id": "CIP100:witness",
                    "@context": {
                      "publicKey": "CIP100:publicKey",
                      "signature": "CIP100:signature",
                      "witnessAlgorithm": "CIP100:witnessAlgorithm"
                    }
                  }
                },
                "@container": "@set"
              },
              "@language": "en-us",
              "hashAlgorithm": "CIP100:hashAlgorithm"
            },
            "hashAlgorithm": "blake2b-256"
          },
          "bytes": "\\x7b0a20202240636f6e74657874223a207b0a2020202022406c616e6775616765223a2022656e2d7573222c0a2020202022434950313030223a202268747470733a2f2f6769746875622e636f6d2f63617264616e6f2d666f756e646174696f6e2f434950732f626c6f622f6d61737465722f4349502d303130302f524541444d452e6d6423222c0a2020202022434950313038223a202268747470733a2f2f6769746875622e636f6d2f63617264616e6f2d666f756e646174696f6e2f434950732f626c6f622f6d61737465722f4349502d303130382f524541444d452e6d6423222c0a202020202268617368416c676f726974686d223a20224349503130303a68617368416c676f726974686d222c0a2020202022626f6479223a207b0a20202020202022406964223a20224349503130383a626f6479222c0a2020202020202240636f6e74657874223a207b0a2020202020202020227265666572656e636573223a207b0a2020202020202020202022406964223a20224349503130383a7265666572656e636573222c0a202020202020202020202240636f6e7461696e6572223a202240736574222c0a202020202020202020202240636f6e74657874223a207b0a20202020202020202020202022476f7665726e616e63654d65746164617461223a20224349503130303a476f7665726e616e63654d657461646174615265666572656e6365222c0a202020202020202020202020224f74686572223a20224349503130303a4f746865725265666572656e6365222c0a202020202020202020202020226c6162656c223a20224349503130303a7265666572656e63652d6c6162656c222c0a20202020202020202020202022757269223a20224349503130303a7265666572656e63652d757269222c0a202020202020202020202020227265666572656e636548617368223a207b0a202020202020202020202020202022406964223a20224349503130383a7265666572656e636548617368222c0a20202020202020202020202020202240636f6e74657874223a207b0a202020202020202020202020202020202268617368446967657374223a20224349503130383a68617368446967657374222c0a202020202020202020202020202020202268617368416c676f726974686d223a20224349503130303a68617368416c676f726974686d220a20202020202020202020202020207d0a2020202020202020202020207d0a202020202020202020207d0a20202020202020207d2c0a2020202020202020227469746c65223a20224349503130383a7469746c65222c0a2020202020202020226162737472616374223a20224349503130383a6162737472616374222c0a2020202020202020226d6f7469766174696f6e223a20224349503130383a6d6f7469766174696f6e222c0a202020202020202022726174696f6e616c65223a20224349503130383a726174696f6e616c65220a2020202020207d0a202020207d2c0a2020202022617574686f7273223a207b0a20202020202022406964223a20224349503130303a617574686f7273222c0a2020202020202240636f6e7461696e6572223a202240736574222c0a2020202020202240636f6e74657874223a207b0a2020202020202020226e616d65223a2022687474703a2f2f786d6c6e732e636f6d2f666f61662f302e312f6e616d65222c0a2020202020202020227769746e657373223a207b0a2020202020202020202022406964223a20224349503130303a7769746e657373222c0a202020202020202020202240636f6e74657874223a207b0a202020202020202020202020227769746e657373416c676f726974686d223a20224349503130303a7769746e657373416c676f726974686d222c0a202020202020202020202020227075626c69634b6579223a20224349503130303a7075626c69634b6579222c0a202020202020202020202020227369676e6174757265223a20224349503130303a7369676e6174757265220a202020202020202020207d0a20202020202020207d0a2020202020207d0a202020207d0a20207d2c0a20202268617368416c676f726974686d223a2022626c616b6532622d323536222c0a202022626f6479223a207b0a20202020227469746c65223a202248617264666f726b20746f2050726f746f636f6c2076657273696f6e203130222c0a20202020226162737472616374223a20224c6574277320686176652073616e63686f4e657420696e2066756c6c20676f7665726e616e636520617320736f6f6e20617320706f737369626c65222c0a20202020226d6f7469766174696f6e223a2022505639206973206e6f742061732066756e2061732050563130222c0a2020202022726174696f6e616c65223a20224c65742773206b6565702074657374696e67207374756666222c0a20202020227265666572656e636573223a205b0a2020202020207b0a2020202020202020224074797065223a20224f74686572222c0a2020202020202020226c6162656c223a202248617264666f726b20746f2050563130222c0a202020202020202022757269223a2022220a2020202020207d0a202020205d0a20207d2c0a202022617574686f7273223a205b0a202020207b0a202020202020226e616d65223a20224361726c6f73222c0a202020202020227769746e657373223a207b0a2020202020202020227769746e657373416c676f726974686d223a202265643235353139222c0a2020202020202020227075626c69634b6579223a202237656130396133346165626231336339383431633731333937623163616266656335646466393530343035323933646565343936636163326634333734383061222c0a2020202020202020227369676e6174757265223a20226134373639383562346363306434353766323437373937363131373939613666366138306663386362376563396463623561383232333838386430363138653330646531363566336438363963346130643931303764386135623631326164376335653432343431393037663562393137393666306437313837643634613031220a2020202020207d0a202020207d0a20205d0a7d"
        }
      },
      "epoch_content": {
        "type": "object",
        "properties": {
          "epoch": {
            "type": "integer",
            "example": 225,
            "description": "Epoch number"
          },
          "start_time": {
            "type": "integer",
            "example": 1603403091,
            "description": "Unix time of the start of the epoch"
          },
          "end_time": {
            "type": "integer",
            "example": 1603835086,
            "description": "Unix time of the end of the epoch"
          },
          "first_block_time": {
            "type": "integer",
            "example": 1603403092,
            "description": "Unix time of the first block of the epoch"
          },
          "last_block_time": {
            "type": "integer",
            "example": 1603835084,
            "description": "Unix time of the last block of the epoch"
          },
          "block_count": {
            "type": "integer",
            "example": 21298,
            "description": "Number of blocks within the epoch"
          },
          "tx_count": {
            "type": "integer",
            "example": 17856,
            "description": "Number of transactions within the epoch"
          },
          "output": {
            "type": "string",
            "example": "7849943934049314",
            "description": "Sum of all the transactions within the epoch in Lovelaces"
          },
          "fees": {
            "type": "string",
            "example": "4203312194",
            "description": "Sum of all the fees within the epoch in Lovelaces"
          },
          "active_stake": {
            "type": "string",
            "nullable": true,
            "example": "784953934049314",
            "description": "Sum of all the active stakes within the epoch in Lovelaces"
          }
        },
        "required": [
          "epoch",
          "start_time",
          "end_time",
          "first_block_time",
          "last_block_time",
          "block_count",
          "tx_count",
          "output",
          "fees",
          "active_stake"
        ]
      },
      "epoch_param_content": {
        "type": "object",
        "properties": {
          "epoch": {
            "type": "integer",
            "example": 225,
            "description": "Epoch number"
          },
          "min_fee_a": {
            "type": "integer",
            "example": 44,
            "description": "The linear factor for the minimum fee calculation for given epoch"
          },
          "min_fee_b": {
            "type": "integer",
            "example": 155381,
            "description": "The constant factor for the minimum fee calculation"
          },
          "max_block_size": {
            "type": "integer",
            "example": 65536,
            "description": "Maximum block body size in Bytes"
          },
          "max_tx_size": {
            "type": "integer",
            "example": 16384,
            "description": "Maximum transaction size"
          },
          "max_block_header_size": {
            "type": "integer",
            "example": 1100,
            "description": "Maximum block header size"
          },
          "key_deposit": {
            "type": "string",
            "example": "2000000",
            "description": "The amount of a key registration deposit in Lovelaces"
          },
          "pool_deposit": {
            "type": "string",
            "example": "500000000",
            "description": "The amount of a pool registration deposit in Lovelaces"
          },
          "e_max": {
            "type": "integer",
            "example": 18,
            "description": "Epoch bound on pool retirement"
          },
          "n_opt": {
            "type": "integer",
            "example": 150,
            "description": "Desired number of pools"
          },
          "a0": {
            "type": "number",
            "example": 0.3,
            "description": "Pool pledge influence"
          },
          "rho": {
            "type": "number",
            "example": 0.003,
            "description": "Monetary expansion"
          },
          "tau": {
            "type": "number",
            "example": 0.2,
            "description": "Treasury expansion"
          },
          "decentralisation_param": {
            "type": "number",
            "example": 0.5,
            "description": "Percentage of blocks produced by federated nodes"
          },
          "extra_entropy": {
            "type": "string",
            "nullable": true,
            "example": null,
            "description": "Seed for extra entropy"
          },
          "protocol_major_ver": {
            "type": "integer",
            "example": 2,
            "description": "Accepted protocol major version"
          },
          "protocol_minor_ver": {
            "type": "integer",
            "example": 0,
            "description": "Accepted protocol minor version"
          },
          "min_utxo": {
            "type": "string",
            "example": "1000000",
            "description": "Minimum UTXO value. Use `coins_per_utxo_size` for Alonzo and later eras",
            "deprecated": true
          },
          "min_pool_cost": {
            "type": "string",
            "example": "340000000",
            "description": "Minimum stake cost forced on the pool"
          },
          "nonce": {
            "type": "string",
            "example": "1a3be38bcbb7911969283716ad7aa550250226b76a61fc51cc9a9a35d9276d81",
            "description": "Epoch number only used once"
          },
          "cost_models": {
            "additionalProperties": true,
            "type": "object",
            "nullable": true,
            "example": {
              "PlutusV1": {
                "addInteger-cpu-arguments-intercept": 197209,
                "addInteger-cpu-arguments-slope": 0
              },
              "PlutusV2": {
                "addInteger-cpu-arguments-intercept": 197209,
                "addInteger-cpu-arguments-slope": 0
              }
            },
            "description": "Cost models parameters for Plutus Core scripts"
          },
          "cost_models_raw": {
            "additionalProperties": true,
            "type": "object",
            "nullable": true,
            "example": {
              "PlutusV1": [
                197209,
                0
              ],
              "PlutusV2": [
                197209,
                0
              ]
            },
            "description": "Cost models parameters for Plutus Core scripts in raw list form"
          },
          "price_mem": {
            "type": "number",
            "nullable": true,
            "example": 0.0577,
            "description": "The per word cost of script memory usage"
          },
          "price_step": {
            "type": "number",
            "nullable": true,
            "example": 0.0000721,
            "description": "The cost of script execution step usage"
          },
          "max_tx_ex_mem": {
            "type": "string",
            "nullable": true,
            "example": "10000000",
            "description": "The maximum number of execution memory allowed to be used in a single transaction"
          },
          "max_tx_ex_steps": {
            "type": "string",
            "nullable": true,
            "example": "10000000000",
            "description": "The maximum number of execution steps allowed to be used in a single transaction"
          },
          "max_block_ex_mem": {
            "type": "string",
            "nullable": true,
            "example": "50000000",
            "description": "The maximum number of execution memory allowed to be used in a single block"
          },
          "max_block_ex_steps": {
            "type": "string",
            "nullable": true,
            "example": "40000000000",
            "description": "The maximum number of execution steps allowed to be used in a single block"
          },
          "max_val_size": {
            "type": "string",
            "nullable": true,
            "example": "5000",
            "description": "The maximum Val size"
          },
          "collateral_percent": {
            "type": "integer",
            "nullable": true,
            "example": 150,
            "description": "The percentage of the transactions fee which must be provided as collateral when including non-native scripts"
          },
          "max_collateral_inputs": {
            "type": "integer",
            "nullable": true,
            "example": 3,
            "description": "The maximum number of collateral inputs allowed in a transaction"
          },
          "coins_per_utxo_size": {
            "type": "string",
            "nullable": true,
            "example": "34482",
            "description": "Cost per UTxO word for Alonzo. Cost per UTxO byte for Babbage and later."
          },
          "coins_per_utxo_word": {
            "type": "string",
            "nullable": true,
            "example": "34482",
            "deprecated": true,
            "description": "Cost per UTxO word for Alonzo. Cost per UTxO byte for Babbage and later."
          },
          "pvt_motion_no_confidence": {
            "type": "number",
            "nullable": true,
            "description": "Pool Voting threshold for motion of no-confidence."
          },
          "pvt_committee_normal": {
            "nullable": true,
            "type": "number",
            "description": "Pool Voting threshold for new committee/threshold (normal state)."
          },
          "pvt_committee_no_confidence": {
            "nullable": true,
            "type": "number",
            "description": "Pool Voting threshold for new committee/threshold (state of no-confidence)."
          },
          "pvt_hard_fork_initiation": {
            "nullable": true,
            "type": "number",
            "description": "Pool Voting threshold for hard-fork initiation."
          },
          "dvt_motion_no_confidence": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for motion of no-confidence."
          },
          "dvt_committee_normal": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for new committee/threshold (normal state)."
          },
          "dvt_committee_no_confidence": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for new committee/threshold (state of no-confidence)."
          },
          "dvt_update_to_constitution": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for update to the Constitution."
          },
          "dvt_hard_fork_initiation": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for hard-fork initiation."
          },
          "dvt_p_p_network_group": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for protocol parameter changes, network group."
          },
          "dvt_p_p_economic_group": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for protocol parameter changes, economic group."
          },
          "dvt_p_p_technical_group": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for protocol parameter changes, technical group."
          },
          "dvt_p_p_gov_group": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for protocol parameter changes, governance group."
          },
          "dvt_treasury_withdrawal": {
            "nullable": true,
            "type": "number",
            "description": "DRep Vote threshold for treasury withdrawal."
          },
          "committee_min_size": {
            "type": "string",
            "nullable": true,
            "description": "Minimal constitutional committee size."
          },
          "committee_max_term_length": {
            "type": "string",
            "nullable": true,
            "description": "Constitutional committee term limits."
          },
          "gov_action_lifetime": {
            "type": "string",
            "nullable": true,
            "description": "Governance action expiration."
          },
          "gov_action_deposit": {
            "type": "string",
            "nullable": true,
            "description": "Governance action deposit."
          },
          "drep_deposit": {
            "type": "string",
            "nullable": true,
            "description": "DRep deposit amount."
          },
          "drep_activity": {
            "type": "string",
            "nullable": true,
            "description": "DRep activity period."
          },
          "pvtpp_security_group": {
            "type": "number",
            "nullable": true,
            "deprecated": true,
            "description": "Pool Voting threshold for security-relevant protocol parameters changes. Renamed to pvt_p_p_security_group."
          },
          "pvt_p_p_security_group": {
            "type": "number",
            "nullable": true,
            "description": "Pool Voting threshold for security-relevant protocol parameters changes."
          },
          "min_fee_ref_script_cost_per_byte": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "epoch",
          "min_fee_a",
          "min_fee_b",
          "max_block_size",
          "max_tx_size",
          "max_block_header_size",
          "key_deposit",
          "pool_deposit",
          "e_max",
          "n_opt",
          "a0",
          "rho",
          "tau",
          "decentralisation_param",
          "extra_entropy",
          "protocol_major_ver",
          "protocol_minor_ver",
          "min_utxo",
          "min_pool_cost",
          "nonce",
          "cost_models",
          "price_mem",
          "price_step",
          "max_tx_ex_mem",
          "max_tx_ex_steps",
          "max_block_ex_mem",
          "max_block_ex_steps",
          "max_val_size",
          "collateral_percent",
          "max_collateral_inputs",
          "coins_per_utxo_size",
          "coins_per_utxo_word",
          "pvt_motion_no_confidence",
          "pvt_committee_normal",
          "pvt_committee_no_confidence",
          "pvt_hard_fork_initiation",
          "dvt_motion_no_confidence",
          "dvt_committee_normal",
          "dvt_committee_no_confidence",
          "dvt_update_to_constitution",
          "dvt_hard_fork_initiation",
          "dvt_p_p_network_group",
          "dvt_p_p_economic_group",
          "dvt_p_p_technical_group",
          "dvt_p_p_gov_group",
          "dvt_treasury_withdrawal",
          "committee_min_size",
          "committee_max_term_length",
          "gov_action_lifetime",
          "gov_action_deposit",
          "drep_deposit",
          "drep_activity",
          "pvtpp_security_group",
          "pvt_p_p_security_group",
          "min_fee_ref_script_cost_per_byte"
        ]
      },
      "epoch_content_array": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/epoch_content"
        }
      },
      "epoch_stake_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "stake_address": {
              "type": "string",
              "example": "stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk",
              "description": "Stake address"
            },
            "pool_id": {
              "type": "string",
              "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
              "description": "Bech32 prefix of the pool delegated to"
            },
            "amount": {
              "type": "string",
              "example": "4440295078",
              "description": "Amount of active delegated stake in Lovelaces"
            }
          },
          "required": [
            "stake_address",
            "pool_id",
            "amount"
          ]
        }
      },
      "epoch_stake_pool_content": {
        "type": "array",
        "items": {
          "properties": {
            "stake_address": {
              "type": "string",
              "example": "stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk",
              "description": "Stake address"
            },
            "amount": {
              "type": "string",
              "example": "4440295078",
              "description": "Amount of active delegated stake in Lovelaces"
            }
          },
          "required": [
            "stake_address",
            "amount"
          ]
        }
      },
      "epoch_block_content": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Hash of the block"
        },
        "example": [
          "d0fa315687e99ccdc96b14cc2ea74a767405d64427b648c470731a9b69e4606e",
          "38bc6efb92a830a0ed22a64f979d120d26483fd3c811f6622a8c62175f530878",
          "f3258fcd8b975c061b4fcdcfcbb438807134d6961ec278c200151274893b6b7d"
        ]
      },
      "tx_content": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "1e043f100dce12d107f679685acd2fc0610e10f72a92d412794c9773d11d8477",
            "description": "Transaction hash"
          },
          "block": {
            "type": "string",
            "example": "356b7d7dbb696ccd12775c016941057a9dc70898d87a63fc752271bb46856940",
            "description": "Block hash"
          },
          "block_height": {
            "type": "integer",
            "example": 123456,
            "description": "Block number"
          },
          "block_time": {
            "type": "integer",
            "example": 1635505891,
            "description": "Block creation time in UNIX time"
          },
          "slot": {
            "type": "integer",
            "example": 42000000,
            "description": "Slot number"
          },
          "index": {
            "type": "integer",
            "example": 1,
            "description": "Transaction index within the block"
          },
          "output_amount": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The sum of all the UTXO per asset",
              "properties": {
                "unit": {
                  "type": "string",
                  "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                  "description": "The unit of the value"
                },
                "quantity": {
                  "type": "string",
                  "description": "The quantity of the unit"
                }
              },
              "required": [
                "unit",
                "quantity"
              ]
            },
            "example": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              },
              {
                "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                "quantity": "12"
              }
            ]
          },
          "fees": {
            "type": "string",
            "example": "182485",
            "description": "Fees of the transaction in Lovelaces"
          },
          "deposit": {
            "type": "string",
            "example": "0",
            "description": "Deposit within the transaction in Lovelaces"
          },
          "size": {
            "type": "integer",
            "example": 433,
            "description": "Size of the transaction in Bytes"
          },
          "invalid_before": {
            "type": "string",
            "nullable": true,
            "example": null,
            "description": "Left (included) endpoint of the timelock validity intervals"
          },
          "invalid_hereafter": {
            "type": "string",
            "nullable": true,
            "example": "13885913",
            "description": "Right (excluded) endpoint of the timelock validity intervals"
          },
          "utxo_count": {
            "type": "integer",
            "example": 4,
            "description": "Count of UTXOs within the transaction"
          },
          "withdrawal_count": {
            "type": "integer",
            "example": 0,
            "description": "Count of the withdrawals within the transaction"
          },
          "mir_cert_count": {
            "type": "integer",
            "example": 0,
            "description": "Count of the MIR certificates within the transaction"
          },
          "delegation_count": {
            "type": "integer",
            "example": 0,
            "description": "Count of the delegations within the transaction"
          },
          "stake_cert_count": {
            "type": "integer",
            "example": 0,
            "description": "Count of the stake keys (de)registration within the transaction"
          },
          "pool_update_count": {
            "type": "integer",
            "example": 0,
            "description": "Count of the stake pool registration and update certificates within the transaction"
          },
          "pool_retire_count": {
            "type": "integer",
            "example": 0,
            "description": "Count of the stake pool retirement certificates within the transaction"
          },
          "asset_mint_or_burn_count": {
            "type": "integer",
            "example": 0,
            "description": "Count of asset mints and burns within the transaction"
          },
          "redeemer_count": {
            "type": "integer",
            "example": 0,
            "description": "Count of redeemers within the transaction"
          },
          "valid_contract": {
            "type": "boolean",
            "example": true,
            "description": "True if contract script passed validation"
          }
        },
        "required": [
          "hash",
          "block",
          "block_height",
          "block_time",
          "slot",
          "index",
          "output_amount",
          "fees",
          "deposit",
          "size",
          "invalid_before",
          "invalid_hereafter",
          "utxo_count",
          "withdrawal_count",
          "mir_cert_count",
          "delegation_count",
          "stake_cert_count",
          "pool_update_count",
          "pool_retire_count",
          "asset_mint_or_burn_count",
          "redeemer_count",
          "valid_contract"
        ]
      },
      "tx_content_utxo": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "1e043f100dce12d107f679685acd2fc0610e10f72a92d412794c9773d11d8477",
            "description": "Transaction hash"
          },
          "inputs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv",
                  "description": "Input address"
                },
                "amount": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "The sum of all the UTXO per asset",
                    "properties": {
                      "unit": {
                        "type": "string",
                        "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                        "description": "The unit of the value"
                      },
                      "quantity": {
                        "type": "string",
                        "description": "The quantity of the unit"
                      }
                    },
                    "required": [
                      "unit",
                      "quantity"
                    ]
                  },
                  "example": [
                    {
                      "unit": "lovelace",
                      "quantity": "42000000"
                    },
                    {
                      "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                      "quantity": "12"
                    }
                  ]
                },
                "tx_hash": {
                  "type": "string",
                  "example": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0",
                  "description": "Hash of the UTXO transaction"
                },
                "output_index": {
                  "type": "integer",
                  "example": 0,
                  "description": "UTXO index in the transaction"
                },
                "data_hash": {
                  "type": "string",
                  "nullable": true,
                  "description": "The hash of the transaction output datum",
                  "example": "9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710"
                },
                "inline_datum": {
                  "type": "string",
                  "nullable": true,
                  "description": "CBOR encoded inline datum",
                  "example": "19a6aa"
                },
                "reference_script_hash": {
                  "type": "string",
                  "nullable": true,
                  "description": "The hash of the reference script of the input",
                  "example": "13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"
                },
                "collateral": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the input is a collateral consumed on script validation failure"
                },
                "reference": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the input is a reference transaction input"
                }
              },
              "required": [
                "address",
                "amount",
                "tx_hash",
                "output_index",
                "data_hash",
                "inline_datum",
                "reference_script_hash",
                "collateral"
              ]
            }
          },
          "outputs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv",
                  "description": "Output address"
                },
                "amount": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "The sum of all the UTXO per asset",
                    "properties": {
                      "unit": {
                        "type": "string",
                        "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                        "description": "The unit of the value"
                      },
                      "quantity": {
                        "type": "string",
                        "description": "The quantity of the unit"
                      }
                    },
                    "required": [
                      "unit",
                      "quantity"
                    ]
                  },
                  "example": [
                    {
                      "unit": "lovelace",
                      "quantity": "42000000"
                    },
                    {
                      "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                      "quantity": "12"
                    }
                  ]
                },
                "output_index": {
                  "type": "integer",
                  "example": 0,
                  "description": "UTXO index in the transaction"
                },
                "data_hash": {
                  "type": "string",
                  "nullable": true,
                  "description": "The hash of the transaction output datum",
                  "example": "9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710"
                },
                "inline_datum": {
                  "type": "string",
                  "nullable": true,
                  "description": "CBOR encoded inline datum",
                  "example": "19a6aa"
                },
                "collateral": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the output is a collateral output"
                },
                "reference_script_hash": {
                  "type": "string",
                  "nullable": true,
                  "description": "The hash of the reference script of the output",
                  "example": "13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"
                },
                "consumed_by_tx": {
                  "type": "string",
                  "nullable": true,
                  "description": "Transaction hash that consumed the UTXO or null for unconsumed UTXOs. Always null for collateral outputs.",
                  "example": "66c29b56952f6085afac3b0632d781af78d020b080063bcfd6c54b8e2b8fed41"
                }
              },
              "required": [
                "address",
                "amount",
                "output_index",
                "data_hash",
                "inline_datum",
                "collateral",
                "reference_script_hash"
              ]
            }
          }
        },
        "required": [
          "hash",
          "inputs",
          "outputs"
        ]
      },
      "tx_content_stake_addr": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "cert_index": {
              "type": "integer",
              "example": 0,
              "description": "Index of the certificate within the transaction"
            },
            "address": {
              "type": "string",
              "example": "stake1u9t3a0tcwune5xrnfjg4q7cpvjlgx9lcv0cuqf5mhfjwrvcwrulda",
              "description": "Delegation stake address"
            },
            "registration": {
              "type": "boolean",
              "example": true,
              "description": "Registration boolean, false if deregistration"
            }
          },
          "required": [
            "cert_index",
            "address",
            "registration"
          ]
        }
      },
      "tx_content_delegations": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "index": {
              "type": "integer",
              "example": 0,
              "description": "Index of the certificate within the transaction",
              "deprecated": true
            },
            "cert_index": {
              "type": "integer",
              "example": 0,
              "description": "Index of the certificate within the transaction"
            },
            "address": {
              "type": "string",
              "example": "stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc",
              "description": "Bech32 delegation stake address"
            },
            "pool_id": {
              "type": "string",
              "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
              "description": "Bech32 ID of delegated stake pool"
            },
            "active_epoch": {
              "type": "integer",
              "example": 210,
              "description": "Epoch in which the delegation becomes active"
            }
          },
          "required": [
            "index",
            "cert_index",
            "address",
            "pool_id",
            "active_epoch"
          ]
        }
      },
      "tx_content_withdrawals": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "example": "stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc",
              "description": "Bech32 withdrawal address"
            },
            "amount": {
              "type": "string",
              "example": "431833601",
              "description": "Withdrawal amount in Lovelaces"
            }
          },
          "required": [
            "address",
            "amount"
          ]
        }
      },
      "tx_content_mirs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pot": {
              "type": "string",
              "enum": [
                "reserve",
                "treasury"
              ],
              "example": "reserve",
              "description": "Source of MIR funds"
            },
            "cert_index": {
              "type": "integer",
              "example": 0,
              "description": "Index of the certificate within the transaction"
            },
            "address": {
              "type": "string",
              "example": "stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc",
              "description": "Bech32 stake address"
            },
            "amount": {
              "type": "string",
              "example": "431833601",
              "description": "MIR amount in Lovelaces"
            }
          },
          "required": [
            "pot",
            "cert_index",
            "address",
            "amount"
          ]
        }
      },
      "tx_content_pool_certs": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "cert_index": {
              "type": "integer",
              "example": 0,
              "description": "Index of the certificate within the transaction"
            },
            "pool_id": {
              "type": "string",
              "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
              "description": "Bech32 encoded pool ID"
            },
            "vrf_key": {
              "type": "string",
              "example": "0b5245f9934ec2151116fb8ec00f35fd00e0aa3b075c4ed12cce440f999d8233",
              "description": "VRF key hash"
            },
            "pledge": {
              "type": "string",
              "example": "5000000000",
              "description": "Stake pool certificate pledge in Lovelaces"
            },
            "margin_cost": {
              "type": "number",
              "example": 0.05,
              "description": "Margin tax cost of the stake pool"
            },
            "fixed_cost": {
              "type": "string",
              "example": "340000000",
              "description": "Fixed tax cost of the stake pool in Lovelaces"
            },
            "reward_account": {
              "type": "string",
              "example": "stake1uxkptsa4lkr55jleztw43t37vgdn88l6ghclfwuxld2eykgpgvg3f",
              "description": "Bech32 reward account of the stake pool"
            },
            "owners": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Bech32 accounts of the pool owners"
              },
              "example": [
                "stake1u98nnlkvkk23vtvf9273uq7cph5ww6u2yq2389psuqet90sv4xv9v"
              ]
            },
            "metadata": {
              "type": "object",
              "nullable": true,
              "properties": {
                "url": {
                  "type": "string",
                  "nullable": true,
                  "example": "https://stakenuts.com/mainnet.json",
                  "description": "URL to the stake pool metadata"
                },
                "hash": {
                  "type": "string",
                  "nullable": true,
                  "example": "47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c",
                  "description": "Hash of the metadata file"
                },
                "ticker": {
                  "type": "string",
                  "nullable": true,
                  "example": "NUTS",
                  "description": "Ticker of the stake pool"
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "example": "Stake Nuts",
                  "description": "Name of the stake pool"
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "example": "The best pool ever",
                  "description": "Description of the stake pool"
                },
                "homepage": {
                  "type": "string",
                  "nullable": true,
                  "example": "https://stakentus.com/",
                  "description": "Home page of the stake pool"
                }
              },
              "required": [
                "url",
                "hash",
                "ticker",
                "name",
                "description",
                "homepage"
              ]
            },
            "relays": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "ipv4": {
                    "type": "string",
                    "nullable": true,
                    "example": "4.4.4.4",
                    "description": "IPv4 address of the relay"
                  },
                  "ipv6": {
                    "type": "string",
                    "nullable": true,
                    "example": "https://stakenuts.com/mainnet.json",
                    "description": "IPv6 address of the relay"
                  },
                  "dns": {
                    "type": "string",
                    "nullable": true,
                    "example": "relay1.stakenuts.com",
                    "description": "DNS name of the relay"
                  },
                  "dns_srv": {
                    "type": "string",
                    "nullable": true,
                    "example": "_relays._tcp.relays.stakenuts.com",
                    "description": "DNS SRV entry of the relay"
                  },
                  "port": {
                    "type": "integer",
                    "example": 3001,
                    "description": "Network port of the relay"
                  }
                },
                "required": [
                  "ipv4",
                  "ipv6",
                  "dns",
                  "dns_srv",
                  "port"
                ]
              }
            },
            "active_epoch": {
              "type": "integer",
              "example": 210,
              "description": "Epoch in which the update becomes active"
            }
          },
          "required": [
            "cert_index",
            "pool_id",
            "vrf_key",
            "pledge",
            "margin_cost",
            "fixed_cost",
            "reward_account",
            "owners",
            "metadata",
            "relays",
            "active_epoch"
          ]
        }
      },
      "tx_content_pool_retires": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "cert_index": {
              "type": "integer",
              "example": 0,
              "description": "Index of the certificate within the transaction"
            },
            "pool_id": {
              "type": "string",
              "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
              "description": "Bech32 stake pool ID"
            },
            "retiring_epoch": {
              "type": "integer",
              "example": 216,
              "description": "Epoch in which the pool becomes retired"
            }
          },
          "required": [
            "cert_index",
            "pool_id",
            "retiring_epoch"
          ]
        }
      },
      "tx_content_metadata": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string",
              "description": "Metadata label"
            },
            "json_metadata": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "additionalProperties": true
                }
              ],
              "description": "Content of the metadata"
            }
          },
          "required": [
            "label",
            "json_metadata"
          ]
        },
        "example": [
          {
            "label": "1967",
            "json_metadata": {
              "metadata": "https://nut.link/metadata.json",
              "hash": "6bf124f217d0e5a0a8adb1dbd8540e1334280d49ab861127868339f43b3948af"
            }
          },
          {
            "label": "1968",
            "json_metadata": {
              "ADAUSD": [
                {
                  "value": "0.10409800535729975",
                  "source": "ergoOracles"
                }
              ]
            }
          }
        ]
      },
      "tx_content_metadata_cbor": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string",
              "description": "Metadata label"
            },
            "cbor_metadata": {
              "deprecated": true,
              "type": "string",
              "nullable": true,
              "description": "Content of the CBOR metadata"
            },
            "metadata": {
              "type": "string",
              "nullable": true,
              "description": "Content of the CBOR metadata in hex"
            }
          },
          "required": [
            "label",
            "cbor_metadata",
            "metadata"
          ]
        },
        "example": [
          {
            "label": "1968",
            "cbor_metadata": "\\xa100a16b436f6d62696e6174696f6e8601010101010c",
            "metadata": "a100a16b436f6d62696e6174696f6e8601010101010c"
          }
        ]
      },
      "tx_content_redeemers": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_index": {
              "type": "integer",
              "example": 0,
              "description": "Index of the redeemer within the transaction"
            },
            "purpose": {
              "type": "string",
              "enum": [
                "spend",
                "mint",
                "cert",
                "reward"
              ],
              "example": "spend",
              "description": "Validation purpose"
            },
            "script_hash": {
              "type": "string",
              "example": "ec26b89af41bef0f7585353831cb5da42b5b37185e0c8a526143b824",
              "description": "Script hash"
            },
            "redeemer_data_hash": {
              "type": "string",
              "example": "923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec",
              "description": "Redeemer data hash"
            },
            "datum_hash": {
              "type": "string",
              "example": "923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec",
              "deprecated": true,
              "description": "Datum hash"
            },
            "unit_mem": {
              "type": "string",
              "example": "1700",
              "description": "The budget in Memory to run a script"
            },
            "unit_steps": {
              "type": "string",
              "example": "476468",
              "description": "The budget in CPU steps to run a script"
            },
            "fee": {
              "type": "string",
              "example": "172033",
              "description": "The fee consumed to run the script"
            }
          },
          "required": [
            "tx_index",
            "purpose",
            "unit_mem",
            "unit_steps",
            "script_hash",
            "redeemer_data_hash",
            "datum_hash",
            "fee"
          ]
        }
      },
      "tx_content_required_signers": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "witness_hash": {
              "type": "string",
              "example": "d52e11f3e48436dd42dbec6d88c239732e503b8b7a32af58e5f87625",
              "description": "Hash of the witness"
            }
          },
          "required": [
            "witness_hash"
          ]
        }
      },
      "tx_content_cbor": {
        "type": "object",
        "properties": {
          "cbor": {
            "type": "string",
            "description": "CBOR serialized transaction"
          }
        },
        "required": [
          "cbor"
        ],
        "example": {
          "cbor": "84a40081825820203e5b61e0949ffc8fe594727cf7ed73c7396cc2bd212af9a680c9423b5880eb00018282583900f0c60254ecb0addd4c7e40c28fd05b65014ab4c8ecece06c7dcee5a0724bf93336a8225e7ef152b41aea955173be91af19250edea1ddafab1a000f42408258390014beadb876d0a2a593fe2f1b539389e00731290910170e9a1be78e847d2ccdc7af469706878018739bcfde9ae23f009c4ae38aee0a4b4f3a1b0000000253fa0f93021a0002922d031a0303c827a100818258207d3ae39f9a1c916ac7c13f10c7d67c70b870c286a1af71485455c5022a3f391d5840e2f481acd1601a3f39fa976317bba685ddd774621a92611edaaa3df9f48a3b13d8b25ecb2f28b031c1602512418efed3033e463a0dcd22a856c808033cc9e00ff5f6"
        }
      },
      "account_content": {
        "type": "object",
        "properties": {
          "stake_address": {
            "type": "string",
            "example": "stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7",
            "description": "Bech32 stake address"
          },
          "active": {
            "type": "boolean",
            "example": true,
            "description": "Registration state of an account"
          },
          "active_epoch": {
            "type": "integer",
            "nullable": true,
            "example": 412,
            "description": "Epoch of the most recent action - registration or deregistration"
          },
          "controlled_amount": {
            "type": "string",
            "example": "619154618165",
            "description": "Balance of the account in Lovelaces"
          },
          "rewards_sum": {
            "type": "string",
            "example": "319154618165",
            "description": "Sum of all rewards for the account in the Lovelaces"
          },
          "withdrawals_sum": {
            "type": "string",
            "example": "12125369253",
            "description": "Sum of all the withdrawals for the account in Lovelaces"
          },
          "reserves_sum": {
            "type": "string",
            "example": "319154618165",
            "description": "Sum of all  funds from reserves for the account in the Lovelaces"
          },
          "treasury_sum": {
            "type": "string",
            "example": "12000000",
            "description": "Sum of all funds from treasury for the account in the Lovelaces"
          },
          "withdrawable_amount": {
            "type": "string",
            "example": "319154618165",
            "description": "Sum of available rewards that haven't been withdrawn yet for the account in the Lovelaces"
          },
          "pool_id": {
            "type": "string",
            "nullable": true,
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
            "description": "Bech32 pool ID to which this account is delegated"
          },
          "drep_id": {
            "type": "string",
            "nullable": true,
            "example": "drep15cfxz9exyn5rx0807zvxfrvslrjqfchrd4d47kv9e0f46uedqtc",
            "description": "Bech32 drep ID to which this account is delegated"
          }
        },
        "required": [
          "stake_address",
          "active",
          "active_epoch",
          "controlled_amount",
          "rewards_sum",
          "withdrawals_sum",
          "reserves_sum",
          "treasury_sum",
          "withdrawable_amount",
          "pool_id",
          "drep_id"
        ]
      },
      "account_reward_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "epoch": {
              "type": "integer",
              "description": "Epoch of the associated reward"
            },
            "amount": {
              "type": "string",
              "description": "Rewards for given epoch in Lovelaces"
            },
            "pool_id": {
              "type": "string",
              "description": "Bech32 pool ID being delegated to"
            },
            "type": {
              "type": "string",
              "enum": [
                "leader",
                "member",
                "pool_deposit_refund"
              ],
              "description": "Type of the reward"
            }
          },
          "required": [
            "epoch",
            "amount",
            "pool_id",
            "type"
          ]
        },
        "example": [
          {
            "epoch": 215,
            "amount": "12695385",
            "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
            "type": "member"
          },
          {
            "epoch": 216,
            "amount": "3586329",
            "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
            "type": "member"
          },
          {
            "epoch": 217,
            "amount": "1",
            "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
            "type": "member"
          },
          {
            "epoch": 217,
            "amount": "1337",
            "pool_id": "pool1cytwr0n7eas6du2h2xshl8ypa1yqr18f0erlhhjcuczysiunjcs",
            "type": "leader"
          },
          {
            "epoch": 218,
            "amount": "1395265",
            "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
            "type": "member"
          },
          {
            "epoch": 218,
            "amount": "500000000",
            "pool_id": "pool1cytwr0n7eas6du2h2xshl8ypa1yqr18f0erlhhjcuczysiunjcs",
            "type": "pool_deposit_refund"
          }
        ]
      },
      "account_history_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "active_epoch": {
              "type": "integer",
              "example": 210,
              "description": "Epoch in which the stake was active"
            },
            "amount": {
              "type": "string",
              "description": "Stake amount in Lovelaces"
            },
            "pool_id": {
              "type": "string",
              "description": "Bech32 ID of pool being delegated to"
            }
          },
          "required": [
            "active_epoch",
            "amount",
            "pool_id"
          ]
        },
        "example": [
          {
            "active_epoch": 210,
            "amount": "12695385",
            "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          {
            "active_epoch": 211,
            "amount": "22695385",
            "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          }
        ]
      },
      "account_delegation_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "active_epoch": {
              "type": "integer",
              "example": 210,
              "description": "Epoch in which the delegation becomes active"
            },
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction containing the delegation"
            },
            "amount": {
              "type": "string",
              "description": "Rewards for given epoch in Lovelaces"
            },
            "pool_id": {
              "type": "string",
              "description": "Bech32 ID of pool being delegated to"
            }
          },
          "required": [
            "active_epoch",
            "tx_hash",
            "amount",
            "pool_id"
          ]
        },
        "example": [
          {
            "active_epoch": 210,
            "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
            "amount": "12695385",
            "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          {
            "active_epoch": 242,
            "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
            "amount": "12691385",
            "pool_id": "pool1kchver88u3kygsak8wgll7htr8uxn5v35lfrsyy842nkscrzyvj"
          }
        ]
      },
      "account_registration_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction containing the (de)registration certificate"
            },
            "action": {
              "type": "string",
              "enum": [
                "registered",
                "deregistered"
              ],
              "description": "Action in the certificate"
            }
          },
          "required": [
            "tx_hash",
            "action"
          ]
        },
        "example": [
          {
            "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
            "action": "registered"
          },
          {
            "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
            "action": "deregistered"
          }
        ]
      },
      "account_withdrawal_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction containing the withdrawal"
            },
            "amount": {
              "type": "string",
              "description": "Withdrawal amount in Lovelaces"
            }
          },
          "required": [
            "tx_hash",
            "amount"
          ]
        },
        "example": [
          {
            "tx_hash": "48a9625c841eea0dd2bb6cf551eabe6523b7290c9ce34be74eedef2dd8f7ecc5",
            "amount": "454541212442"
          },
          {
            "tx_hash": "4230b0cbccf6f449f0847d8ad1d634a7a49df60d8c142bb8cc2dbc8ca03d9e34",
            "amount": "97846969"
          }
        ]
      },
      "account_mir_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction containing the MIR"
            },
            "amount": {
              "type": "string",
              "description": "MIR amount in Lovelaces"
            }
          },
          "required": [
            "tx_hash",
            "amount"
          ]
        },
        "example": [
          {
            "tx_hash": "69705bba1d687a816ff5a04ec0c358a1f1ef075ab7f9c6cc2763e792581cec6d",
            "amount": "2193707473"
          },
          {
            "tx_hash": "baaa77b63d4d7d2bb3ab02c9b85978c2092c336dede7f59e31ad65452d510c13",
            "amount": "14520198574"
          }
        ]
      },
      "account_addresses_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Address associated with the stake key"
            }
          },
          "required": [
            "address"
          ]
        },
        "example": [
          {
            "address": "addr1qx2kd28nq8ac5prwg32hhvudlwggpgfp8utlyqxu6wqgz62f79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sy0f4qd"
          },
          {
            "address": "addr1qys3czp8s9thc6u2fqed9yq3h24nyw28uk0m6mkgn9dkckjf79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9suth4w4"
          },
          {
            "address": "addr1q8j55h253zcvl326sk5qdt2n8z7eghzspe0ekxgncr796s2f79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sjmd35m"
          },
          {
            "address": "addr1q8f7gxrprank3drhx8k5grlux7ene0nlwun8y9thu8mc3yjf79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sls6vnt"
          }
        ]
      },
      "account_addresses_assets": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "The sum of all assets of all addresses associated with a given account",
          "properties": {
            "unit": {
              "type": "string",
              "format": "Concatenation of asset policy_id and hex-encoded asset_name",
              "description": "The unit of the value"
            },
            "quantity": {
              "type": "string",
              "description": "The quantity of the unit"
            }
          },
          "required": [
            "unit",
            "quantity"
          ]
        },
        "example": [
          {
            "unit": "d5e6bf0500378d4f0da4e8dde6becec7621cd8cbf5cbb9b87013d4cc537061636542756433343132",
            "quantity": "1"
          },
          {
            "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
            "quantity": "125"
          }
        ]
      },
      "account_addresses_total": {
        "type": "object",
        "properties": {
          "stake_address": {
            "type": "string",
            "description": "Bech32 encoded stake address",
            "example": "stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk"
          },
          "received_sum": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The sum of all the UTXO per asset for all addresses associated with the account",
              "properties": {
                "unit": {
                  "type": "string",
                  "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                  "description": "The unit of the value"
                },
                "quantity": {
                  "type": "string",
                  "description": "The quantity of the unit"
                }
              },
              "required": [
                "unit",
                "quantity"
              ]
            },
            "example": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              },
              {
                "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                "quantity": "12"
              }
            ]
          },
          "sent_sum": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The sum of all the UTXO per asset for all addresses associated with the account",
              "properties": {
                "unit": {
                  "type": "string",
                  "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                  "description": "The unit of the value"
                },
                "quantity": {
                  "type": "string",
                  "description": "The quantity of the unit"
                }
              },
              "required": [
                "unit",
                "quantity"
              ]
            },
            "example": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              },
              {
                "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                "quantity": "12"
              }
            ]
          },
          "tx_count": {
            "type": "integer",
            "example": 12,
            "description": "Count of all transactions for all addresses associated with the account"
          }
        },
        "required": [
          "stake_address",
          "received_sum",
          "sent_sum",
          "tx_count"
        ]
      },
      "account_utxo_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Bech32 encoded addresses",
              "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
            },
            "tx_hash": {
              "type": "string",
              "description": "Transaction hash of the UTXO"
            },
            "tx_index": {
              "type": "integer",
              "deprecated": true,
              "description": "UTXO index in the transaction"
            },
            "output_index": {
              "type": "integer",
              "description": "UTXO index in the transaction"
            },
            "amount": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "The sum of all the UTXO per asset",
                "properties": {
                  "unit": {
                    "type": "string",
                    "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                    "description": "The unit of the value"
                  },
                  "quantity": {
                    "type": "string",
                    "description": "The quantity of the unit"
                  }
                },
                "required": [
                  "unit",
                  "quantity"
                ]
              }
            },
            "block": {
              "type": "string",
              "description": "Block hash of the UTXO"
            },
            "data_hash": {
              "type": "string",
              "nullable": true,
              "description": "The hash of the transaction output datum"
            },
            "inline_datum": {
              "type": "string",
              "nullable": true,
              "description": "CBOR encoded inline datum",
              "example": "19a6aa"
            },
            "reference_script_hash": {
              "type": "string",
              "nullable": true,
              "description": "The hash of the reference script of the output",
              "example": "13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"
            }
          },
          "required": [
            "address",
            "tx_hash",
            "tx_index",
            "output_index",
            "amount",
            "block",
            "data_hash",
            "inline_datum",
            "reference_script_hash"
          ]
        },
        "example": [
          {
            "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
            "tx_hash": "39a7a284c2a0948189dc45dec670211cd4d72f7b66c5726c08d9b3df11e44d58",
            "output_index": 0,
            "amount": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              }
            ],
            "block": "7eb8e27d18686c7db9a18f8bbcfe34e3fed6e047afaa2d969904d15e934847e6",
            "data_hash": "9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710",
            "inline_datum": null,
            "reference_script_hash": null
          },
          {
            "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
            "tx_hash": "4c4e67bafa15e742c13c592b65c8f74c769cd7d9af04c848099672d1ba391b49",
            "output_index": 0,
            "amount": [
              {
                "unit": "lovelace",
                "quantity": "729235000"
              }
            ],
            "block": "953f1b80eb7c11a7ffcd67cbd4fde66e824a451aca5a4065725e5174b81685b7",
            "data_hash": null,
            "inline_datum": null,
            "reference_script_hash": null
          },
          {
            "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
            "tx_hash": "768c63e27a1c816a83dc7b07e78af673b2400de8849ea7e7b734ae1333d100d2",
            "output_index": 1,
            "amount": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              },
              {
                "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                "quantity": "12"
              }
            ],
            "block": "5c571f83fe6c784d3fbc223792627ccf0eea96773100f9aedecf8b1eda4544d7",
            "data_hash": null,
            "inline_datum": null,
            "reference_script_hash": null
          }
        ]
      },
      "mempool_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction"
            }
          },
          "required": [
            "tx_hash"
          ]
        },
        "example": [
          {
            "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"
          }
        ]
      },
      "mempool_tx_content": {
        "type": "object",
        "properties": {
          "tx": {
            "type": "object",
            "properties": {
              "hash": {
                "type": "string",
                "example": "1e043f100dce12d107f679685acd2fc0610e10f72a92d412794c9773d11d8477",
                "description": "Transaction hash"
              },
              "output_amount": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "The sum of all the UTXO per asset",
                  "properties": {
                    "unit": {
                      "type": "string",
                      "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                      "description": "The unit of the value"
                    },
                    "quantity": {
                      "type": "string",
                      "description": "The quantity of the unit"
                    }
                  },
                  "required": [
                    "unit",
                    "quantity"
                  ]
                },
                "example": [
                  {
                    "unit": "lovelace",
                    "quantity": "42000000"
                  },
                  {
                    "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                    "quantity": "12"
                  }
                ]
              },
              "fees": {
                "type": "string",
                "example": "182485",
                "description": "Fees of the transaction in Lovelaces"
              },
              "deposit": {
                "type": "string",
                "example": "0",
                "description": "Deposit within the transaction in Lovelaces"
              },
              "size": {
                "type": "integer",
                "example": 433,
                "description": "Size of the transaction in Bytes"
              },
              "invalid_before": {
                "type": "string",
                "nullable": true,
                "example": null,
                "description": "Left (included) endpoint of the timelock validity intervals"
              },
              "invalid_hereafter": {
                "type": "string",
                "nullable": true,
                "example": "13885913",
                "description": "Right (excluded) endpoint of the timelock validity intervals"
              },
              "utxo_count": {
                "type": "integer",
                "example": 4,
                "description": "Count of UTXOs within the transaction"
              },
              "withdrawal_count": {
                "type": "integer",
                "example": 0,
                "description": "Count of the withdrawals within the transaction"
              },
              "mir_cert_count": {
                "type": "integer",
                "example": 0,
                "description": "Count of the MIR certificates within the transaction"
              },
              "delegation_count": {
                "type": "integer",
                "example": 0,
                "description": "Count of the delegations within the transaction"
              },
              "stake_cert_count": {
                "type": "integer",
                "example": 0,
                "description": "Count of the stake keys (de)registration within the transaction"
              },
              "pool_update_count": {
                "type": "integer",
                "example": 0,
                "description": "Count of the stake pool registration and update certificates within the transaction"
              },
              "pool_retire_count": {
                "type": "integer",
                "example": 0,
                "description": "Count of the stake pool retirement certificates within the transaction"
              },
              "asset_mint_or_burn_count": {
                "type": "integer",
                "example": 0,
                "description": "Count of asset mints and burns within the transaction"
              },
              "redeemer_count": {
                "type": "integer",
                "example": 0,
                "description": "Count of redeemers within the transaction"
              },
              "valid_contract": {
                "type": "boolean",
                "example": true,
                "description": "True if contract script passed validation"
              }
            },
            "required": [
              "hash",
              "output_amount",
              "fees",
              "deposit",
              "size",
              "invalid_before",
              "invalid_hereafter",
              "utxo_count",
              "withdrawal_count",
              "mir_cert_count",
              "delegation_count",
              "stake_cert_count",
              "pool_update_count",
              "pool_retire_count",
              "asset_mint_or_burn_count",
              "redeemer_count",
              "valid_contract"
            ]
          },
          "inputs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv",
                  "description": "Input address"
                },
                "tx_hash": {
                  "type": "string",
                  "example": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0",
                  "description": "Hash of the UTXO transaction"
                },
                "output_index": {
                  "type": "integer",
                  "example": 0,
                  "description": "UTXO index in the transaction"
                },
                "collateral": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the input is a collateral consumed on script validation failure"
                },
                "reference": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the input is a reference transaction input"
                }
              },
              "required": [
                "tx_hash",
                "output_index",
                "collateral"
              ]
            }
          },
          "outputs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string",
                  "example": "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv",
                  "description": "Output address"
                },
                "amount": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "The sum of all the UTXO per asset",
                    "properties": {
                      "unit": {
                        "type": "string",
                        "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                        "description": "The unit of the value"
                      },
                      "quantity": {
                        "type": "string",
                        "description": "The quantity of the unit"
                      }
                    },
                    "required": [
                      "unit",
                      "quantity"
                    ]
                  },
                  "example": [
                    {
                      "unit": "lovelace",
                      "quantity": "42000000"
                    },
                    {
                      "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                      "quantity": "12"
                    }
                  ]
                },
                "output_index": {
                  "type": "integer",
                  "example": 0,
                  "description": "UTXO index in the transaction"
                },
                "data_hash": {
                  "type": "string",
                  "nullable": true,
                  "description": "The hash of the transaction output datum",
                  "example": "9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710"
                },
                "inline_datum": {
                  "type": "string",
                  "nullable": true,
                  "description": "CBOR encoded inline datum",
                  "example": "19a6aa"
                },
                "collateral": {
                  "type": "boolean",
                  "example": false,
                  "description": "Whether the output is a collateral output"
                },
                "reference_script_hash": {
                  "type": "string",
                  "nullable": true,
                  "description": "The hash of the reference script of the output",
                  "example": "13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"
                }
              },
              "required": [
                "address",
                "amount",
                "output_index",
                "data_hash",
                "inline_datum",
                "collateral",
                "reference_script_hash"
              ]
            }
          },
          "redeemers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tx_index": {
                  "type": "integer",
                  "example": 0,
                  "description": "Index of the redeemer within the transaction"
                },
                "purpose": {
                  "type": "string",
                  "enum": [
                    "spend",
                    "mint",
                    "cert",
                    "reward"
                  ],
                  "example": "spend",
                  "description": "Validation purpose"
                },
                "unit_mem": {
                  "type": "string",
                  "example": "1700",
                  "description": "The budget in Memory to run a script"
                },
                "unit_steps": {
                  "type": "string",
                  "example": "476468",
                  "description": "The budget in CPU steps to run a script"
                }
              },
              "required": [
                "tx_index",
                "purpose",
                "unit_mem",
                "unit_steps"
              ]
            }
          }
        },
        "required": [
          "tx",
          "inputs",
          "outputs"
        ]
      },
      "mempool_addresses_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction"
            }
          },
          "required": [
            "tx_hash"
          ]
        },
        "example": [
          {
            "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"
          }
        ]
      },
      "tx_metadata_labels": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string",
              "description": "Metadata label"
            },
            "cip10": {
              "type": "string",
              "nullable": true,
              "description": "CIP10 defined description"
            },
            "count": {
              "type": "string",
              "description": "The count of metadata entries with a specific label"
            }
          },
          "required": [
            "label",
            "cip10",
            "count"
          ]
        },
        "example": [
          {
            "label": "1990",
            "cip10": null,
            "count": "1"
          },
          {
            "label": "1967",
            "cip10": "nut.link metadata oracles registry",
            "count": "3"
          },
          {
            "label": "1968",
            "cip10": "nut.link metadata oracles data points",
            "count": "16321"
          }
        ]
      },
      "tx_metadata_label_json": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Transaction hash that contains the specific metadata"
            },
            "json_metadata": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "additionalProperties": true
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Content of the JSON metadata"
            }
          },
          "required": [
            "tx_hash",
            "json_metadata"
          ]
        },
        "example": [
          {
            "tx_hash": "257d75c8ddb0434e9b63e29ebb6241add2b835a307aa33aedba2effe09ed4ec8",
            "json_metadata": {
              "ADAUSD": [
                {
                  "value": "0.10409800535729975",
                  "source": "ergoOracles"
                }
              ]
            }
          },
          {
            "tx_hash": "e865f2cc01ca7381cf98dcdc4de07a5e8674b8ea16e6a18e3ed60c186fde2b9c",
            "json_metadata": {
              "ADAUSD": [
                {
                  "value": "0.15409850555139935",
                  "source": "ergoOracles"
                }
              ]
            }
          },
          {
            "tx_hash": "4237501da3cfdd53ade91e8911e764bd0699d88fd43b12f44a1f459b89bc91be",
            "json_metadata": null
          }
        ]
      },
      "tx_metadata_label_cbor": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Transaction hash that contains the specific metadata"
            },
            "cbor_metadata": {
              "deprecated": true,
              "type": "string",
              "nullable": true,
              "description": "Content of the CBOR metadata"
            },
            "metadata": {
              "type": "string",
              "nullable": true,
              "description": "Content of the CBOR metadata in hex"
            }
          },
          "required": [
            "tx_hash",
            "cbor_metadata",
            "metadata"
          ]
        },
        "example": [
          {
            "tx_hash": "257d75c8ddb0434e9b63e29ebb6241add2b835a307aa33aedba2effe09ed4ec8",
            "cbor_metadata": null,
            "metadata": null
          },
          {
            "tx_hash": "e865f2cc01ca7381cf98dcdc4de07a5e8674b8ea16e6a18e3ed60c186fde2b9c",
            "cbor_metadata": null,
            "metadata": null
          },
          {
            "tx_hash": "4237501da3cfdd53ade91e8911e764bd0699d88fd43b12f44a1f459b89bc91be",
            "cbor_metadata": "\\xa100a16b436f6d62696e6174696f6e8601010101010c",
            "metadata": "a100a16b436f6d62696e6174696f6e8601010101010c"
          }
        ]
      },
      "address_content": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Bech32 encoded addresses",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          },
          "amount": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The sum of all the UTXO per asset",
              "properties": {
                "unit": {
                  "type": "string",
                  "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                  "description": "The unit of the value"
                },
                "quantity": {
                  "type": "string",
                  "description": "The quantity of the unit"
                }
              },
              "required": [
                "unit",
                "quantity"
              ]
            },
            "example": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              },
              {
                "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                "quantity": "12"
              }
            ]
          },
          "stake_address": {
            "type": "string",
            "nullable": true,
            "example": "stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7",
            "description": "Stake address that controls the key"
          },
          "type": {
            "type": "string",
            "enum": [
              "byron",
              "shelley"
            ],
            "example": "shelley",
            "description": "Address era"
          },
          "script": {
            "type": "boolean",
            "example": false,
            "description": "True if this is a script address"
          }
        },
        "required": [
          "address",
          "amount",
          "stake_address",
          "type",
          "script"
        ]
      },
      "address_content_extended": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Bech32 encoded addresses",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          },
          "amount": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The sum of all the UTXO per asset",
              "properties": {
                "unit": {
                  "type": "string",
                  "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                  "description": "The unit of the value"
                },
                "quantity": {
                  "type": "string",
                  "description": "The quantity of the unit"
                },
                "decimals": {
                  "type": "integer",
                  "nullable": true,
                  "description": "Number of decimal places of the asset unit. Primary data source is CIP68 reference NFT with a fallback to off-chain metadata."
                },
                "has_nft_onchain_metadata": {
                  "type": "boolean",
                  "description": "True if the latest minting transaction includes metadata (best-effort)"
                }
              },
              "required": [
                "unit",
                "quantity",
                "decimals",
                "has_nft_onchain_metadata"
              ]
            },
            "example": [
              {
                "unit": "lovelace",
                "quantity": "42000000",
                "decimals": 6,
                "has_nft_onchain_metadata": false
              },
              {
                "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                "quantity": "12",
                "decimals": null,
                "has_nft_onchain_metadata": true
              }
            ]
          },
          "stake_address": {
            "type": "string",
            "nullable": true,
            "example": "stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7",
            "description": "Stake address that controls the key"
          },
          "type": {
            "type": "string",
            "enum": [
              "byron",
              "shelley"
            ],
            "example": "shelley",
            "description": "Address era"
          },
          "script": {
            "type": "boolean",
            "example": false,
            "description": "True if this is a script address"
          }
        },
        "required": [
          "address",
          "amount",
          "stake_address",
          "type",
          "script"
        ]
      },
      "address_content_total": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Bech32 encoded address",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          },
          "received_sum": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The sum of all the UTXO per asset",
              "properties": {
                "unit": {
                  "type": "string",
                  "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                  "description": "The unit of the value"
                },
                "quantity": {
                  "type": "string",
                  "description": "The quantity of the unit"
                }
              },
              "required": [
                "unit",
                "quantity"
              ]
            },
            "example": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              },
              {
                "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                "quantity": "12"
              }
            ]
          },
          "sent_sum": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The sum of all the UTXO per asset",
              "properties": {
                "unit": {
                  "type": "string",
                  "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                  "description": "The unit of the value"
                },
                "quantity": {
                  "type": "string",
                  "description": "The quantity of the unit"
                }
              },
              "required": [
                "unit",
                "quantity"
              ]
            },
            "example": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              },
              {
                "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                "quantity": "12"
              }
            ]
          },
          "tx_count": {
            "type": "integer",
            "example": 12,
            "description": "Count of all transactions on the address"
          }
        },
        "required": [
          "address",
          "received_sum",
          "sent_sum",
          "tx_count"
        ]
      },
      "address_utxo_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Bech32 encoded addresses - useful when querying by payment_cred",
              "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
            },
            "tx_hash": {
              "type": "string",
              "description": "Transaction hash of the UTXO"
            },
            "tx_index": {
              "type": "integer",
              "deprecated": true,
              "description": "UTXO index in the transaction"
            },
            "output_index": {
              "type": "integer",
              "description": "UTXO index in the transaction"
            },
            "amount": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "The sum of all the UTXO per asset",
                "properties": {
                  "unit": {
                    "type": "string",
                    "format": "Lovelace or concatenation of asset policy_id and hex-encoded asset_name",
                    "description": "The unit of the value"
                  },
                  "quantity": {
                    "type": "string",
                    "description": "The quantity of the unit"
                  }
                },
                "required": [
                  "unit",
                  "quantity"
                ]
              }
            },
            "block": {
              "type": "string",
              "description": "Block hash of the UTXO"
            },
            "data_hash": {
              "type": "string",
              "nullable": true,
              "description": "The hash of the transaction output datum"
            },
            "inline_datum": {
              "type": "string",
              "nullable": true,
              "description": "CBOR encoded inline datum",
              "example": "19a6aa"
            },
            "reference_script_hash": {
              "type": "string",
              "nullable": true,
              "description": "The hash of the reference script of the output",
              "example": "13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"
            }
          },
          "required": [
            "address",
            "tx_hash",
            "tx_index",
            "output_index",
            "amount",
            "block",
            "data_hash",
            "inline_datum",
            "reference_script_hash"
          ]
        },
        "example": [
          {
            "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
            "tx_hash": "39a7a284c2a0948189dc45dec670211cd4d72f7b66c5726c08d9b3df11e44d58",
            "output_index": 0,
            "amount": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              }
            ],
            "block": "7eb8e27d18686c7db9a18f8bbcfe34e3fed6e047afaa2d969904d15e934847e6",
            "data_hash": "9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710",
            "inline_datum": null,
            "reference_script_hash": null
          },
          {
            "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
            "tx_hash": "4c4e67bafa15e742c13c592b65c8f74c769cd7d9af04c848099672d1ba391b49",
            "output_index": 0,
            "amount": [
              {
                "unit": "lovelace",
                "quantity": "729235000"
              }
            ],
            "block": "953f1b80eb7c11a7ffcd67cbd4fde66e824a451aca5a4065725e5174b81685b7",
            "data_hash": null,
            "inline_datum": null,
            "reference_script_hash": null
          },
          {
            "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
            "tx_hash": "768c63e27a1c816a83dc7b07e78af673b2400de8849ea7e7b734ae1333d100d2",
            "output_index": 1,
            "amount": [
              {
                "unit": "lovelace",
                "quantity": "42000000"
              },
              {
                "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
                "quantity": "12"
              }
            ],
            "block": "5c571f83fe6c784d3fbc223792627ccf0eea96773100f9aedecf8b1eda4544d7",
            "data_hash": null,
            "inline_datum": null,
            "reference_script_hash": null
          }
        ]
      },
      "address_txs_content": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Hash of the transaction"
        },
        "example": [
          "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
          "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0"
        ]
      },
      "address_transactions_content": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction"
            },
            "tx_index": {
              "type": "integer",
              "description": "Transaction index within the block"
            },
            "block_height": {
              "type": "integer",
              "description": "Block height"
            },
            "block_time": {
              "type": "integer",
              "description": "Block creation time in UNIX time"
            }
          },
          "required": [
            "tx_hash",
            "tx_index",
            "block_height",
            "block_time"
          ]
        },
        "example": [
          {
            "tx_hash": "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
            "tx_index": 6,
            "block_height": 69,
            "block_time": 1635505891
          },
          {
            "tx_hash": "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
            "tx_index": 9,
            "block_height": 4547,
            "block_time": 1635505987
          },
          {
            "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
            "tx_index": 0,
            "block_height": 564654,
            "block_time": 1834505492
          }
        ]
      },
      "pool_list": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Bech32 encoded pool ID"
        },
        "example": [
          "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
          "pool1hn7hlwrschqykupwwrtdfkvt2u4uaxvsgxyh6z63703p2knj288",
          "pool1ztjyjfsh432eqetadf82uwuxklh28xc85zcphpwq6mmezavzad2"
        ]
      },
      "pool_list_extended": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pool_id": {
              "type": "string",
              "example": "pool1z5uqdk7dzdxaae5633fqfcu2eqzy3a3rgtuvy087fdld7yws0xt",
              "description": "Bech32 encoded pool ID"
            },
            "hex": {
              "type": "string",
              "example": "0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735",
              "description": "Hexadecimal pool ID."
            },
            "active_stake": {
              "type": "string",
              "example": "4200000000",
              "description": "Active delegated amount"
            },
            "live_stake": {
              "type": "string",
              "example": "6900000000",
              "description": "Currently delegated amount"
            },
            "live_saturation": {
              "type": "number",
              "example": 0.93
            },
            "blocks_minted": {
              "type": "integer",
              "example": 69,
              "description": "Total minted blocks"
            },
            "declared_pledge": {
              "type": "string",
              "example": "5000000000",
              "description": "Stake pool certificate pledge"
            },
            "margin_cost": {
              "type": "number",
              "example": 0.05,
              "description": "Margin tax cost of the stake pool"
            },
            "fixed_cost": {
              "type": "string",
              "example": "340000000",
              "description": "Fixed tax cost of the stake pool"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "nullable": true,
                  "example": "https://stakenuts.com/mainnet.json",
                  "description": "URL to the stake pool metadata"
                },
                "hash": {
                  "type": "string",
                  "nullable": true,
                  "example": "47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c",
                  "description": "Hash of the metadata file"
                },
                "ticker": {
                  "type": "string",
                  "nullable": true,
                  "example": "NUTS",
                  "description": "Ticker of the stake pool"
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "example": "Stake Nuts",
                  "description": "Name of the stake pool"
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "example": "The best pool ever",
                  "description": "Description of the stake pool"
                },
                "homepage": {
                  "type": "string",
                  "nullable": true,
                  "example": "https://stakentus.com/",
                  "description": "Home page of the stake pool"
                }
              },
              "required": [
                "pool_id",
                "hex",
                "url",
                "hash",
                "ticker",
                "name",
                "description",
                "homepage"
              ]
            }
          },
          "required": [
            "pool_id",
            "hex",
            "active_stake",
            "live_stake",
            "blocks_minted",
            "live_saturation",
            "declared_pledge",
            "margin_cost",
            "fixed_cost"
          ]
        },
        "example": [
          {
            "pool_id": "pool19u64770wqp6s95gkajc8udheske5e6ljmpq33awxk326zjaza0q",
            "hex": "2f355f79ee007502d116ecb07e36f985b34cebf2d84118f5c6b455a1",
            "active_stake": "1541200000",
            "live_stake": "1541400000",
            "blocks_minted": {
              "type": "integer",
              "example": 69,
              "description": "Total minted blocks"
            },
            "live_saturation": {
              "type": "number",
              "example": 0.93
            },
            "declared_pledge": {
              "type": "string",
              "example": "5000000000",
              "description": "Stake pool certificate pledge"
            },
            "margin_cost": {
              "type": "number",
              "example": 0.05,
              "description": "Margin tax cost of the stake pool"
            },
            "fixed_cost": {
              "type": "string",
              "example": "340000000",
              "description": "Fixed tax cost of the stake pool"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "nullable": true,
                  "example": "https://stakenuts.com/mainnet.json",
                  "description": "URL to the stake pool metadata"
                },
                "hash": {
                  "type": "string",
                  "nullable": true,
                  "example": "47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c",
                  "description": "Hash of the metadata file"
                },
                "ticker": {
                  "type": "string",
                  "nullable": true,
                  "example": "NUTS",
                  "description": "Ticker of the stake pool"
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "example": "Stake Nuts",
                  "description": "Name of the stake pool"
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "example": "The best pool ever",
                  "description": "Description of the stake pool"
                },
                "homepage": {
                  "type": "string",
                  "nullable": true,
                  "example": "https://stakentus.com/",
                  "description": "Home page of the stake pool"
                }
              }
            }
          },
          {
            "pool_id": "pool1dvla4zq98hpvacv20snndupjrqhuc79zl6gjap565nku6et5zdx",
            "hex": "6b3fda88053dc2cee18a7c2736f032182fcc78a2fe912e869aa4edcd",
            "active_stake": "22200000",
            "live_stake": "48955550",
            "blocks_minted": {
              "type": "integer",
              "example": 69,
              "description": "Total minted blocks"
            },
            "live_saturation": {
              "type": "number",
              "example": 0.93
            },
            "declared_pledge": {
              "type": "string",
              "example": "5000000000",
              "description": "Stake pool certificate pledge"
            },
            "margin_cost": {
              "type": "number",
              "example": 0.05,
              "description": "Margin tax cost of the stake pool"
            },
            "fixed_cost": {
              "type": "string",
              "example": "340000000",
              "description": "Fixed tax cost of the stake pool"
            },
            "metadata": null
          },
          {
            "pool_id": "pool1wvccajt4eugjtf3k0ja3exjqdj7t8egsujwhcw4tzj4rzsxzw5w",
            "hex": "73318ec975cf1125a6367cbb1c9a406cbcb3e510e49d7c3aab14aa31",
            "active_stake": "9989541215",
            "live_stake": "168445464878",
            "blocks_minted": {
              "type": "integer",
              "example": 69,
              "description": "Total minted blocks"
            },
            "live_saturation": {
              "type": "number",
              "example": 0.93
            },
            "declared_pledge": {
              "type": "string",
              "example": "5000000000",
              "description": "Stake pool certificate pledge"
            },
            "margin_cost": {
              "type": "number",
              "example": 0.05,
              "description": "Margin tax cost of the stake pool"
            },
            "fixed_cost": {
              "type": "string",
              "example": "340000000",
              "description": "Fixed tax cost of the stake pool"
            },
            "metadata": null
          }
        ]
      },
      "pool_list_retire": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "pool_id": {
              "type": "string",
              "example": "pool1z5uqdk7dzdxaae5633fqfcu2eqzy3a3rgtuvy087fdld7yws0xt",
              "description": "Bech32 encoded pool ID"
            },
            "epoch": {
              "type": "integer",
              "example": 242,
              "description": "Retirement epoch number"
            }
          },
          "required": [
            "pool_id",
            "epoch"
          ]
        },
        "example": [
          {
            "pool_id": "pool19u64770wqp6s95gkajc8udheske5e6ljmpq33awxk326zjaza0q",
            "epoch": 225
          },
          {
            "pool_id": "pool1dvla4zq98hpvacv20snndupjrqhuc79zl6gjap565nku6et5zdx",
            "epoch": 215
          },
          {
            "pool_id": "pool1wvccajt4eugjtf3k0ja3exjqdj7t8egsujwhcw4tzj4rzsxzw5w",
            "epoch": 231
          }
        ]
      },
      "pool": {
        "type": "object",
        "properties": {
          "pool_id": {
            "type": "string",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
            "description": "Bech32 pool ID"
          },
          "hex": {
            "type": "string",
            "example": "0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735",
            "description": "Hexadecimal pool ID."
          },
          "vrf_key": {
            "type": "string",
            "example": "0b5245f9934ec2151116fb8ec00f35fd00e0aa3b075c4ed12cce440f999d8233",
            "description": "VRF key hash"
          },
          "blocks_minted": {
            "type": "integer",
            "example": 69,
            "description": "Total minted blocks"
          },
          "blocks_epoch": {
            "type": "integer",
            "example": 4,
            "description": "Number of blocks minted in the current epoch"
          },
          "live_stake": {
            "type": "string",
            "example": "6900000000"
          },
          "live_size": {
            "type": "number",
            "example": 0.42
          },
          "live_saturation": {
            "type": "number",
            "example": 0.93
          },
          "live_delegators": {
            "type": "number",
            "example": 127
          },
          "active_stake": {
            "type": "string",
            "example": "4200000000"
          },
          "active_size": {
            "type": "number",
            "example": 0.43
          },
          "declared_pledge": {
            "type": "string",
            "example": "5000000000",
            "description": "Stake pool certificate pledge"
          },
          "live_pledge": {
            "type": "string",
            "example": "5000000001",
            "description": "Stake pool current pledge"
          },
          "margin_cost": {
            "type": "number",
            "example": 0.05,
            "description": "Margin tax cost of the stake pool"
          },
          "fixed_cost": {
            "type": "string",
            "example": "340000000",
            "description": "Fixed tax cost of the stake pool"
          },
          "reward_account": {
            "type": "string",
            "example": "stake1uxkptsa4lkr55jleztw43t37vgdn88l6ghclfwuxld2eykgpgvg3f",
            "description": "Bech32 reward account of the stake pool"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Bech32 accounts of the pool owners"
            },
            "example": [
              "stake1u98nnlkvkk23vtvf9273uq7cph5ww6u2yq2389psuqet90sv4xv9v"
            ]
          },
          "registration": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Hash of the transaction including registration"
            },
            "example": [
              "9f83e5484f543e05b52e99988272a31da373f3aab4c064c76db96643a355d9dc",
              "7ce3b8c433bf401a190d58c8c483d8e3564dfd29ae8633c8b1b3e6c814403e95",
              "3e6e1200ce92977c3fe5996bd4d7d7e192bcb7e231bc762f9f240c76766535b9"
            ]
          },
          "retirement": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Hash of the transaction including retirement",
              "example": "252f622976d39e646815db75a77289cf16df4ad2b287dd8e3a889ce14c13d1a8"
            }
          }
        },
        "required": [
          "pool_id",
          "hex",
          "vrf_key",
          "blocks_minted",
          "blocks_epoch",
          "live_stake",
          "live_size",
          "live_saturation",
          "live_delegators",
          "active_stake",
          "active_size",
          "declared_pledge",
          "live_pledge",
          "margin_cost",
          "fixed_cost",
          "reward_account",
          "owners",
          "registration",
          "retirement"
        ]
      },
      "pool_history": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "epoch": {
              "type": "integer",
              "example": 233,
              "description": "Epoch number"
            },
            "blocks": {
              "type": "integer",
              "example": 22,
              "description": "Number of blocks created by pool"
            },
            "active_stake": {
              "type": "string",
              "example": "20485965693569",
              "description": "Active (Snapshot of live stake 2 epochs ago) stake in Lovelaces"
            },
            "active_size": {
              "type": "number",
              "example": 1.2345,
              "description": "Pool size (percentage) of overall active stake at that epoch"
            },
            "delegators_count": {
              "type": "integer",
              "example": 115,
              "description": "Number of delegators for epoch"
            },
            "rewards": {
              "type": "string",
              "example": "206936253674159",
              "description": "Total rewards received before distribution to delegators"
            },
            "fees": {
              "type": "string",
              "example": "1290968354",
              "description": "Pool operator rewards"
            }
          },
          "required": [
            "epoch",
            "blocks",
            "active_stake",
            "active_size",
            "delegators_count",
            "rewards",
            "fees"
          ]
        }
      },
      "pool_metadata": {
        "type": "object",
        "properties": {
          "pool_id": {
            "type": "string",
            "example": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
            "description": "Bech32 pool ID"
          },
          "hex": {
            "type": "string",
            "example": "0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735",
            "description": "Hexadecimal pool ID"
          },
          "url": {
            "type": "string",
            "nullable": true,
            "example": "https://stakenuts.com/mainnet.json",
            "description": "URL to the stake pool metadata"
          },
          "hash": {
            "type": "string",
            "nullable": true,
            "example": "47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c",
            "description": "Hash of the metadata file"
          },
          "ticker": {
            "type": "string",
            "nullable": true,
            "example": "NUTS",
            "description": "Ticker of the stake pool"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Stake Nuts",
            "description": "Name of the stake pool"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "The best pool ever",
            "description": "Description of the stake pool"
          },
          "homepage": {
            "type": "string",
            "nullable": true,
            "example": "https://stakentus.com/",
            "description": "Home page of the stake pool"
          }
        },
        "required": [
          "pool_id",
          "hex",
          "url",
          "hash",
          "ticker",
          "name",
          "description",
          "homepage"
        ]
      },
      "empty_object": {
        "type": "object"
      },
      "pool_relays": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "ipv4": {
              "type": "string",
              "nullable": true,
              "example": "4.4.4.4",
              "description": "IPv4 address of the relay"
            },
            "ipv6": {
              "type": "string",
              "nullable": true,
              "example": "https://stakenuts.com/mainnet.json",
              "description": "IPv6 address of the relay"
            },
            "dns": {
              "type": "string",
              "nullable": true,
              "example": "relay1.stakenuts.com",
              "description": "DNS name of the relay"
            },
            "dns_srv": {
              "type": "string",
              "nullable": true,
              "example": "_relays._tcp.relays.stakenuts.com",
              "description": "DNS SRV entry of the relay"
            },
            "port": {
              "type": "integer",
              "example": 3001,
              "description": "Network port of the relay"
            }
          },
          "required": [
            "ipv4",
            "ipv6",
            "dns",
            "dns_srv",
            "port"
          ]
        }
      },
      "pool_delegators": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Bech32 encoded stake addresses"
            },
            "live_stake": {
              "type": "string",
              "description": "Currently delegated amount"
            }
          },
          "required": [
            "address",
            "live_stake"
          ]
        },
        "example": [
          {
            "address": "stake1ux4vspfvwuus9uwyp5p3f0ky7a30jq5j80jxse0fr7pa56sgn8kha",
            "live_stake": "1137959159981411"
          },
          {
            "address": "stake1uylayej7esmarzd4mk4aru37zh9yz0luj3g9fsvgpfaxulq564r5u",
            "live_stake": "16958865648"
          },
          {
            "address": "stake1u8lr2pnrgf8f7vrs9lt79hc3sxm8s2w4rwvgpncks3axx6q93d4ck",
            "live_stake": "18605647"
          }
        ]
      },
      "pool_blocks": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Block hashes"
        },
        "example": [
          "d8982ca42cfe76b747cc681d35d671050a9e41e9cfe26573eb214e94fe6ff21d",
          "026436c539e2ce84c7f77ffe669f4e4bbbb3b9c53512e5857dcba8bb0b4e9a8c",
          "bcc8487f419b8c668a18ea2120822a05df6dfe1de1f0fac3feba88cf760f303c",
          "86bf7b4a274e0f8ec9816171667c1b4a0cfc661dc21563f271acea9482b62df7"
        ]
      },
      "pool_updates": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Transaction ID"
            },
            "cert_index": {
              "type": "integer",
              "description": "Certificate within the transaction"
            },
            "action": {
              "type": "string",
              "enum": [
                "registered",
                "deregistered"
              ],
              "description": "Action in the certificate"
            }
          },
          "required": [
            "tx_hash",
            "cert_index",
            "action"
          ]
        },
        "example": [
          {
            "tx_hash": "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
            "cert_index": 0,
            "action": "registered"
          },
          {
            "tx_hash": "9c190bc1ac88b2ab0c05a82d7de8b71b67a9316377e865748a89d4426c0d3005",
            "cert_index": 0,
            "action": "deregistered"
          },
          {
            "tx_hash": "e14a75b0eb2625de7055f1f580d70426311b78e0d36dd695a6bdc96c7b3d80e0",
            "cert_index": 1,
            "action": "registered"
          }
        ]
      },
      "pool_votes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the proposal transaction."
            },
            "cert_index": {
              "type": "integer",
              "description": "Index of the certificate within the proposal transaction."
            },
            "vote": {
              "type": "string",
              "enum": [
                "yes",
                "no",
                "abstain"
              ],
              "description": "The Vote. Can be one of yes, no, abstain."
            }
          },
          "required": [
            "tx_hash",
            "cert_index",
            "vote"
          ]
        },
        "example": [
          {
            "tx_hash": "b302de601defdf11a5261ed31a263804dac4a582a888c998ce24dec5",
            "cert_index": 2,
            "vote": "yes"
          }
        ]
      },
      "assets": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "asset": {
              "type": "string",
              "format": "Concatenation of the policy_id and hex-encoded asset_name",
              "description": "Asset identifier"
            },
            "quantity": {
              "type": "string",
              "description": "Current asset quantity"
            }
          },
          "required": [
            "asset",
            "quantity"
          ]
        },
        "example": [
          {
            "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
            "quantity": "1"
          },
          {
            "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e75d",
            "quantity": "100000"
          },
          {
            "asset": "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
            "quantity": "18605647"
          }
        ]
      },
      "asset": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "string",
            "example": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
            "description": "Hex-encoded asset full name"
          },
          "policy_id": {
            "type": "string",
            "example": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a7",
            "description": "Policy ID of the asset"
          },
          "asset_name": {
            "type": "string",
            "nullable": true,
            "example": "6e7574636f696e",
            "description": "Hex-encoded asset name of the asset"
          },
          "fingerprint": {
            "type": "string",
            "example": "asset1pkpwyknlvul7az0xx8czhl60pyel45rpje4z8w",
            "description": "CIP14 based user-facing fingerprint"
          },
          "quantity": {
            "type": "string",
            "example": "12000",
            "description": "Current asset quantity"
          },
          "initial_mint_tx_hash": {
            "type": "string",
            "example": "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
            "description": "ID of the initial minting transaction"
          },
          "mint_or_burn_count": {
            "type": "integer",
            "example": 1,
            "description": "Count of mint and burn transactions"
          },
          "onchain_metadata": {
            "type": "object",
            "nullable": true,
            "additionalProperties": true,
            "description": "On-chain metadata which SHOULD adhere to the valid standards,\nbased on which we perform the look up and display the asset\n(best effort)\n"
          },
          "onchain_metadata_standard": {
            "type": "string",
            "nullable": true,
            "enum": [
              "CIP25v1",
              "CIP25v2",
              "CIP68v1",
              "CIP68v2",
              "CIP68v3"
            ],
            "description": "If on-chain metadata passes validation, we display the standard\nunder which it is valid\n"
          },
          "onchain_metadata_extra": {
            "type": "string",
            "nullable": true,
            "description": "Arbitrary plutus data (CIP68).\n"
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "Off-chain metadata fetched from GitHub based on network.\nMainnet: https://github.com/cardano-foundation/cardano-token-registry/\nTestnet: https://github.com/input-output-hk/metadata-registry-testnet/\n",
            "properties": {
              "name": {
                "type": "string",
                "example": "nutcoin",
                "description": "Asset name"
              },
              "description": {
                "type": "string",
                "example": "The Nut Coin",
                "description": "Asset description"
              },
              "ticker": {
                "type": "string",
                "nullable": true,
                "example": "nutc"
              },
              "url": {
                "type": "string",
                "nullable": true,
                "example": "https://www.stakenuts.com/",
                "description": "Asset website"
              },
              "logo": {
                "type": "string",
                "nullable": true,
                "example": "iVBORw0KGgoAAAANSUhEUgAAADAAAAAoCAYAAAC4h3lxAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAAB3RJTUUH5QITCDUPjqwFHwAAB9xJREFUWMPVWXtsU9cZ/8499/r6dZ3E9rUdO7ZDEgglFWO8KaOsJW0pCLRKrN1AqqYVkqoqrYo0ja7bpElru1WairStFKY9WzaE1E1tx+jokKqwtqFNyhKahEJJyJNgJ37E9r1+3HvO/sFR4vhx7SBtfH/F3/l93/f7ne/4PBxEKYU72dj/ZfH772v1TU+HtqbTaX8wOO01GPQpRVH7JEm+vGHDuq6z7/8jUSoHKtaBKkEUFUXdajDy1hUrmrs6zn/wWS7m7pZVjMUirKGUTnzc+e9xLcTrPPVfZzDz06Sc2lyQGEIyAPzT7Xa+dvE/3e+XLaCxoflHsVj8MAAYs74aa/WHoenwvpkZKeFy2Z5NJlOPUkqXZccFwSSrKjlyffjLH+TL6XTUGTGL/6hklD3ldIrj2M5MRmkLBMcvaRLQ1Nj88sxM/HCBfMP+eu/OYGDqe6l0WmpoqJ/88upgrU7HrQNA/cFg6MlkKiLlBtVUO40cx54BgHvLIT/HJLvdeqh/4NKxogKWN7fsCoUi7xTLxLJ4vLq6ak//wKVOrdXtttrTDMPsqJA8AAAwDErdu3VL3alTf5ma9eWCpoKhn5dKpCiqJxicPucQPVu0FHaInn35yHMcKwPAa4SQ3QCwFgDWUko3qSr5vqqSgTypuEg4Mo/zvA74/Y0rZSnZU8akSHV17k2fXfy0txjI5224kEym1s/1EUI7LBbztweHrkzkizn49LP6U6feepFSeggAQK/n04SQZ8bGrxdeQjZrbRvGzLH5hcibRqOhPplMfS1fIY5jz4xPDBdcGggho2h3z9sOLRazdG3wqp9SMgUlzGZ17SSEPsRx7J8CwfGu3PF57WhqqjfN/VxVJUxKUrIdITAXKpDJKFscosdfaFy0u+/K9aXTmXe0kAcAmA5Nng5Hbj6Tj/wCAYFAcN7uEY3GXGazMSHLqVVFapgBoMPna9yqhRAAgCTJMa3YUjZPgNFkSlWYx5eUkx+0tKx83V3rF+cVYJjruWCe133DIXqMmrNrFSDabRcWkywYmG5XFOW6aHcfb9324CoAgMmbo9MIoXkneCajiAihV/c/8eSiBSw4BxyiZxQA6m7H7FBKT2CMn2MY5jFFUX6ZO+5w2j8aHZ7YH40FByrJD5DnHGAY5uTtIA8AgBDaR4F2Yxb3WizCgmtA4ObUPSazodduqz3Suu0hf0U1cjvgdNSJ1dWWveFwdDUAtAiC2Uopdcdi8c9Zlh3GmDGl05mtAKAvo47EcdwThJCjqqpWFxALlNITomg73tff21GRAJez7iVK4WGGYfoJIQduBsbm7UrLm1ueCoUiv65kpiilw1ZbzcFoZOYoIcRTAn6eYZgXJm+Oni+Vd3YJbdyweSch9HlK6SpVVfcyDDq7Yf3m2XPBIXraKyV/a4b9UkLawbLsZgB4rwR8CyGkw13r+5fX27BckwBAEJ47oKpk8+DgUIdod7fV1vqOAMDrlZLPmqKoB+rrvXIgOP6w0WjYy3Ls5RL4bUk52bVm9fqnCk7M3CXU2ND8+MxM7BcIIftiyRYyntcdHh0bmr0wfmXl6p2SJB2KRmP3l4j7zejYUFtRAQAAgslm1Bv4nyGEDpYiIwjmjw0G/RjP866JiclNqqqWfKLq9fyZkdHBBXcnl9O71GDgD8bj0ncRQqZ8sRgzL9yYHH2pqICsOUTPLgA4CXNeZFmzWIS/YhYfjUZmvqPjuceSckrz25pS2h2cmlhbaBwhzr6kfsnL8Xhif55YYFl23Y3Jkdl7EVMoUSA4/q6qqNsBIPd11e52u45FwtG3CSH7yiEPAGC1Vt9dXGBmanDoygFLlbAjtzZCCMyC6VeaOpA1l9N7l1kwtauKaozHE28YTQaQpeR7+TqjxXheR0fHhhgt2CX1S3clEtKC16HL5djYe+niBU0CcmYA2W21/Qih5ZqDcoxlMZ24MaJJAABA87IVJ8Lh6N65Pr1B/+LIyLUfAhRZQvnM6ah7ZDHkAQB0vK6/HHxNTc2ruT5Zkldn/y5LACFk+2LIAwAwCGl6yGSt88KHXbmrBCHkqEgAz+vWLFZALJb4qNwYhFDhCSknkSwnQ4sVgDFeWg7+gQe2r1tAmkGTFQlACHWVg89nhJA9ot3dphV/eeCLp/Pw6K5IQP0S39uLFXCLwDG7zf1cKZxD9LSlUunHc/12u/2t2Vzl/rzu8zb8PZlM7bwdQgDgPK/nX2nddt+53//ht3LW2dS0fF0iLj2vquojuQFmwXRucPBKa8UCmpe1iOFwpAsAfLdJBFBKwVIlXJ2JxqKCxbwyHkvoCkAlv9/71U+7Oq+UJWDZ0hViJBL1cRynbNq0sSeeiPl6ei4NqIqq6TSmlB7X6bjuTEY5pgWfzwxGPZhMpt39/b3vzvWXFGCzulZjjM/DrauDwcAr8bjcgzGjZUuVBMH8k2uDX7wCAFDr8n2LEPI7SqmhTP6SzVbz6MDlz0/nDpT8EmOM22HOvUeWU2wp8iyLgRL6hk7Hrc2SBwC4MTlykmXZRozxn00mbVcphNA5jJmV+chr6oDd5l6jN/A/TqfSuwEAGITGMIsvGo3GTwTB3Dc2NjGSxdZYq4VIOOoNBANnKE0XPXE3brjHOTQ08k2MmVZOxzVJCbkFIQSCYEphzPaFQuGzTpfjb319PZ8UFXin/5OvrHPg/9HueAH/BSUqOuNZm4fyAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTE5VDA4OjUyOjI1KzAwOjAwCmFGlgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0xOVQwODo1MjoyMyswMDowMBjsyxAAAAAASUVORK5CYII=",
                "description": "Base64 encoded logo of the asset"
              },
              "decimals": {
                "type": "integer",
                "nullable": true,
                "maximum": 255,
                "example": 6,
                "description": "Number of decimal places of the asset unit"
              }
            },
            "required": [
              "name",
              "description",
              "ticker",
              "url",
              "logo",
              "decimals"
            ]
          }
        },
        "required": [
          "asset",
          "policy_id",
          "asset_name",
          "fingerprint",
          "quantity",
          "initial_mint_tx_hash",
          "mint_or_burn_count",
          "metadata",
          "onchain_metadata"
        ]
      },
      "asset_history": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction containing the asset action"
            },
            "action": {
              "type": "string",
              "enum": [
                "minted",
                "burned"
              ],
              "description": "Action executed upon the asset policy"
            },
            "amount": {
              "type": "string",
              "description": "Asset amount of the specific action"
            }
          },
          "required": [
            "tx_hash",
            "action",
            "amount"
          ]
        },
        "example": [
          {
            "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
            "amount": "10",
            "action": "minted"
          },
          {
            "tx_hash": "9c190bc1ac88b2ab0c05a82d7de8b71b67a9316377e865748a89d4426c0d3005",
            "amount": "5",
            "action": "burned"
          },
          {
            "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
            "amount": "5",
            "action": "burned"
          }
        ]
      },
      "asset_txs": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "Hash of the transaction"
        },
        "example": [
          "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
          "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
          "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b"
        ]
      },
      "asset_transactions": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction"
            },
            "tx_index": {
              "type": "integer",
              "description": "Transaction index within the block"
            },
            "block_height": {
              "type": "integer",
              "description": "Block height"
            },
            "block_time": {
              "type": "integer",
              "example": 1635505891,
              "description": "Block creation time in UNIX time"
            }
          },
          "required": [
            "tx_hash",
            "tx_index",
            "block_height",
            "block_time"
          ]
        },
        "example": [
          {
            "tx_hash": "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
            "tx_index": 6,
            "block_height": 69,
            "block_time": 1635505891
          },
          {
            "tx_hash": "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
            "tx_index": 9,
            "block_height": 4547,
            "block_time": 1635505987
          },
          {
            "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
            "tx_index": 0,
            "block_height": 564654,
            "block_time": 1834505492
          }
        ]
      },
      "asset_addresses": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Address containing the specific asset"
            },
            "quantity": {
              "type": "string",
              "description": "Asset quantity on the specific address"
            }
          },
          "required": [
            "address",
            "quantity"
          ]
        },
        "example": [
          {
            "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
            "quantity": "1"
          },
          {
            "address": "addr1qyhr4exrgavdcn3qhfcc9f939fzsch2re5ry9cwvcdyh4x4re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qdpvhza",
            "quantity": "100000"
          },
          {
            "address": "addr1q8zup8m9ue3p98kxlxl9q8rnyan8hw3ul282tsl9s326dfj088lvedv4zckcj24arcpasr0gua4c5gq4zw2rpcpjk2lq8cmd9l",
            "quantity": "18605647"
          }
        ]
      },
      "asset_policy": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "asset": {
              "type": "string",
              "description": "Concatenation of the policy_id and hex-encoded asset_name"
            },
            "quantity": {
              "type": "string",
              "description": "Current asset quantity"
            }
          },
          "required": [
            "asset",
            "quantity"
          ]
        },
        "example": [
          {
            "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
            "quantity": "1"
          },
          {
            "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a766e",
            "quantity": "100000"
          },
          {
            "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb574636f696e",
            "quantity": "18605647"
          }
        ]
      },
      "scripts": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "script_hash": {
              "type": "string",
              "description": "Script hash"
            }
          },
          "required": [
            "script_hash"
          ]
        },
        "example": [
          {
            "script_hash": "13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"
          },
          {
            "script_hash": "e1457a0c47dfb7a2f6b8fbb059bdceab163c05d34f195b87b9f2b30e"
          },
          {
            "script_hash": "a6e63c0ff05c96943d1cc30bf53112ffff0f34b45986021ca058ec54"
          }
        ]
      },
      "script": {
        "type": "object",
        "properties": {
          "script_hash": {
            "type": "string",
            "example": "13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1",
            "description": "Script hash"
          },
          "type": {
            "type": "string",
            "enum": [
              "timelock",
              "plutusV1",
              "plutusV2"
            ],
            "example": "plutusV1",
            "description": "Type of the script language"
          },
          "serialised_size": {
            "type": "integer",
            "nullable": true,
            "description": "The size of the CBOR serialised script, if a Plutus script",
            "example": 3119
          }
        },
        "required": [
          "script_hash",
          "type",
          "serialised_size"
        ]
      },
      "script_json": {
        "type": "object",
        "properties": {
          "json": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "JSON contents of the `timelock` script, null for `plutus` scripts"
          }
        },
        "required": [
          "json"
        ],
        "example": {
          "json": {
            "type": "atLeast",
            "scripts": [
              {
                "type": "sig",
                "keyHash": "654891a4db2ea44b5263f4079a33efa0358ba90769e3d8f86a4a0f81"
              },
              {
                "type": "sig",
                "keyHash": "8685ad48f9bebb8fdb6447abbe140645e0bf743ff98da62e63e2147f"
              },
              {
                "type": "sig",
                "keyHash": "cb0f3b3f91693374ff7ce1d473cf6e721c7bab52b0737f04164e5a2d"
              }
            ],
            "required": 2
          }
        }
      },
      "script_cbor": {
        "type": "object",
        "properties": {
          "cbor": {
            "type": "string",
            "nullable": true,
            "description": "CBOR contents of the `plutus` script, null for `timelocks`"
          }
        },
        "required": [
          "cbor"
        ],
        "example": {
          "cbor": "4e4d01000033222220051200120011"
        }
      },
      "script_redeemers": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "example": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0",
              "description": "Hash of the transaction"
            },
            "tx_index": {
              "type": "integer",
              "example": 0,
              "description": "The index of the redeemer pointer in the transaction"
            },
            "purpose": {
              "type": "string",
              "enum": [
                "spend",
                "mint",
                "cert",
                "reward"
              ],
              "example": "spend",
              "description": "Validation purpose"
            },
            "redeemer_data_hash": {
              "type": "string",
              "example": "923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec",
              "description": "Datum hash of the redeemer"
            },
            "datum_hash": {
              "type": "string",
              "example": "923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec",
              "description": "Datum hash",
              "deprecated": true
            },
            "unit_mem": {
              "type": "string",
              "example": "1700",
              "description": "The budget in Memory to run a script"
            },
            "unit_steps": {
              "type": "string",
              "example": "476468",
              "description": "The budget in CPU steps to run a script"
            },
            "fee": {
              "type": "string",
              "example": "172033",
              "description": "The fee consumed to run the script"
            }
          },
          "required": [
            "tx_hash",
            "tx_index",
            "purpose",
            "redeemer_data_hash",
            "datum_hash",
            "unit_mem",
            "unit_steps",
            "fee"
          ]
        }
      },
      "script_datum": {
        "type": "object",
        "properties": {
          "json_value": {
            "type": "object",
            "additionalProperties": true,
            "description": "JSON content of the datum"
          }
        },
        "required": [
          "json_value"
        ],
        "example": {
          "json_value": {
            "int": 42
          }
        }
      },
      "script_datum_cbor": {
        "type": "object",
        "properties": {
          "cbor": {
            "type": "string",
            "description": "CBOR serialized datum"
          }
        },
        "required": [
          "cbor"
        ],
        "example": {
          "cbor": "19a6aa"
        }
      },
      "utils_addresses_xpub": {
        "type": "object",
        "properties": {
          "xpub": {
            "type": "string",
            "description": "Script hash"
          },
          "role": {
            "type": "integer",
            "description": "Account role"
          },
          "index": {
            "type": "integer",
            "description": "Address index"
          },
          "address": {
            "type": "string",
            "description": "Derived address"
          }
        },
        "required": [
          "xpub",
          "role",
          "index",
          "address"
        ],
        "example": [
          {
            "xpub": "d507c8f866691bd96e131334c355188b1a1d0b2fa0ab11545075aab332d77d9eb19657ad13ee581b56b0f8d744d66ca356b93d42fe176b3de007d53e9c4c4e7a",
            "role": 0,
            "index": 0,
            "address": "addr1q90sqnljxky88s0jsnps48jd872p7znzwym0jpzqnax6qs5nfrlkaatu28n0qzmqh7f2cpksxhpc9jefx3wrl0a2wu8q5amen7"
          }
        ]
      },
      "metrics": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "time": {
              "type": "integer",
              "description": "Starting time of the call count interval (ends midnight UTC) in UNIX time"
            },
            "calls": {
              "type": "integer",
              "description": "Sum of all calls for a particular day"
            }
          },
          "required": [
            "time",
            "calls"
          ]
        },
        "example": [
          {
            "time": 1612543884,
            "calls": 42
          },
          {
            "time": 1614523884,
            "calls": 6942
          }
        ]
      },
      "metrics_endpoints": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "time": {
              "type": "integer",
              "description": "Starting time of the call count interval (ends midnight UTC) in UNIX time"
            },
            "calls": {
              "type": "integer",
              "description": "Sum of all calls for a particular day and endpoint"
            },
            "endpoint": {
              "type": "string",
              "description": "Endpoint parent name"
            }
          },
          "required": [
            "time",
            "calls",
            "endpoint"
          ]
        },
        "example": [
          {
            "time": 1612543814,
            "calls": 182,
            "endpoint": "block"
          },
          {
            "time": 1612543814,
            "calls": 42,
            "endpoint": "epoch"
          },
          {
            "time": 1612543812,
            "calls": 775,
            "endpoint": "block"
          },
          {
            "time": 1612523884,
            "calls": 4,
            "endpoint": "epoch"
          },
          {
            "time": 1612553884,
            "calls": 89794,
            "endpoint": "block"
          }
        ]
      },
      "network": {
        "type": "object",
        "properties": {
          "supply": {
            "type": "object",
            "properties": {
              "max": {
                "type": "string",
                "description": "Maximum supply in Lovelaces",
                "example": "45000000000000000"
              },
              "total": {
                "type": "string",
                "description": "Current total (max supply - reserves) supply in Lovelaces",
                "example": "32890715183299160"
              },
              "circulating": {
                "type": "string",
                "description": "Current circulating (UTXOs + withdrawables) supply in Lovelaces",
                "example": "32412601976210393"
              },
              "locked": {
                "type": "string",
                "description": "Current supply locked by scripts in Lovelaces",
                "example": "125006953355"
              },
              "treasury": {
                "type": "string",
                "description": "Current supply locked in treasury",
                "example": "98635632000000"
              },
              "reserves": {
                "type": "string",
                "description": "Current supply locked in reserves",
                "example": "46635632000000"
              }
            },
            "required": [
              "max",
              "total",
              "circulating",
              "locked",
              "treasury",
              "reserves"
            ]
          },
          "stake": {
            "type": "object",
            "properties": {
              "live": {
                "type": "string",
                "example": "23204950463991654",
                "description": "Current live stake in Lovelaces"
              },
              "active": {
                "type": "string",
                "description": "Current active stake in Lovelaces",
                "example": "22210233523456321"
              }
            },
            "required": [
              "live",
              "active"
            ]
          }
        },
        "required": [
          "supply",
          "stake"
        ]
      },
      "network-eras": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "start": {
              "type": "object",
              "description": "Start of the blockchain era,\nrelative to the start of the network\n",
              "properties": {
                "time": {
                  "type": "number",
                  "description": "Time in seconds relative to the start time of the network"
                },
                "slot": {
                  "type": "integer",
                  "description": "Absolute slot number"
                },
                "epoch": {
                  "type": "integer",
                  "description": "Epoch number"
                }
              },
              "required": [
                "time",
                "slot",
                "epoch"
              ]
            },
            "end": {
              "type": "object",
              "description": "End of the blockchain era,\nrelative to the start of the network\n",
              "properties": {
                "time": {
                  "type": "number",
                  "description": "Time in seconds relative to the start time of the network"
                },
                "slot": {
                  "type": "integer",
                  "description": "Absolute slot number"
                },
                "epoch": {
                  "type": "integer",
                  "description": "Epoch number"
                }
              },
              "required": [
                "time",
                "slot",
                "epoch"
              ]
            },
            "parameters": {
              "type": "object",
              "description": "Era parameters",
              "properties": {
                "epoch_length": {
                  "type": "integer",
                  "description": "Epoch length in number of slots"
                },
                "slot_length": {
                  "type": "number",
                  "description": "Slot length in seconds"
                },
                "safe_zone": {
                  "type": "integer",
                  "description": "Zone in which it is guaranteed that no hard fork can take place"
                }
              },
              "required": [
                "epoch_length",
                "slot_length",
                "safe_zone"
              ]
            }
          },
          "required": [
            "start",
            "end",
            "parameters"
          ]
        },
        "example": [
          {
            "start": {
              "time": 0,
              "slot": 0,
              "epoch": 0
            },
            "end": {
              "time": 89856000,
              "slot": 4492800,
              "epoch": 208
            },
            "parameters": {
              "epoch_length": 21600,
              "slot_length": 20,
              "safe_zone": 4320
            }
          },
          {
            "start": {
              "time": 89856000,
              "slot": 4492800,
              "epoch": 208
            },
            "end": {
              "time": 101952000,
              "slot": 16588800,
              "epoch": 236
            },
            "parameters": {
              "epoch_length": 432000,
              "slot_length": 1,
              "safe_zone": 129600
            }
          }
        ]
      },
      "nutlink_address": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Bech32 encoded address",
            "example": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
          },
          "metadata_url": {
            "type": "string",
            "description": "URL of the specific metadata file",
            "example": "https://nut.link/metadata.json"
          },
          "metadata_hash": {
            "type": "string",
            "description": "Hash of the metadata file",
            "example": "6bf124f217d0e5a0a8adb1dbd8540e1334280d49ab861127868339f43b3948af"
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "The cached metadata of the `metadata_url` file.",
            "additionalProperties": true
          }
        },
        "required": [
          "address",
          "metadata_url",
          "metadata_hash",
          "metadata"
        ]
      },
      "nutlink_address_tickers": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the ticker"
            },
            "count": {
              "type": "integer",
              "description": "Number of ticker records"
            },
            "latest_block": {
              "type": "integer",
              "description": "Block height of the latest record"
            }
          },
          "required": [
            "name",
            "count",
            "latest_block"
          ]
        },
        "example": [
          {
            "name": "ADAUSD",
            "count": 1980038,
            "latest_block": 2657092
          },
          {
            "name": "ADAEUR",
            "count": 1980038,
            "latest_block": 2657092
          },
          {
            "name": "ADABTC",
            "count": 1980038,
            "latest_block": 2657092
          }
        ]
      },
      "nutlink_address_ticker": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction"
            },
            "block_height": {
              "type": "integer",
              "description": "Block height of the record"
            },
            "tx_index": {
              "type": "integer",
              "description": "Transaction index within the block"
            },
            "payload": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ],
              "additionalProperties": true,
              "description": "Content of the ticker"
            }
          },
          "required": [
            "tx_hash",
            "tx_index",
            "block_height",
            "payload"
          ]
        },
        "example": [
          {
            "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
            "block_height": 2657092,
            "tx_index": 8,
            "payload": [
              {
                "source": "coinGecko",
                "value": "1.29"
              },
              {
                "source": "cryptoCompare",
                "value": "1.283"
              }
            ]
          }
        ]
      },
      "nutlink_tickers_ticker": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "Address of a metadata oracle"
            },
            "tx_hash": {
              "type": "string",
              "description": "Hash of the transaction"
            },
            "block_height": {
              "type": "integer",
              "description": "Block height of the record"
            },
            "tx_index": {
              "type": "integer",
              "description": "Transaction index within the block"
            },
            "payload": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object"
                },
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ],
              "additionalProperties": true,
              "description": "Content of the ticker"
            }
          },
          "required": [
            "address",
            "tx_hash",
            "block_height",
            "tx_index",
            "payload"
          ]
        },
        "example": [
          {
            "address": "addr_test1qpmtp5t0t5y6cqkaz7rfsyrx7mld77kpvksgkwm0p7en7qum7a589n30e80tclzrrnj8qr4qvzj6al0vpgtnmrkkksnqd8upj0",
            "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
            "block_height": 2657092,
            "tx_index": 8,
            "payload": [
              {
                "source": "coinGecko",
                "value": "1.29"
              },
              {
                "source": "cryptoCompare",
                "value": "1.283"
              }
            ]
          }
        ]
      },
      "asset_onchain_metadata_cip25": {
        "type": "object",
        "additionalProperties": true,
        "description": "On-chain metadata stored in the minting transaction under label 721,\nwhich adheres to https://cips.cardano.org/cips/cip25/\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the asset",
            "example": "My NFT token"
          },
          "image": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "URI(s) of the associated asset",
            "example": "ipfs://ipfs/QmfKyJ4tuvHowwKQCbCHj4L5T3fSj8cjs7Aau8V7BWv226"
          },
          "description": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Additional description",
            "example": "My NFT token description"
          },
          "mediaType": {
            "type": "string",
            "description": "Mime sub-type of image",
            "example": "image/jpeg"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the file",
                  "example": "myimage"
                },
                "mediaType": {
                  "type": "string",
                  "description": "Mime sub-type of image",
                  "example": "image/jpeg"
                },
                "src": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ],
                  "description": "URI pointing to a resource of this mime type",
                  "example": "My NFT token description"
                }
              },
              "required": [
                "mediaType",
                "src"
              ]
            }
          }
        },
        "required": [
          "name",
          "image"
        ]
      },
      "asset_onchain_metadata_cip68_ft_333": {
        "type": "object",
        "additionalProperties": true,
        "description": "On-chain metadata stored in the datum of the reference NFT output\nwhich adheres to 333 FT Standard https://cips.cardano.org/cips/cip68/\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the asset",
            "example": "My FT token"
          },
          "description": {
            "type": "string",
            "description": "Additional description",
            "example": "My FT token description"
          },
          "logo": {
            "type": "string",
            "description": "URI(s) of the associated asset",
            "example": "ipfs://ipfs/QmfKyJ4tuvHowwKQCbCHj4L5T3fSj8cjs7Aau8V7BWv226"
          },
          "ticker": {
            "type": "string",
            "description": "Ticker",
            "example": "TOK"
          },
          "decimals": {
            "type": "number",
            "description": "Number of decimals",
            "example": 8
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "asset_onchain_metadata_cip68_nft_222": {
        "type": "object",
        "additionalProperties": true,
        "description": "On-chain metadata stored in the datum of the reference NFT output\nwhich adheres to 222 NFT Standard https://cips.cardano.org/cips/cip68/\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the asset",
            "example": "My NFT token"
          },
          "image": {
            "type": "string",
            "description": "URI(s) of the associated asset",
            "example": "ipfs://ipfs/QmfKyJ4tuvHowwKQCbCHj4L5T3fSj8cjs7Aau8V7BWv226"
          },
          "description": {
            "type": "string",
            "description": "Additional description",
            "example": "My NFT token description"
          },
          "mediaType": {
            "type": "string",
            "description": "Mime sub-type of image",
            "example": "image/jpeg"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the file",
                  "example": "myimage"
                },
                "mediaType": {
                  "type": "string",
                  "description": "Mime sub-type of image",
                  "example": "image/jpeg"
                },
                "src": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ],
                  "description": "URI pointing to a resource of this mime type",
                  "example": "My NFT token description"
                }
              },
              "required": [
                "mediaType",
                "src"
              ]
            }
          }
        },
        "required": [
          "name",
          "image"
        ]
      },
      "asset_onchain_metadata_cip68_rft_444": {
        "type": "object",
        "additionalProperties": true,
        "description": "On-chain metadata stored in the datum of the reference NFT output\nwhich adheres to 222 NFT Standard https://cips.cardano.org/cips/cip68/\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the asset",
            "example": "My NFT token"
          },
          "image": {
            "type": "string",
            "description": "URI(s) of the associated asset",
            "example": "ipfs://ipfs/QmfKyJ4tuvHowwKQCbCHj4L5T3fSj8cjs7Aau8V7BWv226"
          },
          "description": {
            "type": "string",
            "description": "Additional description",
            "example": "My NFT token description"
          },
          "mediaType": {
            "type": "string",
            "description": "Mime sub-type of image",
            "example": "image/jpeg"
          },
          "decimals": {
            "type": "number",
            "description": "Number of decimals",
            "example": 8
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the file",
                  "example": "myimage"
                },
                "mediaType": {
                  "type": "string",
                  "description": "Mime sub-type of image",
                  "example": "image/jpeg"
                },
                "src": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ],
                  "description": "URI pointing to a resource of this mime type",
                  "example": "My NFT token description"
                }
              },
              "required": [
                "mediaType",
                "src"
              ]
            }
          }
        },
        "required": [
          "name",
          "image"
        ]
      },
      "AggregatorFeaturesMessage": {
        "description": "Represents general information about Aggregator public information and signing capabilities",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "open_api_version",
          "documentation_url",
          "capabilities"
        ],
        "properties": {
          "open_api_version": {
            "description": "Open API version",
            "type": "string",
            "format": "byte"
          },
          "documentation_url": {
            "description": "Mithril documentation",
            "type": "string",
            "format": "byte"
          },
          "capabilities": {
            "description": "Capabilities of the aggregator",
            "type": "object",
            "additionalProperties": false,
            "required": [
              "signed_entity_types"
            ],
            "properties": {
              "signed_entity_types": {
                "description": "Signed entity types that are signed by the aggregator",
                "type": "array",
                "minItems": 1,
                "items": {
                  "description": "Signed entity types that can be signed",
                  "type": "string",
                  "enum": [
                    "MithrilStakeDistribution",
                    "CardanoStakeDistribution",
                    "CardanoImmutableFilesFull",
                    "CardanoTransactions"
                  ]
                }
              },
              "cardano_transactions_prover": {
                "description": "Cardano transactions prover capabilities",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "max_hashes_allowed_by_request"
                ],
                "properties": {
                  "max_hashes_allowed_by_request": {
                    "description": "Maximum number of hashes allowed for a single request",
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "example": {
          "open_api_version": "0.1.17",
          "documentation_url": "https://mithril.network",
          "capabilities": {
            "signed_entity_types": [
              "MithrilStakeDistribution",
              "CardanoImmutableFilesFull",
              "CardanoTransactions"
            ],
            "cardano_transactions_prover": {
              "max_hashes_allowed_by_request": 100
            }
          }
        }
      },
      "Epoch": {
        "description": "Cardano chain epoch number",
        "type": "integer",
        "format": "int64"
      },
      "EpochSettingsMessage": {
        "description": "Epoch settings",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "epoch",
          "protocol",
          "next_protocol"
        ],
        "properties": {
          "epoch": {
            "$ref": "#/components/schemas/Epoch"
          },
          "protocol": {
            "$ref": "#/components/schemas/ProtocolParameters"
          },
          "next_protocol": {
            "$ref": "#/components/schemas/ProtocolParameters"
          }
        },
        "example": {
          "epoch": 329,
          "protocol": {
            "k": 857,
            "m": 6172,
            "phi_f": 0.2
          },
          "next_protocol": {
            "k": 2422,
            "m": 20973,
            "phi_f": 0.2
          }
        }
      },
      "ProtocolParameters": {
        "description": "Protocol cryptographic parameters",
        "type": "object",
        "additionalProperties": true,
        "required": [
          "k",
          "m",
          "phi_f"
        ],
        "properties": {
          "k": {
            "description": "Quorum parameter",
            "type": "integer",
            "format": "int64"
          },
          "m": {
            "description": "Security parameter (number of lotteries)",
            "type": "integer",
            "format": "int64"
          },
          "phi_f": {
            "description": "f in phi(w) = 1 - (1 - f)^w, where w is the stake of a participant",
            "type": "number",
            "format": "double"
          }
        },
        "example": {
          "k": 857,
          "m": 6172,
          "phi_f": 0.2
        }
      },
      "CardanoDbBeacon": {
        "description": "A point in the Cardano chain at which a Mithril certificate of the Cardano Database should be produced",
        "type": "object",
        "additionalProperties": true,
        "required": [
          "network",
          "epoch",
          "immutable_file_number"
        ],
        "properties": {
          "network": {
            "description": "Cardano network",
            "type": "string"
          },
          "epoch": {
            "$ref": "#/components/schemas/Epoch"
          },
          "immutable_file_number": {
            "description": "Number of the last immutable file that should be included the snapshot",
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "network": "mainnet",
          "epoch": 329,
          "immutable_file_number": 7060000
        }
      },
      "SignedEntityType": {
        "description": "Entity type of the message that is signed",
        "type": "object",
        "additionalProperties": true,
        "example": {
          "MithrilStakeDistribution": 246
        }
      },
      "CertificatePendingMessage": {
        "description": "CertificatePendingMessage represents all the information related to the certificate currently expecting to receive quorum of single signatures",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "epoch",
          "entity_type",
          "protocol",
          "next_protocol",
          "signers",
          "next_signers"
        ],
        "properties": {
          "epoch": {
            "$ref": "#/components/schemas/Epoch"
          },
          "beacon": {
            "deprecated": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CardanoDbBeacon"
              }
            ]
          },
          "entity_type": {
            "$ref": "#/components/schemas/SignedEntityType"
          },
          "protocol": {
            "$ref": "#/components/schemas/ProtocolParameters"
          },
          "next_protocol": {
            "$ref": "#/components/schemas/ProtocolParameters"
          },
          "signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Signer"
            }
          },
          "next_signers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Signer"
            }
          }
        },
        "example": {
          "epoch": 329,
          "beacon": {
            "network": "mainnet",
            "epoch": 329,
            "immutable_file_number": 7060000
          },
          "entity_type": {
            "MithrilStakeDistribution": 246
          },
          "protocol": {
            "k": 857,
            "m": 6172,
            "phi_f": 0.2
          },
          "next_protocol": {
            "k": 2422,
            "m": 20973,
            "phi_f": 0.2
          },
          "signers": [
            {
              "party_id": "1234567890",
              "verification_key": "7b12766b223a5c342b39302c32392c39392c39382c3131313138342c32252c32352c31353",
              "verification_key_signature": "7b5473693727369676d61223a7b227369676d6d61223a7b261223a9b227369676d61213a",
              "operational_certificate": "5b73136372c38302c37342c3136362c313535b5b3232352c3230332c3235352c313030262c38322c39382c32c39332c3138342c3135362c3136362c32312c3131312c3232312c36332c3137372c3232332c3232332c31392c3537",
              "kes_period": 123
            },
            {
              "party_id": "2345678900",
              "verification_key": "7b392c39392c13131312766b223a5c39382c313342b39302c252c32352c31353328342c32",
              "verification_key_signature": "2c33302c3133312c3138322c34362c3133352c372c3139302c3235322c35352c32322c39",
              "operational_certificate": "3231342c3137372c37312c3232352c3233332c3135335d2c322c3139322c5b3133352c34312c3230332c3131332c3c33352c3234302c3230392c312c32392c3233332c33342c3138382c3134312c3130342c3234382c3231392c3",
              "kes_period": 456
            }
          ],
          "next_signers": [
            {
              "party_id": "3456789000",
              "verification_key": "7b22766b223a5b3133382c32392c3137332c3134342c36332c3233352c39372c3138302c3",
              "verification_key_signature": "7b227369676d61223a7b227369676d61223a7b227369676d61223a7b227369676d612239",
              "operational_certificate": "5b5b5b3232352c3230332c3235352c3130302c3136372c38302c37342c3136362c3135362c38322c39382c3232312c36332c3137372c3232332c3232332c31392c35372c39332c312c35302c3133392c3233342c3137332c32352",
              "kes_period": 789
            },
            {
              "party_id": "4567890000",
              "verification_key": "34302c3132332c3139302c3134352c3132342c35342c3133302c37302c3136332c3139332",
              "verification_key_signature": "302c3230312c38362c3139312c36302c3234352c3138332c3134342c3139392c3130335f",
              "operational_certificate": "2c38382c3138372c3233332c34302c37322c31362c36365d2c312c3132332c5b31362c3136392c3134312c3138332c32322c3137342c3131312c33322c36342c35322c2c3232382c37392c3137352c32395312c3838282c323030",
              "kes_period": 876
            }
          ]
        }
      },
      "Stake": {
        "description": "Stake represents the stakes of a participant in the Cardano chain",
        "type": "object",
        "additionalProperties": true,
        "required": [
          "stake"
        ],
        "properties": {
          "stake": {
            "description": "Stake share as computed in the 'stake distribution' by the Cardano Node, multiplied by a billion (1.0e9)",
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "stake": 1234
        }
      },
      "Signer": {
        "description": "Signer represents a signing participant in the network",
        "type": "object",
        "additionalProperties": true,
        "required": [
          "party_id",
          "verification_key"
        ],
        "properties": {
          "party_id": {
            "description": "The unique identifier of the signer",
            "type": "string"
          },
          "verification_key": {
            "description": "The public key used to authenticate signer signature",
            "type": "string",
            "format": "byte"
          },
          "verification_key_signature": {
            "description": "The signature of the verification_key (signed by the Cardano node KES secret key)",
            "type": "string",
            "format": "byte"
          },
          "operational_certificate": {
            "description": "The operational certificate of the stake pool operator attached to the signer node",
            "type": "string",
            "format": "byte"
          },
          "kes_period": {
            "description": "The number of updates of the KES secret key that signed the verification key",
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "party_id": "1234567890",
          "verification_key": "7b12766b223a5c342b39302c32392c39392c39382c3131313138342c32252c32352c31353",
          "verification_key_signature": "7b5473693727369676d61223a7b227369676d6d61223a7b261223a9b227369676d61213a",
          "operational_certificate": "5b73136372c38302c37342c3136362c313535b5b3232352c3230332c3235352c313030262c38322c39382c32c39332c3138342c3135362c3136362c32312c3131312c3232312c36332c3137372c3232332c3232332c31392c3537",
          "kes_period": 123
        }
      },
      "RegisterSignerMessage": {
        "description": "This message represents a signing participant in the network.",
        "additionalProperties": true,
        "properties": {
          "epoch": {
            "$ref": "#/components/schemas/Epoch"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Signer"
          }
        ],
        "example": {
          "epoch": 329,
          "party_id": "1234567890",
          "verification_key": "7b12766b223a5c342b39302c32392c39392c39382c3131313138342c32252c32352c31353",
          "verification_key_signature": "7b5473693727369676d61223a7b227369676d6d61223a7b261223a9b227369676d61213a",
          "operational_certificate": "5b73136372c38302c37342c3136362c313535b5b3232352c3230332c3235352c313030262c38322c39382c32c39332c3138342c3135362c3136362c32312c3131312c3232312c36332c3137372c3232332c3232332c31392c3537",
          "kes_period": 123
        }
      },
      "SignerWithStake": {
        "description": "Signer represents a signing party in the network (including its stakes)",
        "additionalProperties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Signer"
          },
          {
            "$ref": "#/components/schemas/Stake"
          }
        ],
        "example": {
          "party_id": "1234567890",
          "verification_key": "7b12766b223a5c342b39302c32392c39392c39382c3131313138342c32252c32352c31353",
          "verification_key_signature": "7b5473693727369676d61223a7b227369676d6d61223a7b261223a9b227369676d61213a",
          "operational_certificate": "5b73136372c38302c37342c3136362c313535b5b3232352c3230332c3235352c313030262c38322c39382c32c39332c3138342c3135362c3136362c32312c3131312c3232312c36332c3137372c3232332c3232332c31392c3537",
          "kes_period": 123,
          "stake": 1234
        }
      },
      "StakeDistributionParty": {
        "description": "Signer registered to a signature round.\n",
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "party_id": {
            "description": "The unique identifier of the signer",
            "type": "string"
          },
          "stake": {
            "description": "Stake share as computed in the 'stake distribution' by the Cardano Node, multiplied by a billion (1.0e9)",
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "party_id": "1234567890",
          "stake": 1234
        }
      },
      "SignerRegistrationsMessage": {
        "description": "This message holds the registered signers at a given epoch.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "registered_at": {
            "$ref": "#/components/schemas/Epoch"
          },
          "signing_at": {
            "$ref": "#/components/schemas/Epoch"
          },
          "registrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignerRegistrationsListItemMessage"
            }
          }
        },
        "example": {
          "registered_at": 420,
          "signing_at": 422,
          "registrations": [
            {
              "party_id": "1234567890",
              "stake": 1234
            }
          ]
        }
      },
      "SignerRegistrationsListItemMessage": {
        "description": "represents an item of a SignerRegistrationsMessage registration",
        "type": "object",
        "additionalProperties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Stake"
          }
        ],
        "properties": {
          "party_id": {
            "description": "The unique identifier of the signer",
            "type": "string"
          }
        }
      },
      "SignersTickersMessage": {
        "description": "represents the list of signers known by the aggregator",
        "type": "object",
        "required": [
          "network",
          "signers"
        ],
        "properties": {
          "network": {
            "description": "Cardano network of the aggregator",
            "type": "string",
            "format": "bytes"
          },
          "signers": {
            "description": "Known signers",
            "items": {
              "$ref": "#/components/schemas/SignerTickerListItemMessage"
            }
          }
        },
        "example": {
          "network": "mainnet",
          "signers": [
            {
              "party_id": "pool1234567890",
              "pool_ticker": "[Pool_Name]",
              "has_registered": true
            },
            {
              "party_id": "pool0987654321",
              "has_registered": false
            }
          ]
        }
      },
      "SignerTickerListItemMessage": {
        "description": "represents a known signer with its pool ticker",
        "type": "object",
        "additionalProperties": true,
        "required": [
          "party_id",
          "has_registered"
        ],
        "properties": {
          "party_id": {
            "description": "The unique identifier of the signer",
            "type": "string"
          },
          "pool_ticker": {
            "description": "The signer pool ticker",
            "type": "string"
          },
          "has_registered": {
            "description": "The signer has registered at least once",
            "type": "boolean"
          }
        },
        "example": {
          "party_id": "pool1234567890",
          "pool_ticker": "[Pool_Name]",
          "has_registered": true
        }
      },
      "RegisterSingleSignatureMessage": {
        "description": "This message holds a Signer Single Signature with the\nlist of won indexes in the lottery.\n",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "entity_type",
          "party_id",
          "signature",
          "indexes"
        ],
        "properties": {
          "entity_type": {
            "$ref": "#/components/schemas/SignedEntityType"
          },
          "party_id": {
            "description": "The unique identifier of the signer",
            "type": "string"
          },
          "signature": {
            "description": "The single signature of the digest",
            "type": "string",
            "format": "byte"
          },
          "indexes": {
            "description": "The indexes of the lottery won that lead to the single signature",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "example": {
          "entity_type": {
            "MithrilStakeDistribution": 246
          },
          "party_id": "1234567890",
          "signature": "7b2c36322c3130352c3232322c31302c3131302c33312c37312c39372c22766b223a5b3136342c2c31393137352c313834",
          "indexes": [
            25,
            35
          ]
        }
      },
      "ProtocolMessageParts": {
        "description": "ProtocolMessage represents a message that is signed (or verified) by the Mithril protocol",
        "type": "object",
        "additionalProperties": true,
        "required": [
          "next_aggregate_verification_key"
        ],
        "properties": {
          "snapshot_digest": {
            "description": "Digest of the snapshot archive",
            "type": "string",
            "format": "bytes"
          },
          "next_aggregate_verification_key": {
            "description": "Aggregate verification key (AVK) that will be used to create the next multi signature",
            "type": "string",
            "format": "bytes"
          },
          "latest_block_number": {
            "description": "The latest signed block number",
            "type": "string"
          }
        },
        "example": {
          "snapshot_digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
          "next_aggregate_verification_key": "b132362c3232352c36392c31373133352c31323235392c3235332c3233342c34226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b33382c3382c3138322c3231322c2c363",
          "latest_block_number": "123456"
        }
      },
      "ProtocolMessage": {
        "description": "ProtocolMessage represents a message that is signed (or verified) by the Mithril protocol",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "message_parts"
        ],
        "properties": {
          "message_parts": {
            "$ref": "#/components/schemas/ProtocolMessageParts"
          }
        },
        "example": {
          "message_parts": {
            "snapshot_digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "next_aggregate_verification_key": "b132362c3232352c36392c31373133352c31323235392c3235332c3233342c34226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b33382c3382c3138322c3231322c2c363"
          }
        }
      },
      "CertificateListItemMessageMetadata": {
        "description": "CertificateListItemMessageMetadata represents the metadata associated to a CertificateListItemMessage",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "network",
          "version",
          "parameters",
          "initiated_at",
          "sealed_at",
          "total_signers"
        ],
        "properties": {
          "network": {
            "description": "Cardano network",
            "type": "string"
          },
          "version": {
            "description": "Version of the protocol",
            "type": "string",
            "format": "bytes"
          },
          "parameters": {
            "$ref": "#/components/schemas/ProtocolParameters"
          },
          "initiated_at": {
            "description": "Date and time at which the certificate was initialized and ready to accept single signatures from signers",
            "type": "string",
            "format": "date-time"
          },
          "sealed_at": {
            "description": "Date and time at which the certificate was sealed (when the quorum of single signatures was reached so that a multi signature could be aggregated from them)",
            "type": "string",
            "format": "date-time"
          },
          "total_signers": {
            "description": "The number of the signers with their stakes and verification keys",
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "network": "mainnet",
          "version": "0.1.0",
          "parameters": {
            "k": 5,
            "m": 100,
            "phi_f": 0.65
          },
          "initiated_at": "2022-07-17T18:51:23.192811338Z",
          "sealed_at": "2022-07-17T18:51:35.830832580Z",
          "total_signers": 3
        }
      },
      "CertificateListMessage": {
        "description": "CertificateListMessage represents a list of Mithril certificates",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CertificateListItemMessage"
        },
        "example": [
          {
            "hash": "9dc998101590f733f7a50e7c03b5b336e69a751cc02d811395d49618db3ba3d7",
            "previous_hash": "aa2ddfb87a17103bdf15bfb21a2941b3f3223a3c8d710910496c392b14f8c403",
            "epoch": 329,
            "beacon": {
              "network": "mainnet",
              "epoch": 329,
              "immutable_file_number": 7060000
            },
            "signed_entity_type": {
              "MithrilStakeDistribution": 246
            },
            "metadata": {
              "network": "mainnet",
              "version": "0.1.0",
              "parameters": {
                "k": 5,
                "m": 100,
                "phi_f": 0.65
              },
              "initiated_at": "2022-07-17T18:51:23.192811338Z",
              "sealed_at": "2022-07-17T18:51:35.830832580Z",
              "total_signers": 3
            },
            "protocol_message": {
              "message_parts": {
                "snapshot_digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
                "next_aggregate_verification_key": "b132362c3232352c36392c31373133352c31323235392c3235332c3233342c34226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b33382c3382c3138322c3231322c2c363"
              }
            },
            "signed_message": "07ed7c9e128744c1a4797b7eb34c54823cc7a21fc95c19876122ab4bb0fe796d6bba2bc",
            "aggregate_verification_key": "7b232392c3130342c34392c35312c3130332c3136352c37364223a7b22726f6f74223a5b3137392c3135312c3135382c37332c37372c2c3135392c3226d745f636f6d6d69746d656e7"
          }
        ]
      },
      "CertificateListItemMessage": {
        "description": "CertificateListItemMessage represents an item of a list of Mithril certificates",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "hash",
          "previous_hash",
          "epoch",
          "signed_entity_type",
          "metadata",
          "protocol_message",
          "signed_message",
          "aggregate_verification_key"
        ],
        "properties": {
          "hash": {
            "description": "Hash of the current certificate",
            "type": "string",
            "format": "bytes"
          },
          "previous_hash": {
            "description": "Hash of the previous certificate",
            "type": "string",
            "format": "bytes"
          },
          "epoch": {
            "$ref": "#/components/schemas/Epoch"
          },
          "beacon": {
            "deprecated": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CardanoDbBeacon"
              }
            ]
          },
          "signed_entity_type": {
            "$ref": "#/components/schemas/SignedEntityType"
          },
          "metadata": {
            "$ref": "#/components/schemas/CertificateListItemMessageMetadata"
          },
          "protocol_message": {
            "$ref": "#/components/schemas/ProtocolMessage"
          },
          "signed_message": {
            "description": "Hash of the protocol message that is signed by the signer participants",
            "type": "string",
            "format": "bytes"
          },
          "aggregate_verification_key": {
            "description": "Aggregate verification key used to verify the multi signature",
            "type": "string",
            "format": "bytes"
          }
        },
        "example": {
          "hash": "9dc998101590f733f7a50e7c03b5b336e69a751cc02d811395d49618db3ba3d7",
          "previous_hash": "aa2ddfb87a17103bdf15bfb21a2941b3f3223a3c8d710910496c392b14f8c403",
          "epoch": 32,
          "beacon": {
            "network": "mainnet",
            "epoch": 329,
            "immutable_file_number": 7060000
          },
          "signed_entity_type": {
            "MithrilStakeDistribution": 246
          },
          "metadata": {
            "network": "mainnet",
            "version": "0.1.0",
            "parameters": {
              "k": 5,
              "m": 100,
              "phi_f": 0.65
            },
            "initiated_at": "2022-07-17T18:51:23.192811338Z",
            "sealed_at": "2022-07-17T18:51:35.830832580Z",
            "total_signers": 3
          },
          "protocol_message": {
            "message_parts": {
              "snapshot_digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
              "next_aggregate_verification_key": "b132362c3232352c36392c31373133352c31323235392c3235332c3233342c34226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b33382c3382c3138322c3231322c2c363"
            }
          },
          "signed_message": "07ed7c9e128744c1a4797b7eb34c54823cc7a21fc95c19876122ab4bb0fe796d6bba2bc",
          "aggregate_verification_key": "7b232392c3130342c34392c35312c3130332c3136352c37364223a7b22726f6f74223a5b3137392c3135312c3135382c37332c37372c2c3135392c3226d745f636f6d6d69746d656e7"
        }
      },
      "CertificateMetadata": {
        "description": "CertificateMetadata represents the metadata associated to a Certificate",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "network",
          "version",
          "parameters",
          "initiated_at",
          "sealed_at",
          "signers"
        ],
        "properties": {
          "network": {
            "description": "Cardano network",
            "type": "string"
          },
          "version": {
            "description": "Version of the protocol",
            "type": "string",
            "format": "bytes"
          },
          "parameters": {
            "$ref": "#/components/schemas/ProtocolParameters"
          },
          "initiated_at": {
            "description": "Date and time at which the certificate was initialized and ready to accept single signatures from signers",
            "type": "string",
            "format": "date-time"
          },
          "sealed_at": {
            "description": "Date and time at which the certificate was sealed (when the quorum of single signatures was reached so that a multi signature could be aggregated from them)",
            "type": "string",
            "format": "date-time"
          },
          "signers": {
            "description": "The list of the signers identifiers with their stakes and verification keys",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StakeDistributionParty"
            }
          }
        },
        "example": {
          "network": "mainnet",
          "version": "0.1.0",
          "parameters": {
            "k": 5,
            "m": 100,
            "phi_f": 0.65
          },
          "initiated_at": "2022-07-17T18:51:23.192811338Z",
          "sealed_at": "2022-07-17T18:51:35.830832580Z",
          "signers": [
            {
              "party_id": "1234567890",
              "stake": 1234
            },
            {
              "party_id": "2345678900",
              "stake": 2345
            }
          ]
        }
      },
      "CertificateMessage": {
        "description": "Certificate represents a Mithril certificate embedding a Mithril STM multi signature",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "hash",
          "previous_hash",
          "epoch",
          "signed_entity_type",
          "metadata",
          "protocol_message",
          "signed_message",
          "aggregate_verification_key",
          "multi_signature",
          "genesis_signature"
        ],
        "properties": {
          "hash": {
            "description": "Hash of the current certificate",
            "type": "string",
            "format": "bytes"
          },
          "previous_hash": {
            "description": "Hash of the previous certificate",
            "type": "string",
            "format": "bytes"
          },
          "epoch": {
            "$ref": "#/components/schemas/Epoch"
          },
          "beacon": {
            "deprecated": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CardanoDbBeacon"
              }
            ]
          },
          "signed_entity_type": {
            "$ref": "#/components/schemas/SignedEntityType"
          },
          "metadata": {
            "$ref": "#/components/schemas/CertificateMetadata"
          },
          "protocol_message": {
            "$ref": "#/components/schemas/ProtocolMessage"
          },
          "signed_message": {
            "description": "Hash of the protocol message that is signed by the signer participants",
            "type": "string",
            "format": "bytes"
          },
          "aggregate_verification_key": {
            "description": "Aggregate verification key used to verify the multi signature",
            "type": "string",
            "format": "bytes"
          },
          "multi_signature": {
            "description": "STM multi signature created from a quorum of single signatures from the signers",
            "type": "string",
            "format": "bytes"
          },
          "genesis_signature": {
            "description": "Genesis signature created to bootstrap the certificate chain with the Cardano Genesis Keys",
            "type": "string",
            "format": "bytes"
          }
        },
        "example": {
          "hash": "9dc998101590f733f7a50e7c03b5b336e69a751cc02d811395d49618db3ba3d7",
          "previous_hash": "aa2ddfb87a17103bdf15bfb21a2941b3f3223a3c8d710910496c392b14f8c403",
          "epoch": 329,
          "beacon": {
            "network": "mainnet",
            "epoch": 329,
            "immutable_file_number": 7060000
          },
          "signed_entity_type": {
            "MithrilStakeDistribution": 246
          },
          "metadata": {
            "network": "mainnet",
            "version": "0.1.0",
            "parameters": {
              "k": 5,
              "m": 100,
              "phi_f": 0.65
            },
            "initiated_at": "2022-07-17T18:51:23.192811338Z",
            "sealed_at": "2022-07-17T18:51:35.830832580Z",
            "signers": [
              {
                "party_id": "1234567890",
                "verification_key": "7b12766b223a5c342b39302c32392c39392c39382c3131313138342c32252c32352c31353",
                "verification_key_signature": "7b5473693727369676d61223a7b227369676d6d61223a7b261223a9b227369676d61213a",
                "operational_certificate": "5b73136372c38302c37342c3136362c313535b5b3232352c3230332c3235352c313030262c38322c39382c32c39332c3138342c3135362c3136362c32312c3131312c3232312c36332c3137372c3232332c3232332c31392c3537",
                "kes_period": 123,
                "stake": 1234
              },
              {
                "party_id": "2345678900",
                "verification_key": "7b392c39392c13131312766b223a5c39382c313342b39302c252c32352c31353328342c32",
                "verification_key_signature": "2c33302c3133312c3138322c34362c3133352c372c3139302c3235322c35352c32322c39",
                "operational_certificate": "3231342c3137372c37312c3232352c3233332c3135335d2c322c3139322c5b3133352c34312c3230332c3131332c3c33352c3234302c3230392c312c32392c3233332c33342c3138382c3134312c3130342c3234382c3231392c3",
                "kes_period": 456,
                "stake": 2345
              }
            ]
          },
          "protocol_message": {
            "message_parts": {
              "snapshot_digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
              "next_aggregate_verification_key": "b132362c3232352c36392c31373133352c31323235392c3235332c3233342c34226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b33382c3382c3138322c3231322c2c363"
            }
          },
          "signed_message": "07ed7c9e128744c1a4797b7eb34c54823cc7a21fc95c19876122ab4bb0fe796d6bba2bc",
          "aggregate_verification_key": "7b232392c3130342c34392c35312c3130332c3136352c37364223a7b22726f6f74223a5b3137392c3135312c3135382c37332c37372c2c3135392c3226d745f636f6d6d69746d656e7",
          "multi_signature": "",
          "genesis_signature": ""
        }
      },
      "SnapshotListMessage": {
        "description": "SnapshotListMessage represents a list of snapshots",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Snapshot"
        },
        "example": [
          {
            "digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "beacon": {
              "network": "mainnet",
              "epoch": 329,
              "immutable_file_number": 7060000
            },
            "certificate_hash": "7905e83ab5d7bc082c1bbc3033bfd19c539078830d19080d1f241c70aa532572",
            "size": 26058531636,
            "created_at": "2022-07-21T17:32:28Z",
            "locations": [
              "https://mithril-cdn-us.iohk.io/snapshot/6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
              "https://mithril-cdn-eu.iohk.io/snapshot/6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
              "magnet:?xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C",
              "ipfs:QmPXME1oRtoT627YKaDPDQ3PwA8tdP9rWuAAweLzqSwAWT"
            ]
          }
        ]
      },
      "Snapshot": {
        "description": "Snapshot represents a snapshot file and its metadata",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "digest",
          "beacon",
          "certificate_hash",
          "size",
          "created_at",
          "locations"
        ],
        "properties": {
          "digest": {
            "description": "Digest that is signed by the signer participants",
            "type": "string",
            "format": "bytes"
          },
          "beacon": {
            "$ref": "#/components/schemas/CardanoDbBeacon"
          },
          "certificate_hash": {
            "description": "Hash of the associated certificate",
            "type": "string",
            "format": "bytes"
          },
          "size": {
            "description": "Size of the snapshot file in Bytes",
            "type": "integer",
            "format": "int64"
          },
          "created_at": {
            "description": "Date and time at which the snapshot was created",
            "type": "string",
            "format": "date-time"
          },
          "locations": {
            "description": "Locations where the binary content of the snapshot can be retrieved",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compression_algorithm": {
            "description": "Compression algorithm for the snapshot archive",
            "type": "string"
          },
          "cardano_node_version": {
            "description": "Version of the Cardano node which is used to create snapshot archives.",
            "type": "string"
          }
        },
        "example": {
          "digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
          "beacon": {
            "network": "mainnet",
            "epoch": 329,
            "immutable_file_number": 7060000
          },
          "certificate_hash": "7905e83ab5d7bc082c1bbc3033bfd19c539078830d19080d1f241c70aa532572",
          "size": 26058531636,
          "created_at": "2022-07-21T17:32:28Z",
          "locations": [
            "https://mithril-cdn-us.iohk.io/snapshot/6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "https://mithril-cdn-eu.iohk.io/snapshot/6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "magnet:?xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C",
            "ipfs:QmPXME1oRtoT627YKaDPDQ3PwA8tdP9rWuAAweLzqSwAWT"
          ],
          "compression_algorithm": "zstandard",
          "cardano_node_version": "1.0.0"
        }
      },
      "SnapshotMessage": {
        "description": "This message represents a snapshot file and its metadata.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Snapshot"
          }
        ],
        "example": {
          "digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
          "beacon": {
            "network": "mainnet",
            "epoch": 329,
            "immutable_file_number": 7060000
          },
          "certificate_hash": "7905e83ab5d7bc082c1bbc3033bfd19c539078830d19080d1f241c70aa532572",
          "size": 26058531636,
          "created_at": "2022-07-21T17:32:28Z",
          "locations": [
            "https://mithril-cdn-us.iohk.io/snapshot/6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "https://mithril-cdn-eu.iohk.io/snapshot/6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "magnet:?xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C",
            "ipfs:QmPXME1oRtoT627YKaDPDQ3PwA8tdP9rWuAAweLzqSwAWT"
          ],
          "compression_algorithm": "zstandard",
          "cardano_node_version": "1.0.0"
        }
      },
      "SnapshotDownloadMessage": {
        "description": "SnapshotDownloadMessage represents a downloaded snapshot event",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "digest",
          "beacon",
          "size",
          "locations",
          "compression_algorithm",
          "cardano_node_version"
        ],
        "properties": {
          "digest": {
            "description": "Digest that is signed by the signer participants",
            "type": "string",
            "format": "bytes"
          },
          "beacon": {
            "$ref": "#/components/schemas/CardanoDbBeacon"
          },
          "size": {
            "description": "Size of the snapshot file in Bytes",
            "type": "integer",
            "format": "int64"
          },
          "locations": {
            "description": "Locations where the binary content of the snapshot can be retrieved",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compression_algorithm": {
            "description": "Compression algorithm for the snapshot archive",
            "type": "string"
          },
          "cardano_node_version": {
            "description": "Version of the Cardano node which is used to create snapshot archives.",
            "type": "string"
          }
        },
        "example": {
          "digest": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
          "beacon": {
            "network": "mainnet",
            "epoch": 329,
            "immutable_file_number": 7060000
          },
          "size": 26058531636,
          "locations": [
            "https://mithril-cdn-us.iohk.io/snapshot/6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "https://mithril-cdn-eu.iohk.io/snapshot/6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "magnet:?xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C",
            "ipfs:QmPXME1oRtoT627YKaDPDQ3PwA8tdP9rWuAAweLzqSwAWT"
          ],
          "compression_algorithm": "zstandard",
          "cardano_node_version": "1.0.0"
        }
      },
      "MithrilStakeDistributionListMessage": {
        "description": "MithrilStakeDistributionListMessage represents a list of Mithril stake distribution",
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "epoch",
            "hash",
            "created_at"
          ],
          "properties": {
            "epoch": {
              "$ref": "#/components/schemas/Epoch"
            },
            "hash": {
              "description": "Hash of the Mithril stake distribution",
              "type": "string",
              "format": "bytes"
            },
            "certificate_hash": {
              "description": "Hash of the associated certificate",
              "type": "string",
              "format": "bytes"
            },
            "created_at": {
              "description": "Date and time at which the Mithril stake distribution was created",
              "type": "string",
              "format": "date-time,"
            }
          },
          "example": {
            "epoch": 123,
            "hash": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "certificate_hash": "7905e83ab5d7bc082c1bbc3033bfd19c539078830d19080d1f241c70aa532572",
            "created_at": "2022-06-14T10:52:31Z"
          }
        }
      },
      "MithrilStakeDistributionMessage": {
        "description": "This message represents a Mithril stake distribution.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "epoch",
          "hash",
          "signers",
          "created_at",
          "protocol_parameters"
        ],
        "properties": {
          "epoch": {
            "$ref": "#/components/schemas/Epoch"
          },
          "hash": {
            "description": "Hash of the Mithril stake distribution",
            "type": "string",
            "format": "bytes"
          },
          "certificate_hash": {
            "description": "Hash of the associated certificate",
            "type": "string",
            "format": "bytes"
          },
          "signers": {
            "description": "The list of the signers with their stakes and verification keys",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignerWithStake"
            }
          },
          "created_at": {
            "description": "Date and time of the entity creation",
            "type": "string",
            "format": "date-time,"
          },
          "protocol_parameters": {
            "$ref": "#/components/schemas/ProtocolParameters"
          }
        },
        "example": {
          "epoch": 123,
          "hash": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
          "certificate_hash": "7905e83ab5d7bc082c1bbc3033bfd19c539078830d19080d1f241c70aa532572",
          "signers": [
            {
              "party_id": "1234567890",
              "verification_key": "7b12766b223a5c342b39302c32392c39392c39382c3131313138342c32252c32352c31353",
              "verification_key_signature": "7b5473693727369676d61223a7b227369676d6d61223a7b261223a9b227369676d61213a",
              "operational_certificate": "5b73136372c38302c37342c3136362c313535b5b3232352c3230332c3235352c313030262c38322c39382c32c39332c3138342c3135362c3136362c32312c3131312c3232312c36332c3137372c3232332c3232332c31392c3537",
              "kes_period": 123,
              "stake": 1234
            },
            {
              "party_id": "2345678900",
              "verification_key": "7b392c39392c13131312766b223a5c39382c313342b39302c252c32352c31353328342c32",
              "verification_key_signature": "2c33302c3133312c3138322c34362c3133352c372c3139302c3235322c35352c32322c39",
              "operational_certificate": "3231342c3137372c37312c3232352c3233332c3135335d2c322c3139322c5b3133352c34312c3230332c3131332c3c33352c3234302c3230392c312c32392c3233332c33342c3138382c3134312c3130342c3234382c3231392c3",
              "kes_period": 456,
              "stake": 2345
            }
          ],
          "created_at": "2022-06-14T10:52:31Z",
          "protocol_parameters": {
            "k": 5,
            "m": 100,
            "phi_f": 0.65
          }
        }
      },
      "CardanoTransactionSnapshotListMessage": {
        "description": "CardanoTransactionSnapshotListMessage represents a list of Cardano transactions set snapshots",
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "hash",
            "certificate_hash",
            "merkle_root",
            "epoch",
            "block_number",
            "created_at"
          ],
          "properties": {
            "hash": {
              "description": "Hash of the Cardano transactions set",
              "type": "string",
              "format": "bytes"
            },
            "certificate_hash": {
              "description": "Hash of the associated certificate",
              "type": "string",
              "format": "bytes"
            },
            "merkle_root": {
              "description": "Merkle root of the Cardano transactions set",
              "type": "string",
              "format": "bytes"
            },
            "epoch": {
              "$ref": "#/components/schemas/Epoch"
            },
            "block_number": {
              "description": "Cardano block number",
              "type": "integer",
              "format": "int64"
            },
            "created_at": {
              "description": "Date and time at which the Cardano transactions set was created",
              "type": "string",
              "format": "date-time,"
            }
          },
          "example": {
            "hash": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
            "certificate_hash": "7905e83ab5d7bc082c1bbc3033bfd19c539078830d19080d1f241c70aa532572",
            "merkle_root": "33bfd17bc082ab5dd1fc0788241c70aa5325241c70aa532530d190809c5391bbc307905e8372",
            "epoch": 123,
            "block_number": 1234,
            "created_at": "2022-06-14T10:52:31Z"
          }
        }
      },
      "CardanoTransactionSnapshotMessage": {
        "description": "This message represents a Cardano transactions set snapshot.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "hash",
          "certificate_hash",
          "merkle_root",
          "epoch",
          "block_number",
          "created_at"
        ],
        "properties": {
          "hash": {
            "description": "Hash of the Cardano transactions set",
            "type": "string",
            "format": "bytes"
          },
          "certificate_hash": {
            "description": "Hash of the associated certificate",
            "type": "string",
            "format": "bytes"
          },
          "merkle_root": {
            "description": "Merkle root of the Cardano transactions set",
            "type": "string",
            "format": "bytes"
          },
          "epoch": {
            "$ref": "#/components/schemas/Epoch"
          },
          "block_number": {
            "description": "Cardano block number",
            "type": "integer",
            "format": "int64"
          },
          "created_at": {
            "description": "Date and time at which the Cardano transactions set was created",
            "type": "string",
            "format": "date-time,"
          }
        },
        "example": {
          "hash": "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
          "certificate_hash": "7905e83ab5d7bc082c1bbc3033bfd19c539078830d19080d1f241c70aa532572",
          "merkle_root": "33bfd17bc082ab5dd1fc0788241c70aa5325241c70aa532530d190809c5391bbc307905e8372",
          "epoch": 123,
          "block_number": 1234,
          "created_at": "2022-06-14T10:52:31Z"
        }
      },
      "CardanoTransactionProofMessage": {
        "description": "This message represents proofs for Cardano Transactions.",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "certificate_hash",
          "certified_transactions",
          "non_certified_transactions",
          "latest_block_number"
        ],
        "properties": {
          "certificate_hash": {
            "description": "Hash of the certificate that validate the merkle root of this proof",
            "type": "string",
            "format": "bytes"
          },
          "certified_transactions": {
            "description": "Proofs for certified Cardano transactions",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "transactions_hashes",
                "proof"
              ],
              "properties": {
                "transactions_hashes": {
                  "type": "array",
                  "items": {
                    "description": "Hash of the Cardano transactions",
                    "type": "string",
                    "format": "bytes"
                  }
                },
                "proof": {
                  "description": "Proof for the Cardano transactions",
                  "type": "string",
                  "format": "bytes"
                }
              }
            }
          },
          "non_certified_transactions": {
            "type": "array",
            "items": {
              "description": "Hash of the non certified Cardano transactions",
              "type": "string",
              "format": "bytes"
            }
          },
          "latest_block_number": {
            "description": "Last block number",
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "certificate_hash": "7905e83ab5d7bc082c1bbc3033bfd19c539078830d19080d1f241c70aa532572",
          "certified_transactions": [
            {
              "transactions_hashes": [
                "6367ee65d0d1272e6e70736a1ea2cae34015874517f6328364f6b73930966732",
                "5d0d1272e6e70736a1ea2cae34015876367ee64517f6328364f6b73930966732"
              ],
              "proof": "5b73136372c38302c37342c3136362c313535b5b323136362c313535b5b3232352c3230332c3235352c313030262c38322c39382c32c39332c3138342c313532352c3230332c3235352c313030262c33136362c313535b5b3232352c3230332c3235352c313030262c38322c39382c32c39332c3138342c31358322c39382c32c39332c3138342c3135362c3136362c32312c3131312c3232312c36332c3137372c3232332c3232332c31392c3537"
            }
          ],
          "non_certified_transactions": [
            "732d0d1272e6e70736367ee6f6328364f6b739309666a1ea2cae34015874517"
          ],
          "latest_block_number": 7060000
        }
      },
      "Error": {
        "description": "Internal error representation",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "message"
        ],
        "properties": {
          "label": {
            "description": "optional label",
            "type": "string"
          },
          "message": {
            "description": "error message",
            "type": "string",
            "example": "An error occurred, the operation could not be completed"
          }
        },
        "example": {
          "label": "Internal error",
          "message": "An error occurred, the operation could not be completed"
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status_code": {
                  "type": "integer",
                  "example": 400
                },
                "error": {
                  "type": "string",
                  "example": "Bad Request"
                },
                "message": {
                  "type": "string",
                  "example": "Backend did not understand your request."
                }
              },
              "required": [
                "error",
                "message",
                "status_code"
              ]
            }
          }
        }
      },
      "403": {
        "description": "Authentication secret is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status_code": {
                  "type": "integer",
                  "example": 403
                },
                "error": {
                  "type": "string",
                  "example": "Forbidden"
                },
                "message": {
                  "type": "string",
                  "example": "Invalid project token."
                }
              },
              "required": [
                "error",
                "message",
                "status_code"
              ]
            }
          }
        }
      },
      "404": {
        "description": "Component not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status_code": {
                  "type": "integer",
                  "example": 404
                },
                "error": {
                  "type": "string",
                  "example": "Not Found"
                },
                "message": {
                  "type": "string",
                  "example": "The requested component has not been found."
                }
              },
              "required": [
                "error",
                "message",
                "status_code"
              ]
            }
          }
        }
      },
      "418": {
        "description": "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status_code": {
                  "type": "integer",
                  "example": 418
                },
                "error": {
                  "type": "string",
                  "example": "Requested Banned"
                },
                "message": {
                  "type": "string",
                  "example": "IP has been auto-banned for flooding."
                }
              },
              "required": [
                "error",
                "message",
                "status_code"
              ]
            }
          }
        }
      },
      "425": {
        "description": "Mempool is already full, not accepting new txs straight away",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status_code": {
                  "type": "integer",
                  "example": 425
                },
                "error": {
                  "type": "string",
                  "example": "Mempool Full"
                },
                "message": {
                  "type": "string",
                  "example": "Mempool is full, please try resubmitting again later."
                }
              },
              "required": [
                "error",
                "message",
                "status_code"
              ]
            }
          }
        }
      },
      "429": {
        "description": "Usage limit reached",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status_code": {
                  "type": "integer",
                  "example": 429
                },
                "error": {
                  "type": "string",
                  "example": "Project Over Limit"
                },
                "message": {
                  "type": "string",
                  "example": "Usage is over limit."
                }
              },
              "required": [
                "error",
                "message",
                "status_code"
              ]
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status_code": {
                  "type": "integer",
                  "example": 500
                },
                "error": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "message": {
                  "type": "string",
                  "example": "An unexpected response was received from the backend."
                }
              },
              "required": [
                "error",
                "message",
                "status_code"
              ]
            }
          }
        }
      },
      "425-2": {
        "description": "Pin queue is currently full, not accepting new txs straight away",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status_code": {
                  "type": "integer",
                  "example": 425
                },
                "error": {
                  "type": "string",
                  "example": "Pin Queue Full"
                },
                "message": {
                  "type": "string",
                  "example": "Your pin queue is currently full, please try pinning again later."
                }
              },
              "required": [
                "error",
                "message",
                "status_code"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "project_id": {
        "type": "apiKey",
        "in": "header",
        "name": "project_id",
        "description": "There are multiple token types available based on network you choose\nwhen creating a Blockfrost a project, for a list of token types\nsee available networks.\n"
      }
    }
  }
}